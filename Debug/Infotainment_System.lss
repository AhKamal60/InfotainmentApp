
Infotainment_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002678  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001c2  00800060  00002678  0000270c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010d  00800222  00800222  000028ce  2**0
                  ALLOC
  3 .stab         000031ec  00000000  00000000  000028d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000015ec  00000000  00000000  00005abc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 32       	cpi	r26, 0x2F	; 47
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 06 04 	call	0x80c	; 0x80c <main>
      8a:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GameRoll>:
static uint8_t gu8_final=0;


/*__________________________________Function Implementation_______________________________________*/ 
void GameRoll (void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	28 97       	sbiw	r28, 0x08	; 8
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	uint8_t u8_roll=NULL;
      a6:	1e 82       	std	Y+6, r1	; 0x06
	switch (gu8_Game_Task)
      a8:	80 91 23 02 	lds	r24, 0x0223
      ac:	28 2f       	mov	r18, r24
      ae:	30 e0       	ldi	r19, 0x00	; 0
      b0:	38 87       	std	Y+8, r19	; 0x08
      b2:	2f 83       	std	Y+7, r18	; 0x07
      b4:	8f 81       	ldd	r24, Y+7	; 0x07
      b6:	98 85       	ldd	r25, Y+8	; 0x08
      b8:	80 31       	cpi	r24, 0x10	; 16
      ba:	91 05       	cpc	r25, r1
      bc:	09 f4       	brne	.+2      	; 0xc0 <GameRoll+0x2e>
      be:	1f c2       	rjmp	.+1086   	; 0x4fe <GameRoll+0x46c>
      c0:	2f 81       	ldd	r18, Y+7	; 0x07
      c2:	38 85       	ldd	r19, Y+8	; 0x08
      c4:	21 31       	cpi	r18, 0x11	; 17
      c6:	31 05       	cpc	r19, r1
      c8:	0c f0       	brlt	.+2      	; 0xcc <GameRoll+0x3a>
      ca:	66 c0       	rjmp	.+204    	; 0x198 <GameRoll+0x106>
      cc:	8f 81       	ldd	r24, Y+7	; 0x07
      ce:	98 85       	ldd	r25, Y+8	; 0x08
      d0:	87 30       	cpi	r24, 0x07	; 7
      d2:	91 05       	cpc	r25, r1
      d4:	09 f4       	brne	.+2      	; 0xd8 <GameRoll+0x46>
      d6:	66 c1       	rjmp	.+716    	; 0x3a4 <GameRoll+0x312>
      d8:	2f 81       	ldd	r18, Y+7	; 0x07
      da:	38 85       	ldd	r19, Y+8	; 0x08
      dc:	28 30       	cpi	r18, 0x08	; 8
      de:	31 05       	cpc	r19, r1
      e0:	54 f5       	brge	.+84     	; 0x136 <GameRoll+0xa4>
      e2:	8f 81       	ldd	r24, Y+7	; 0x07
      e4:	98 85       	ldd	r25, Y+8	; 0x08
      e6:	83 30       	cpi	r24, 0x03	; 3
      e8:	91 05       	cpc	r25, r1
      ea:	09 f4       	brne	.+2      	; 0xee <GameRoll+0x5c>
      ec:	ff c0       	rjmp	.+510    	; 0x2ec <GameRoll+0x25a>
      ee:	2f 81       	ldd	r18, Y+7	; 0x07
      f0:	38 85       	ldd	r19, Y+8	; 0x08
      f2:	24 30       	cpi	r18, 0x04	; 4
      f4:	31 05       	cpc	r19, r1
      f6:	94 f4       	brge	.+36     	; 0x11c <GameRoll+0x8a>
      f8:	8f 81       	ldd	r24, Y+7	; 0x07
      fa:	98 85       	ldd	r25, Y+8	; 0x08
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	91 05       	cpc	r25, r1
     100:	09 f4       	brne	.+2      	; 0x104 <GameRoll+0x72>
     102:	c9 c0       	rjmp	.+402    	; 0x296 <GameRoll+0x204>
     104:	2f 81       	ldd	r18, Y+7	; 0x07
     106:	38 85       	ldd	r19, Y+8	; 0x08
     108:	22 30       	cpi	r18, 0x02	; 2
     10a:	31 05       	cpc	r19, r1
     10c:	0c f0       	brlt	.+2      	; 0x110 <GameRoll+0x7e>
     10e:	d7 c0       	rjmp	.+430    	; 0x2be <GameRoll+0x22c>
     110:	8f 81       	ldd	r24, Y+7	; 0x07
     112:	98 85       	ldd	r25, Y+8	; 0x08
     114:	00 97       	sbiw	r24, 0x00	; 0
     116:	09 f4       	brne	.+2      	; 0x11a <GameRoll+0x88>
     118:	a0 c0       	rjmp	.+320    	; 0x25a <GameRoll+0x1c8>
     11a:	6f c3       	rjmp	.+1758   	; 0x7fa <GameRoll+0x768>
     11c:	2f 81       	ldd	r18, Y+7	; 0x07
     11e:	38 85       	ldd	r19, Y+8	; 0x08
     120:	25 30       	cpi	r18, 0x05	; 5
     122:	31 05       	cpc	r19, r1
     124:	09 f4       	brne	.+2      	; 0x128 <GameRoll+0x96>
     126:	13 c1       	rjmp	.+550    	; 0x34e <GameRoll+0x2bc>
     128:	8f 81       	ldd	r24, Y+7	; 0x07
     12a:	98 85       	ldd	r25, Y+8	; 0x08
     12c:	86 30       	cpi	r24, 0x06	; 6
     12e:	91 05       	cpc	r25, r1
     130:	0c f0       	brlt	.+2      	; 0x134 <GameRoll+0xa2>
     132:	21 c1       	rjmp	.+578    	; 0x376 <GameRoll+0x2e4>
     134:	f5 c0       	rjmp	.+490    	; 0x320 <GameRoll+0x28e>
     136:	2f 81       	ldd	r18, Y+7	; 0x07
     138:	38 85       	ldd	r19, Y+8	; 0x08
     13a:	2b 30       	cpi	r18, 0x0B	; 11
     13c:	31 05       	cpc	r19, r1
     13e:	09 f4       	brne	.+2      	; 0x142 <GameRoll+0xb0>
     140:	80 c1       	rjmp	.+768    	; 0x442 <GameRoll+0x3b0>
     142:	8f 81       	ldd	r24, Y+7	; 0x07
     144:	98 85       	ldd	r25, Y+8	; 0x08
     146:	8c 30       	cpi	r24, 0x0C	; 12
     148:	91 05       	cpc	r25, r1
     14a:	6c f4       	brge	.+26     	; 0x166 <GameRoll+0xd4>
     14c:	2f 81       	ldd	r18, Y+7	; 0x07
     14e:	38 85       	ldd	r19, Y+8	; 0x08
     150:	29 30       	cpi	r18, 0x09	; 9
     152:	31 05       	cpc	r19, r1
     154:	09 f4       	brne	.+2      	; 0x158 <GameRoll+0xc6>
     156:	4a c1       	rjmp	.+660    	; 0x3ec <GameRoll+0x35a>
     158:	8f 81       	ldd	r24, Y+7	; 0x07
     15a:	98 85       	ldd	r25, Y+8	; 0x08
     15c:	8a 30       	cpi	r24, 0x0A	; 10
     15e:	91 05       	cpc	r25, r1
     160:	0c f0       	brlt	.+2      	; 0x164 <GameRoll+0xd2>
     162:	58 c1       	rjmp	.+688    	; 0x414 <GameRoll+0x382>
     164:	2e c1       	rjmp	.+604    	; 0x3c2 <GameRoll+0x330>
     166:	2f 81       	ldd	r18, Y+7	; 0x07
     168:	38 85       	ldd	r19, Y+8	; 0x08
     16a:	2d 30       	cpi	r18, 0x0D	; 13
     16c:	31 05       	cpc	r19, r1
     16e:	09 f4       	brne	.+2      	; 0x172 <GameRoll+0xe0>
     170:	8c c1       	rjmp	.+792    	; 0x48a <GameRoll+0x3f8>
     172:	8f 81       	ldd	r24, Y+7	; 0x07
     174:	98 85       	ldd	r25, Y+8	; 0x08
     176:	8d 30       	cpi	r24, 0x0D	; 13
     178:	91 05       	cpc	r25, r1
     17a:	0c f4       	brge	.+2      	; 0x17e <GameRoll+0xec>
     17c:	71 c1       	rjmp	.+738    	; 0x460 <GameRoll+0x3ce>
     17e:	2f 81       	ldd	r18, Y+7	; 0x07
     180:	38 85       	ldd	r19, Y+8	; 0x08
     182:	2e 30       	cpi	r18, 0x0E	; 14
     184:	31 05       	cpc	r19, r1
     186:	09 f4       	brne	.+2      	; 0x18a <GameRoll+0xf8>
     188:	94 c1       	rjmp	.+808    	; 0x4b2 <GameRoll+0x420>
     18a:	8f 81       	ldd	r24, Y+7	; 0x07
     18c:	98 85       	ldd	r25, Y+8	; 0x08
     18e:	8f 30       	cpi	r24, 0x0F	; 15
     190:	91 05       	cpc	r25, r1
     192:	09 f4       	brne	.+2      	; 0x196 <GameRoll+0x104>
     194:	a5 c1       	rjmp	.+842    	; 0x4e0 <GameRoll+0x44e>
     196:	31 c3       	rjmp	.+1634   	; 0x7fa <GameRoll+0x768>
     198:	2f 81       	ldd	r18, Y+7	; 0x07
     19a:	38 85       	ldd	r19, Y+8	; 0x08
     19c:	28 31       	cpi	r18, 0x18	; 24
     19e:	31 05       	cpc	r19, r1
     1a0:	09 f4       	brne	.+2      	; 0x1a4 <GameRoll+0x112>
     1a2:	4b c2       	rjmp	.+1174   	; 0x63a <GameRoll+0x5a8>
     1a4:	8f 81       	ldd	r24, Y+7	; 0x07
     1a6:	98 85       	ldd	r25, Y+8	; 0x08
     1a8:	89 31       	cpi	r24, 0x19	; 25
     1aa:	91 05       	cpc	r25, r1
     1ac:	2c f5       	brge	.+74     	; 0x1f8 <GameRoll+0x166>
     1ae:	2f 81       	ldd	r18, Y+7	; 0x07
     1b0:	38 85       	ldd	r19, Y+8	; 0x08
     1b2:	24 31       	cpi	r18, 0x14	; 20
     1b4:	31 05       	cpc	r19, r1
     1b6:	09 f4       	brne	.+2      	; 0x1ba <GameRoll+0x128>
     1b8:	f1 c1       	rjmp	.+994    	; 0x59c <GameRoll+0x50a>
     1ba:	8f 81       	ldd	r24, Y+7	; 0x07
     1bc:	98 85       	ldd	r25, Y+8	; 0x08
     1be:	85 31       	cpi	r24, 0x15	; 21
     1c0:	91 05       	cpc	r25, r1
     1c2:	6c f4       	brge	.+26     	; 0x1de <GameRoll+0x14c>
     1c4:	2f 81       	ldd	r18, Y+7	; 0x07
     1c6:	38 85       	ldd	r19, Y+8	; 0x08
     1c8:	22 31       	cpi	r18, 0x12	; 18
     1ca:	31 05       	cpc	r19, r1
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <GameRoll+0x13e>
     1ce:	c0 c1       	rjmp	.+896    	; 0x550 <GameRoll+0x4be>
     1d0:	8f 81       	ldd	r24, Y+7	; 0x07
     1d2:	98 85       	ldd	r25, Y+8	; 0x08
     1d4:	83 31       	cpi	r24, 0x13	; 19
     1d6:	91 05       	cpc	r25, r1
     1d8:	0c f0       	brlt	.+2      	; 0x1dc <GameRoll+0x14a>
     1da:	d1 c1       	rjmp	.+930    	; 0x57e <GameRoll+0x4ec>
     1dc:	a5 c1       	rjmp	.+842    	; 0x528 <GameRoll+0x496>
     1de:	2f 81       	ldd	r18, Y+7	; 0x07
     1e0:	38 85       	ldd	r19, Y+8	; 0x08
     1e2:	26 31       	cpi	r18, 0x16	; 22
     1e4:	31 05       	cpc	r19, r1
     1e6:	09 f4       	brne	.+2      	; 0x1ea <GameRoll+0x158>
     1e8:	02 c2       	rjmp	.+1028   	; 0x5ee <GameRoll+0x55c>
     1ea:	8f 81       	ldd	r24, Y+7	; 0x07
     1ec:	98 85       	ldd	r25, Y+8	; 0x08
     1ee:	87 31       	cpi	r24, 0x17	; 23
     1f0:	91 05       	cpc	r25, r1
     1f2:	0c f0       	brlt	.+2      	; 0x1f6 <GameRoll+0x164>
     1f4:	13 c2       	rjmp	.+1062   	; 0x61c <GameRoll+0x58a>
     1f6:	e7 c1       	rjmp	.+974    	; 0x5c6 <GameRoll+0x534>
     1f8:	2f 81       	ldd	r18, Y+7	; 0x07
     1fa:	38 85       	ldd	r19, Y+8	; 0x08
     1fc:	2c 31       	cpi	r18, 0x1C	; 28
     1fe:	31 05       	cpc	r19, r1
     200:	09 f4       	brne	.+2      	; 0x204 <GameRoll+0x172>
     202:	7e c2       	rjmp	.+1276   	; 0x700 <GameRoll+0x66e>
     204:	8f 81       	ldd	r24, Y+7	; 0x07
     206:	98 85       	ldd	r25, Y+8	; 0x08
     208:	8d 31       	cpi	r24, 0x1D	; 29
     20a:	91 05       	cpc	r25, r1
     20c:	6c f4       	brge	.+26     	; 0x228 <GameRoll+0x196>
     20e:	2f 81       	ldd	r18, Y+7	; 0x07
     210:	38 85       	ldd	r19, Y+8	; 0x08
     212:	2a 31       	cpi	r18, 0x1A	; 26
     214:	31 05       	cpc	r19, r1
     216:	09 f4       	brne	.+2      	; 0x21a <GameRoll+0x188>
     218:	48 c2       	rjmp	.+1168   	; 0x6aa <GameRoll+0x618>
     21a:	8f 81       	ldd	r24, Y+7	; 0x07
     21c:	98 85       	ldd	r25, Y+8	; 0x08
     21e:	8b 31       	cpi	r24, 0x1B	; 27
     220:	91 05       	cpc	r25, r1
     222:	0c f0       	brlt	.+2      	; 0x226 <GameRoll+0x194>
     224:	56 c2       	rjmp	.+1196   	; 0x6d2 <GameRoll+0x640>
     226:	1e c2       	rjmp	.+1084   	; 0x664 <GameRoll+0x5d2>
     228:	2f 81       	ldd	r18, Y+7	; 0x07
     22a:	38 85       	ldd	r19, Y+8	; 0x08
     22c:	2e 31       	cpi	r18, 0x1E	; 30
     22e:	31 05       	cpc	r19, r1
     230:	09 f4       	brne	.+2      	; 0x234 <GameRoll+0x1a2>
     232:	a3 c2       	rjmp	.+1350   	; 0x77a <GameRoll+0x6e8>
     234:	8f 81       	ldd	r24, Y+7	; 0x07
     236:	98 85       	ldd	r25, Y+8	; 0x08
     238:	8e 31       	cpi	r24, 0x1E	; 30
     23a:	91 05       	cpc	r25, r1
     23c:	0c f4       	brge	.+2      	; 0x240 <GameRoll+0x1ae>
     23e:	88 c2       	rjmp	.+1296   	; 0x750 <GameRoll+0x6be>
     240:	2f 81       	ldd	r18, Y+7	; 0x07
     242:	38 85       	ldd	r19, Y+8	; 0x08
     244:	2f 31       	cpi	r18, 0x1F	; 31
     246:	31 05       	cpc	r19, r1
     248:	09 f4       	brne	.+2      	; 0x24c <GameRoll+0x1ba>
     24a:	aa c2       	rjmp	.+1364   	; 0x7a0 <GameRoll+0x70e>
     24c:	8f 81       	ldd	r24, Y+7	; 0x07
     24e:	98 85       	ldd	r25, Y+8	; 0x08
     250:	80 32       	cpi	r24, 0x20	; 32
     252:	91 05       	cpc	r25, r1
     254:	09 f4       	brne	.+2      	; 0x258 <GameRoll+0x1c6>
     256:	be c2       	rjmp	.+1404   	; 0x7d4 <GameRoll+0x742>
     258:	d0 c2       	rjmp	.+1440   	; 0x7fa <GameRoll+0x768>
	{
	uint8_t x;
	case INIT:
		gu8_Init_Error=LCD_init(); /*Initializing the LCD*/
     25a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <LCD_init>
     25e:	80 93 1c 02 	sts	0x021C, r24
		if(gu8_Init_Error==INIT_LCD_OK)
     262:	80 91 1c 02 	lds	r24, 0x021C
     266:	88 23       	and	r24, r24
     268:	09 f0       	breq	.+2      	; 0x26c <GameRoll+0x1da>
     26a:	c7 c2       	rjmp	.+1422   	; 0x7fa <GameRoll+0x768>
		{
			for (x=0; x<NumberOFQUESTIONS; x++ ) /*Initializing the Buffer that will store the answers*/
     26c:	1d 82       	std	Y+5, r1	; 0x05
     26e:	0a c0       	rjmp	.+20     	; 0x284 <GameRoll+0x1f2>
			{
				gu8_key[x]=NULL;
     270:	8d 81       	ldd	r24, Y+5	; 0x05
     272:	88 2f       	mov	r24, r24
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	fc 01       	movw	r30, r24
     278:	e3 5c       	subi	r30, 0xC3	; 195
     27a:	fd 4f       	sbci	r31, 0xFD	; 253
     27c:	10 82       	st	Z, r1
	uint8_t x;
	case INIT:
		gu8_Init_Error=LCD_init(); /*Initializing the LCD*/
		if(gu8_Init_Error==INIT_LCD_OK)
		{
			for (x=0; x<NumberOFQUESTIONS; x++ ) /*Initializing the Buffer that will store the answers*/
     27e:	8d 81       	ldd	r24, Y+5	; 0x05
     280:	8f 5f       	subi	r24, 0xFF	; 255
     282:	8d 83       	std	Y+5, r24	; 0x05
     284:	8d 81       	ldd	r24, Y+5	; 0x05
     286:	85 30       	cpi	r24, 0x05	; 5
     288:	98 f3       	brcs	.-26     	; 0x270 <GameRoll+0x1de>
			{
				gu8_key[x]=NULL;
			}
			gu8_Game_Task++;
     28a:	80 91 23 02 	lds	r24, 0x0223
     28e:	8f 5f       	subi	r24, 0xFF	; 255
     290:	80 93 23 02 	sts	0x0223, r24
     294:	b2 c2       	rjmp	.+1380   	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q1_DISPLAY:  /*Display The First Statement*/
		LCD_displayString("       WLECOME TO THE COVID19 GAME ", &gu8_display_1);
     296:	80 e6       	ldi	r24, 0x60	; 96
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	24 e2       	ldi	r18, 0x24	; 36
     29c:	32 e0       	ldi	r19, 0x02	; 2
     29e:	b9 01       	movw	r22, r18
     2a0:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
		if(TRUE==gu8_display_1)
     2a4:	80 91 24 02 	lds	r24, 0x0224
     2a8:	81 30       	cpi	r24, 0x01	; 1
     2aa:	09 f0       	breq	.+2      	; 0x2ae <GameRoll+0x21c>
     2ac:	a6 c2       	rjmp	.+1356   	; 0x7fa <GameRoll+0x768>
		{
			gu8_display_1=NULL;
     2ae:	10 92 24 02 	sts	0x0224, r1
			gu8_Game_Task++;
     2b2:	80 91 23 02 	lds	r24, 0x0223
     2b6:	8f 5f       	subi	r24, 0xFF	; 255
     2b8:	80 93 23 02 	sts	0x0223, r24
     2bc:	9e c2       	rjmp	.+1340   	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q1_OPTIONS_DISPLAY: /*Display the Second Statement*/
		LCD_displayStringRowColumn(1,0,"               LET'S PLAY! ",&gu8_option_1);
     2be:	24 e8       	ldi	r18, 0x84	; 132
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	ec e2       	ldi	r30, 0x2C	; 44
     2c4:	f2 e0       	ldi	r31, 0x02	; 2
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	a9 01       	movw	r20, r18
     2cc:	9f 01       	movw	r18, r30
     2ce:	0e 94 71 12 	call	0x24e2	; 0x24e2 <LCD_displayStringRowColumn>
		if(TRUE==gu8_option_1)
     2d2:	80 91 2c 02 	lds	r24, 0x022C
     2d6:	81 30       	cpi	r24, 0x01	; 1
     2d8:	09 f0       	breq	.+2      	; 0x2dc <GameRoll+0x24a>
     2da:	8f c2       	rjmp	.+1310   	; 0x7fa <GameRoll+0x768>
		{
			gu8_option_1=NULL;
     2dc:	10 92 2c 02 	sts	0x022C, r1
			gu8_Game_Task++;
     2e0:	80 91 23 02 	lds	r24, 0x0223
     2e4:	8f 5f       	subi	r24, 0xFF	; 255
     2e6:	80 93 23 02 	sts	0x0223, r24
     2ea:	87 c2       	rjmp	.+1294   	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q1_KEYPAD: /*Delay */
		for (int i=0; i<1000;i++)
     2ec:	1c 82       	std	Y+4, r1	; 0x04
     2ee:	1b 82       	std	Y+3, r1	; 0x03
     2f0:	10 c0       	rjmp	.+32     	; 0x312 <GameRoll+0x280>
		{
			if(999==i)
     2f2:	8b 81       	ldd	r24, Y+3	; 0x03
     2f4:	9c 81       	ldd	r25, Y+4	; 0x04
     2f6:	23 e0       	ldi	r18, 0x03	; 3
     2f8:	87 3e       	cpi	r24, 0xE7	; 231
     2fa:	92 07       	cpc	r25, r18
     2fc:	29 f4       	brne	.+10     	; 0x308 <GameRoll+0x276>
			{
				gu8_Game_Task++;
     2fe:	80 91 23 02 	lds	r24, 0x0223
     302:	8f 5f       	subi	r24, 0xFF	; 255
     304:	80 93 23 02 	sts	0x0223, r24
			gu8_option_1=NULL;
			gu8_Game_Task++;
		}
		break;
	case Q1_KEYPAD: /*Delay */
		for (int i=0; i<1000;i++)
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	01 96       	adiw	r24, 0x01	; 1
     30e:	9c 83       	std	Y+4, r25	; 0x04
     310:	8b 83       	std	Y+3, r24	; 0x03
     312:	8b 81       	ldd	r24, Y+3	; 0x03
     314:	9c 81       	ldd	r25, Y+4	; 0x04
     316:	33 e0       	ldi	r19, 0x03	; 3
     318:	88 3e       	cpi	r24, 0xE8	; 232
     31a:	93 07       	cpc	r25, r19
     31c:	54 f3       	brlt	.-44     	; 0x2f2 <GameRoll+0x260>
     31e:	6d c2       	rjmp	.+1242   	; 0x7fa <GameRoll+0x768>
				gu8_Game_Task++;
			}
		}
		break;
	case Q1_CLEAR: /*Clear the LCD*/
		LCD_sendCommand(CLEAR_COMMAND);
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_clearq1++;
     326:	80 91 34 02 	lds	r24, 0x0234
     32a:	8f 5f       	subi	r24, 0xFF	; 255
     32c:	80 93 34 02 	sts	0x0234, r24
		if(gu8_clearq1==8)
     330:	80 91 34 02 	lds	r24, 0x0234
     334:	88 30       	cpi	r24, 0x08	; 8
     336:	09 f0       	breq	.+2      	; 0x33a <GameRoll+0x2a8>
     338:	60 c2       	rjmp	.+1216   	; 0x7fa <GameRoll+0x768>
		{
			gu8_clearq1=NULL;
     33a:	10 92 34 02 	sts	0x0234, r1
			gu8_Game_Task++;
     33e:	80 91 23 02 	lds	r24, 0x0223
     342:	8f 5f       	subi	r24, 0xFF	; 255
     344:	80 93 23 02 	sts	0x0223, r24
			gu8_score=NULL; /*Initializing the Score of the GAME variable */
     348:	10 92 22 02 	sts	0x0222, r1
     34c:	56 c2       	rjmp	.+1196   	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q2_DISPLAY: /*Display Q1*/
		LCD_displayString("      COVID19 IS A GLOBAL Pandemic?", &gu8_display_2);
     34e:	80 ea       	ldi	r24, 0xA0	; 160
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	25 e2       	ldi	r18, 0x25	; 37
     354:	32 e0       	ldi	r19, 0x02	; 2
     356:	b9 01       	movw	r22, r18
     358:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
		if(TRUE==gu8_display_2)
     35c:	80 91 25 02 	lds	r24, 0x0225
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f0       	breq	.+2      	; 0x366 <GameRoll+0x2d4>
     364:	4a c2       	rjmp	.+1172   	; 0x7fa <GameRoll+0x768>
		{
			gu8_display_2=NULL;
     366:	10 92 25 02 	sts	0x0225, r1
			gu8_Game_Task++;
     36a:	80 91 23 02 	lds	r24, 0x0223
     36e:	8f 5f       	subi	r24, 0xFF	; 255
     370:	80 93 23 02 	sts	0x0223, r24
     374:	42 c2       	rjmp	.+1156   	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q2_OPTIONS_DISPLAY: /*DISPLAY Answer Option 1*/
		LCD_displayStringRowColumn(1,0,"            1-YES 2-NO 3-SKIP",&gu8_option_2);
     376:	24 ec       	ldi	r18, 0xC4	; 196
     378:	30 e0       	ldi	r19, 0x00	; 0
     37a:	ed e2       	ldi	r30, 0x2D	; 45
     37c:	f2 e0       	ldi	r31, 0x02	; 2
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	a9 01       	movw	r20, r18
     384:	9f 01       	movw	r18, r30
     386:	0e 94 71 12 	call	0x24e2	; 0x24e2 <LCD_displayStringRowColumn>
		if(TRUE==gu8_option_2)
     38a:	80 91 2d 02 	lds	r24, 0x022D
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	09 f0       	breq	.+2      	; 0x394 <GameRoll+0x302>
     392:	33 c2       	rjmp	.+1126   	; 0x7fa <GameRoll+0x768>
		{
			gu8_option_2=NULL;
     394:	10 92 2d 02 	sts	0x022D, r1
			gu8_Game_Task++;
     398:	80 91 23 02 	lds	r24, 0x0223
     39c:	8f 5f       	subi	r24, 0xFF	; 255
     39e:	80 93 23 02 	sts	0x0223, r24
     3a2:	2b c2       	rjmp	.+1110   	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q2_KEYPAD: /*KeyPad for Q1*/
		gu8_key[0]=KeyPad_getPressedKey();
     3a4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <KeyPad_getPressedKey>
     3a8:	80 93 3d 02 	sts	0x023D, r24
		if(gu8_key[0]!=NULL)
     3ac:	80 91 3d 02 	lds	r24, 0x023D
     3b0:	88 23       	and	r24, r24
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <GameRoll+0x324>
     3b4:	22 c2       	rjmp	.+1092   	; 0x7fa <GameRoll+0x768>
		{
			gu8_Game_Task++;
     3b6:	80 91 23 02 	lds	r24, 0x0223
     3ba:	8f 5f       	subi	r24, 0xFF	; 255
     3bc:	80 93 23 02 	sts	0x0223, r24
     3c0:	1c c2       	rjmp	.+1080   	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q2_CLEAR: /*Clear Q2*/
		LCD_sendCommand(CLEAR_COMMAND);
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_clearq2++;
     3c8:	80 91 35 02 	lds	r24, 0x0235
     3cc:	8f 5f       	subi	r24, 0xFF	; 255
     3ce:	80 93 35 02 	sts	0x0235, r24
		if(gu8_clearq2==8)
     3d2:	80 91 35 02 	lds	r24, 0x0235
     3d6:	88 30       	cpi	r24, 0x08	; 8
     3d8:	09 f0       	breq	.+2      	; 0x3dc <GameRoll+0x34a>
     3da:	0f c2       	rjmp	.+1054   	; 0x7fa <GameRoll+0x768>
		{
			gu8_clearq2=NULL;
     3dc:	10 92 35 02 	sts	0x0235, r1
			gu8_Game_Task++;
     3e0:	80 91 23 02 	lds	r24, 0x0223
     3e4:	8f 5f       	subi	r24, 0xFF	; 255
     3e6:	80 93 23 02 	sts	0x0223, r24
     3ea:	07 c2       	rjmp	.+1038   	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q3_DISPLAY:  /*Display Q2*/
		LCD_displayString("  Wash your hands frequently for 20sec?", &gu8_display_3);
     3ec:	82 ee       	ldi	r24, 0xE2	; 226
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	26 e2       	ldi	r18, 0x26	; 38
     3f2:	32 e0       	ldi	r19, 0x02	; 2
     3f4:	b9 01       	movw	r22, r18
     3f6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
		if(TRUE==gu8_display_3)
     3fa:	80 91 26 02 	lds	r24, 0x0226
     3fe:	81 30       	cpi	r24, 0x01	; 1
     400:	09 f0       	breq	.+2      	; 0x404 <GameRoll+0x372>
     402:	fb c1       	rjmp	.+1014   	; 0x7fa <GameRoll+0x768>
		{
			gu8_display_3=NULL;
     404:	10 92 26 02 	sts	0x0226, r1
			gu8_Game_Task++;
     408:	80 91 23 02 	lds	r24, 0x0223
     40c:	8f 5f       	subi	r24, 0xFF	; 255
     40e:	80 93 23 02 	sts	0x0223, r24
     412:	f3 c1       	rjmp	.+998    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q3_OPTIONS_DISPLAY: /*DISPLAY Answer Option 2*/
		LCD_displayStringRowColumn(1,0,"            1-YES 2-NO 3-SKIP",&gu8_option_3);
     414:	24 ec       	ldi	r18, 0xC4	; 196
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	ee e2       	ldi	r30, 0x2E	; 46
     41a:	f2 e0       	ldi	r31, 0x02	; 2
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	a9 01       	movw	r20, r18
     422:	9f 01       	movw	r18, r30
     424:	0e 94 71 12 	call	0x24e2	; 0x24e2 <LCD_displayStringRowColumn>
		if(TRUE==gu8_option_3)
     428:	80 91 2e 02 	lds	r24, 0x022E
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	09 f0       	breq	.+2      	; 0x432 <GameRoll+0x3a0>
     430:	e4 c1       	rjmp	.+968    	; 0x7fa <GameRoll+0x768>
		{
			gu8_option_3=NULL;
     432:	10 92 2e 02 	sts	0x022E, r1
			gu8_Game_Task++;
     436:	80 91 23 02 	lds	r24, 0x0223
     43a:	8f 5f       	subi	r24, 0xFF	; 255
     43c:	80 93 23 02 	sts	0x0223, r24
     440:	dc c1       	rjmp	.+952    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q3_KEYPAD:
		gu8_key[1]=KeyPad_getPressedKey();
     442:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <KeyPad_getPressedKey>
     446:	80 93 3e 02 	sts	0x023E, r24
		if(gu8_key[1]!=NULL)
     44a:	80 91 3e 02 	lds	r24, 0x023E
     44e:	88 23       	and	r24, r24
     450:	09 f4       	brne	.+2      	; 0x454 <GameRoll+0x3c2>
     452:	d3 c1       	rjmp	.+934    	; 0x7fa <GameRoll+0x768>
		{
			gu8_Game_Task++;
     454:	80 91 23 02 	lds	r24, 0x0223
     458:	8f 5f       	subi	r24, 0xFF	; 255
     45a:	80 93 23 02 	sts	0x0223, r24
     45e:	cd c1       	rjmp	.+922    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q3_CLEAR:
		LCD_sendCommand(CLEAR_COMMAND);
     460:	81 e0       	ldi	r24, 0x01	; 1
     462:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_clearq3++;
     466:	80 91 36 02 	lds	r24, 0x0236
     46a:	8f 5f       	subi	r24, 0xFF	; 255
     46c:	80 93 36 02 	sts	0x0236, r24
		if(gu8_clearq3==8)
     470:	80 91 36 02 	lds	r24, 0x0236
     474:	88 30       	cpi	r24, 0x08	; 8
     476:	09 f0       	breq	.+2      	; 0x47a <GameRoll+0x3e8>
     478:	c0 c1       	rjmp	.+896    	; 0x7fa <GameRoll+0x768>
		{
			gu8_clearq3=NULL;
     47a:	10 92 36 02 	sts	0x0236, r1
			gu8_Game_Task++;
     47e:	80 91 23 02 	lds	r24, 0x0223
     482:	8f 5f       	subi	r24, 0xFF	; 255
     484:	80 93 23 02 	sts	0x0223, r24
     488:	b8 c1       	rjmp	.+880    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q4_DISPLAY:
		LCD_displayString("No need to stay home when you have fever", &gu8_display_4);
     48a:	8a e0       	ldi	r24, 0x0A	; 10
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	27 e2       	ldi	r18, 0x27	; 39
     490:	32 e0       	ldi	r19, 0x02	; 2
     492:	b9 01       	movw	r22, r18
     494:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
		if(TRUE==gu8_display_4)
     498:	80 91 27 02 	lds	r24, 0x0227
     49c:	81 30       	cpi	r24, 0x01	; 1
     49e:	09 f0       	breq	.+2      	; 0x4a2 <GameRoll+0x410>
     4a0:	ac c1       	rjmp	.+856    	; 0x7fa <GameRoll+0x768>
		{
			gu8_display_4=NULL;
     4a2:	10 92 27 02 	sts	0x0227, r1
			gu8_Game_Task++;
     4a6:	80 91 23 02 	lds	r24, 0x0223
     4aa:	8f 5f       	subi	r24, 0xFF	; 255
     4ac:	80 93 23 02 	sts	0x0223, r24
     4b0:	a4 c1       	rjmp	.+840    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q4_OPTIONS_DISPLAY:
		LCD_displayStringRowColumn(1,0,"symptoms? 1-YES 2-NO 3-SKIP",&gu8_option_4);
     4b2:	23 e3       	ldi	r18, 0x33	; 51
     4b4:	31 e0       	ldi	r19, 0x01	; 1
     4b6:	ef e2       	ldi	r30, 0x2F	; 47
     4b8:	f2 e0       	ldi	r31, 0x02	; 2
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	a9 01       	movw	r20, r18
     4c0:	9f 01       	movw	r18, r30
     4c2:	0e 94 71 12 	call	0x24e2	; 0x24e2 <LCD_displayStringRowColumn>
		if(TRUE==gu8_option_4)
     4c6:	80 91 2f 02 	lds	r24, 0x022F
     4ca:	81 30       	cpi	r24, 0x01	; 1
     4cc:	09 f0       	breq	.+2      	; 0x4d0 <GameRoll+0x43e>
     4ce:	95 c1       	rjmp	.+810    	; 0x7fa <GameRoll+0x768>
		{
			gu8_option_4=NULL;
     4d0:	10 92 2f 02 	sts	0x022F, r1
			gu8_Game_Task++;
     4d4:	80 91 23 02 	lds	r24, 0x0223
     4d8:	8f 5f       	subi	r24, 0xFF	; 255
     4da:	80 93 23 02 	sts	0x0223, r24
     4de:	8d c1       	rjmp	.+794    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q4_KEYPAD:
		gu8_key[2]=KeyPad_getPressedKey();
     4e0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <KeyPad_getPressedKey>
     4e4:	80 93 3f 02 	sts	0x023F, r24
		if(gu8_key[2]!=NULL)
     4e8:	80 91 3f 02 	lds	r24, 0x023F
     4ec:	88 23       	and	r24, r24
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <GameRoll+0x460>
     4f0:	84 c1       	rjmp	.+776    	; 0x7fa <GameRoll+0x768>
		{
			gu8_Game_Task++;
     4f2:	80 91 23 02 	lds	r24, 0x0223
     4f6:	8f 5f       	subi	r24, 0xFF	; 255
     4f8:	80 93 23 02 	sts	0x0223, r24
     4fc:	7e c1       	rjmp	.+764    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q4_CLEAR:
		LCD_sendCommand(CLEAR_COMMAND);
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_clearq4++;
     504:	80 91 37 02 	lds	r24, 0x0237
     508:	8f 5f       	subi	r24, 0xFF	; 255
     50a:	80 93 37 02 	sts	0x0237, r24
		if(gu8_clearq4==8)
     50e:	80 91 37 02 	lds	r24, 0x0237
     512:	88 30       	cpi	r24, 0x08	; 8
     514:	09 f0       	breq	.+2      	; 0x518 <GameRoll+0x486>
     516:	71 c1       	rjmp	.+738    	; 0x7fa <GameRoll+0x768>
		{
			gu8_clearq4=NULL;
     518:	10 92 37 02 	sts	0x0237, r1
			gu8_Game_Task++;
     51c:	80 91 23 02 	lds	r24, 0x0223
     520:	8f 5f       	subi	r24, 0xFF	; 255
     522:	80 93 23 02 	sts	0x0223, r24
     526:	69 c1       	rjmp	.+722    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q5_DISPLAY:
		LCD_displayString("Don't touch nose, eyes or mouth with", &gu8_display_5);
     528:	8f e4       	ldi	r24, 0x4F	; 79
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	28 e2       	ldi	r18, 0x28	; 40
     52e:	32 e0       	ldi	r19, 0x02	; 2
     530:	b9 01       	movw	r22, r18
     532:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
		if(TRUE==gu8_display_5)
     536:	80 91 28 02 	lds	r24, 0x0228
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	09 f0       	breq	.+2      	; 0x540 <GameRoll+0x4ae>
     53e:	5d c1       	rjmp	.+698    	; 0x7fa <GameRoll+0x768>
		{
			gu8_display_5=NULL;
     540:	10 92 28 02 	sts	0x0228, r1
			gu8_Game_Task++;
     544:	80 91 23 02 	lds	r24, 0x0223
     548:	8f 5f       	subi	r24, 0xFF	; 255
     54a:	80 93 23 02 	sts	0x0223, r24
     54e:	55 c1       	rjmp	.+682    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q5_OPTIONS_DISPLAY:
		LCD_displayStringRowColumn(1,0,"your hands? 1-YES 2-NO 3-SKIP",&gu8_option_5);
     550:	24 e7       	ldi	r18, 0x74	; 116
     552:	31 e0       	ldi	r19, 0x01	; 1
     554:	e0 e3       	ldi	r30, 0x30	; 48
     556:	f2 e0       	ldi	r31, 0x02	; 2
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	a9 01       	movw	r20, r18
     55e:	9f 01       	movw	r18, r30
     560:	0e 94 71 12 	call	0x24e2	; 0x24e2 <LCD_displayStringRowColumn>
		if(TRUE==gu8_option_5)
     564:	80 91 30 02 	lds	r24, 0x0230
     568:	81 30       	cpi	r24, 0x01	; 1
     56a:	09 f0       	breq	.+2      	; 0x56e <GameRoll+0x4dc>
     56c:	46 c1       	rjmp	.+652    	; 0x7fa <GameRoll+0x768>
		{
			gu8_option_5=NULL;
     56e:	10 92 30 02 	sts	0x0230, r1
			gu8_Game_Task++;
     572:	80 91 23 02 	lds	r24, 0x0223
     576:	8f 5f       	subi	r24, 0xFF	; 255
     578:	80 93 23 02 	sts	0x0223, r24
     57c:	3e c1       	rjmp	.+636    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q5_KEYPAD:
		gu8_key[3]=KeyPad_getPressedKey();
     57e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <KeyPad_getPressedKey>
     582:	80 93 40 02 	sts	0x0240, r24
		if(gu8_key[3]!=NULL)
     586:	80 91 40 02 	lds	r24, 0x0240
     58a:	88 23       	and	r24, r24
     58c:	09 f4       	brne	.+2      	; 0x590 <GameRoll+0x4fe>
     58e:	35 c1       	rjmp	.+618    	; 0x7fa <GameRoll+0x768>
		{
			gu8_Game_Task++;
     590:	80 91 23 02 	lds	r24, 0x0223
     594:	8f 5f       	subi	r24, 0xFF	; 255
     596:	80 93 23 02 	sts	0x0223, r24
     59a:	2f c1       	rjmp	.+606    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q5_CLEAR:
		LCD_sendCommand(CLEAR_COMMAND);
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_clearq5++;
     5a2:	80 91 38 02 	lds	r24, 0x0238
     5a6:	8f 5f       	subi	r24, 0xFF	; 255
     5a8:	80 93 38 02 	sts	0x0238, r24
		if(gu8_clearq5==8)
     5ac:	80 91 38 02 	lds	r24, 0x0238
     5b0:	88 30       	cpi	r24, 0x08	; 8
     5b2:	09 f0       	breq	.+2      	; 0x5b6 <GameRoll+0x524>
     5b4:	22 c1       	rjmp	.+580    	; 0x7fa <GameRoll+0x768>
		{
			gu8_clearq5=NULL;
     5b6:	10 92 38 02 	sts	0x0238, r1
			gu8_Game_Task++;
     5ba:	80 91 23 02 	lds	r24, 0x0223
     5be:	8f 5f       	subi	r24, 0xFF	; 255
     5c0:	80 93 23 02 	sts	0x0223, r24
     5c4:	1a c1       	rjmp	.+564    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q6_DISPLAY:
		LCD_displayString("Avoid close contact with people who have", &gu8_display_6);
     5c6:	82 e9       	ldi	r24, 0x92	; 146
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	29 e2       	ldi	r18, 0x29	; 41
     5cc:	32 e0       	ldi	r19, 0x02	; 2
     5ce:	b9 01       	movw	r22, r18
     5d0:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
		if(TRUE==gu8_display_6)
     5d4:	80 91 29 02 	lds	r24, 0x0229
     5d8:	81 30       	cpi	r24, 0x01	; 1
     5da:	09 f0       	breq	.+2      	; 0x5de <GameRoll+0x54c>
     5dc:	0e c1       	rjmp	.+540    	; 0x7fa <GameRoll+0x768>
		{
			gu8_display_6=NULL;
     5de:	10 92 29 02 	sts	0x0229, r1
			gu8_Game_Task++;
     5e2:	80 91 23 02 	lds	r24, 0x0223
     5e6:	8f 5f       	subi	r24, 0xFF	; 255
     5e8:	80 93 23 02 	sts	0x0223, r24
     5ec:	06 c1       	rjmp	.+524    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q6_OPTIONS_DISPLAY:
		LCD_displayStringRowColumn(1,0,"symptoms? 1-YES 2-NO 3-SKIP",&gu8_option_6);
     5ee:	23 e3       	ldi	r18, 0x33	; 51
     5f0:	31 e0       	ldi	r19, 0x01	; 1
     5f2:	e1 e3       	ldi	r30, 0x31	; 49
     5f4:	f2 e0       	ldi	r31, 0x02	; 2
     5f6:	81 e0       	ldi	r24, 0x01	; 1
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	a9 01       	movw	r20, r18
     5fc:	9f 01       	movw	r18, r30
     5fe:	0e 94 71 12 	call	0x24e2	; 0x24e2 <LCD_displayStringRowColumn>
		if(TRUE==gu8_option_6)
     602:	80 91 31 02 	lds	r24, 0x0231
     606:	81 30       	cpi	r24, 0x01	; 1
     608:	09 f0       	breq	.+2      	; 0x60c <GameRoll+0x57a>
     60a:	f7 c0       	rjmp	.+494    	; 0x7fa <GameRoll+0x768>
		{
			gu8_option_6=NULL;
     60c:	10 92 31 02 	sts	0x0231, r1
			gu8_Game_Task++;
     610:	80 91 23 02 	lds	r24, 0x0223
     614:	8f 5f       	subi	r24, 0xFF	; 255
     616:	80 93 23 02 	sts	0x0223, r24
     61a:	ef c0       	rjmp	.+478    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q6_KEYPAD:
		gu8_key[4]=KeyPad_getPressedKey();
     61c:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <KeyPad_getPressedKey>
     620:	80 93 41 02 	sts	0x0241, r24
		if(gu8_key[4]!=NULL)
     624:	80 91 41 02 	lds	r24, 0x0241
     628:	88 23       	and	r24, r24
     62a:	09 f4       	brne	.+2      	; 0x62e <GameRoll+0x59c>
     62c:	e6 c0       	rjmp	.+460    	; 0x7fa <GameRoll+0x768>
		{
			gu8_Game_Task++;
     62e:	80 91 23 02 	lds	r24, 0x0223
     632:	8f 5f       	subi	r24, 0xFF	; 255
     634:	80 93 23 02 	sts	0x0223, r24
     638:	e0 c0       	rjmp	.+448    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Q6_CLEAR:
		LCD_sendCommand(CLEAR_COMMAND);
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_clearq6++;
     640:	80 91 39 02 	lds	r24, 0x0239
     644:	8f 5f       	subi	r24, 0xFF	; 255
     646:	80 93 39 02 	sts	0x0239, r24
		if(gu8_clearq6==8)
     64a:	80 91 39 02 	lds	r24, 0x0239
     64e:	88 30       	cpi	r24, 0x08	; 8
     650:	09 f0       	breq	.+2      	; 0x654 <GameRoll+0x5c2>
     652:	d3 c0       	rjmp	.+422    	; 0x7fa <GameRoll+0x768>
		{
			gu8_clearq6=NULL;
     654:	10 92 39 02 	sts	0x0239, r1
			gu8_Game_Task++;
     658:	80 91 23 02 	lds	r24, 0x0223
     65c:	8f 5f       	subi	r24, 0xFF	; 255
     65e:	80 93 23 02 	sts	0x0223, r24
     662:	cb c0       	rjmp	.+406    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Result_DISPLAY:
		for(u8_roll=0; u8_roll<NumberOFQUESTIONS; u8_roll++)
     664:	1e 82       	std	Y+6, r1	; 0x06
     666:	18 c0       	rjmp	.+48     	; 0x698 <GameRoll+0x606>
		{
			if(gu8_key[u8_roll]==gu8_key_2[u8_roll])
     668:	8e 81       	ldd	r24, Y+6	; 0x06
     66a:	88 2f       	mov	r24, r24
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	fc 01       	movw	r30, r24
     670:	e3 5c       	subi	r30, 0xC3	; 195
     672:	fd 4f       	sbci	r31, 0xFD	; 253
     674:	20 81       	ld	r18, Z
     676:	8e 81       	ldd	r24, Y+6	; 0x06
     678:	88 2f       	mov	r24, r24
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	fc 01       	movw	r30, r24
     67e:	e3 5e       	subi	r30, 0xE3	; 227
     680:	fd 4f       	sbci	r31, 0xFD	; 253
     682:	80 81       	ld	r24, Z
     684:	28 17       	cp	r18, r24
     686:	29 f4       	brne	.+10     	; 0x692 <GameRoll+0x600>
			{
				gu8_score+=1;
     688:	80 91 22 02 	lds	r24, 0x0222
     68c:	8f 5f       	subi	r24, 0xFF	; 255
     68e:	80 93 22 02 	sts	0x0222, r24
			gu8_clearq6=NULL;
			gu8_Game_Task++;
		}
		break;
	case Result_DISPLAY:
		for(u8_roll=0; u8_roll<NumberOFQUESTIONS; u8_roll++)
     692:	8e 81       	ldd	r24, Y+6	; 0x06
     694:	8f 5f       	subi	r24, 0xFF	; 255
     696:	8e 83       	std	Y+6, r24	; 0x06
     698:	8e 81       	ldd	r24, Y+6	; 0x06
     69a:	85 30       	cpi	r24, 0x05	; 5
     69c:	28 f3       	brcs	.-54     	; 0x668 <GameRoll+0x5d6>
			if(gu8_key[u8_roll]==gu8_key_2[u8_roll])
			{
				gu8_score+=1;
			}
		}
		gu8_Game_Task++;
     69e:	80 91 23 02 	lds	r24, 0x0223
     6a2:	8f 5f       	subi	r24, 0xFF	; 255
     6a4:	80 93 23 02 	sts	0x0223, r24
     6a8:	a8 c0       	rjmp	.+336    	; 0x7fa <GameRoll+0x768>
		break;
	case Score_DISPLAY_1:
		LCD_displayString("              CONGRATULATIONS!", &gu8_display_7);
     6aa:	8b eb       	ldi	r24, 0xBB	; 187
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	2a e2       	ldi	r18, 0x2A	; 42
     6b0:	32 e0       	ldi	r19, 0x02	; 2
     6b2:	b9 01       	movw	r22, r18
     6b4:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
		if(TRUE==gu8_display_7)
     6b8:	80 91 2a 02 	lds	r24, 0x022A
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	09 f0       	breq	.+2      	; 0x6c2 <GameRoll+0x630>
     6c0:	9c c0       	rjmp	.+312    	; 0x7fa <GameRoll+0x768>
		{
			gu8_display_7=NULL;
     6c2:	10 92 2a 02 	sts	0x022A, r1
			gu8_Game_Task++;
     6c6:	80 91 23 02 	lds	r24, 0x0223
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	80 93 23 02 	sts	0x0223, r24
     6d0:	94 c0       	rjmp	.+296    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Score_DISPLAY_2:
		LCD_displayStringRowColumn(1,0,"            YOUR SCORE IS ",&gu8_option_7);
     6d2:	2a ed       	ldi	r18, 0xDA	; 218
     6d4:	31 e0       	ldi	r19, 0x01	; 1
     6d6:	e2 e3       	ldi	r30, 0x32	; 50
     6d8:	f2 e0       	ldi	r31, 0x02	; 2
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	a9 01       	movw	r20, r18
     6e0:	9f 01       	movw	r18, r30
     6e2:	0e 94 71 12 	call	0x24e2	; 0x24e2 <LCD_displayStringRowColumn>
		if(TRUE==gu8_option_7)
     6e6:	80 91 32 02 	lds	r24, 0x0232
     6ea:	81 30       	cpi	r24, 0x01	; 1
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <GameRoll+0x65e>
     6ee:	85 c0       	rjmp	.+266    	; 0x7fa <GameRoll+0x768>
		{
			gu8_option_7=NULL;
     6f0:	10 92 32 02 	sts	0x0232, r1
			gu8_Game_Task++;
     6f4:	80 91 23 02 	lds	r24, 0x0223
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 23 02 	sts	0x0223, r24
     6fe:	7d c0       	rjmp	.+250    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Score_DISPLAY_3:
		LCD_intgerToString(gu8_score,&gu8_display_8);
     700:	80 91 22 02 	lds	r24, 0x0222
     704:	2b e2       	ldi	r18, 0x2B	; 43
     706:	32 e0       	ldi	r19, 0x02	; 2
     708:	b9 01       	movw	r22, r18
     70a:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_intgerToString>
		if(TRUE==gu8_display_8)
     70e:	80 91 2b 02 	lds	r24, 0x022B
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	09 f0       	breq	.+2      	; 0x718 <GameRoll+0x686>
     716:	71 c0       	rjmp	.+226    	; 0x7fa <GameRoll+0x768>
		{
			for(int j=0; j<10000; j++)
     718:	1a 82       	std	Y+2, r1	; 0x02
     71a:	19 82       	std	Y+1, r1	; 0x01
     71c:	12 c0       	rjmp	.+36     	; 0x742 <GameRoll+0x6b0>
			{
				if(j==9999)
     71e:	89 81       	ldd	r24, Y+1	; 0x01
     720:	9a 81       	ldd	r25, Y+2	; 0x02
     722:	27 e2       	ldi	r18, 0x27	; 39
     724:	8f 30       	cpi	r24, 0x0F	; 15
     726:	92 07       	cpc	r25, r18
     728:	39 f4       	brne	.+14     	; 0x738 <GameRoll+0x6a6>
				{
					gu8_Game_Task++;
     72a:	80 91 23 02 	lds	r24, 0x0223
     72e:	8f 5f       	subi	r24, 0xFF	; 255
     730:	80 93 23 02 	sts	0x0223, r24
					gu8_display_8=NULL;
     734:	10 92 2b 02 	sts	0x022B, r1
		break;
	case Score_DISPLAY_3:
		LCD_intgerToString(gu8_score,&gu8_display_8);
		if(TRUE==gu8_display_8)
		{
			for(int j=0; j<10000; j++)
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	9a 81       	ldd	r25, Y+2	; 0x02
     73c:	01 96       	adiw	r24, 0x01	; 1
     73e:	9a 83       	std	Y+2, r25	; 0x02
     740:	89 83       	std	Y+1, r24	; 0x01
     742:	89 81       	ldd	r24, Y+1	; 0x01
     744:	9a 81       	ldd	r25, Y+2	; 0x02
     746:	37 e2       	ldi	r19, 0x27	; 39
     748:	80 31       	cpi	r24, 0x10	; 16
     74a:	93 07       	cpc	r25, r19
     74c:	44 f3       	brlt	.-48     	; 0x71e <GameRoll+0x68c>
     74e:	55 c0       	rjmp	.+170    	; 0x7fa <GameRoll+0x768>
				}
			}
		}
		break;
	case Clear:
		LCD_sendCommand(CLEAR_COMMAND);
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_clearq7++;
     756:	80 91 3a 02 	lds	r24, 0x023A
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	80 93 3a 02 	sts	0x023A, r24
		if(gu8_clearq7==8)
     760:	80 91 3a 02 	lds	r24, 0x023A
     764:	88 30       	cpi	r24, 0x08	; 8
     766:	09 f0       	breq	.+2      	; 0x76a <GameRoll+0x6d8>
     768:	48 c0       	rjmp	.+144    	; 0x7fa <GameRoll+0x768>
		{
			gu8_Game_Task++;
     76a:	80 91 23 02 	lds	r24, 0x0223
     76e:	8f 5f       	subi	r24, 0xFF	; 255
     770:	80 93 23 02 	sts	0x0223, r24
			gu8_clearq7=NULL;
     774:	10 92 3a 02 	sts	0x023A, r1
     778:	40 c0       	rjmp	.+128    	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Continue:
		LCD_displayString("To Play Again Press:1, To Exit Press:2", &gu8_option_8);
     77a:	85 ef       	ldi	r24, 0xF5	; 245
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	23 e3       	ldi	r18, 0x33	; 51
     780:	32 e0       	ldi	r19, 0x02	; 2
     782:	b9 01       	movw	r22, r18
     784:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
		if(TRUE==gu8_option_8)
     788:	80 91 33 02 	lds	r24, 0x0233
     78c:	81 30       	cpi	r24, 0x01	; 1
     78e:	a9 f5       	brne	.+106    	; 0x7fa <GameRoll+0x768>
		{
			gu8_Game_Task++;
     790:	80 91 23 02 	lds	r24, 0x0223
     794:	8f 5f       	subi	r24, 0xFF	; 255
     796:	80 93 23 02 	sts	0x0223, r24
			gu8_option_8=NULL;
     79a:	10 92 33 02 	sts	0x0233, r1
     79e:	2d c0       	rjmp	.+90     	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Option_KEYPAD:
		gu8_final=KeyPad_getPressedKey();
     7a0:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <KeyPad_getPressedKey>
     7a4:	80 93 3c 02 	sts	0x023C, r24
		if(gu8_final==TRUE)
     7a8:	80 91 3c 02 	lds	r24, 0x023C
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <GameRoll+0x726>
		{
			gu8_Game_Task=4;
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	80 93 23 02 	sts	0x0223, r24
     7b6:	21 c0       	rjmp	.+66     	; 0x7fa <GameRoll+0x768>
		}
		else if(gu8_final==2)
     7b8:	80 91 3c 02 	lds	r24, 0x023C
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	31 f4       	brne	.+12     	; 0x7cc <GameRoll+0x73a>
		{
			gu8_Game_Task++;
     7c0:	80 91 23 02 	lds	r24, 0x0223
     7c4:	8f 5f       	subi	r24, 0xFF	; 255
     7c6:	80 93 23 02 	sts	0x0223, r24
     7ca:	17 c0       	rjmp	.+46     	; 0x7fa <GameRoll+0x768>
		}
		else
		{
			gu8_Game_Task=Option_KEYPAD;
     7cc:	8f e1       	ldi	r24, 0x1F	; 31
     7ce:	80 93 23 02 	sts	0x0223, r24
     7d2:	13 c0       	rjmp	.+38     	; 0x7fa <GameRoll+0x768>
		}
		break;
	case Exit:
		LCD_sendCommand(CLEAR_COMMAND);
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_clearq8++;
     7da:	80 91 3b 02 	lds	r24, 0x023B
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	80 93 3b 02 	sts	0x023B, r24
		if(gu8_clearq8==8)
     7e4:	80 91 3b 02 	lds	r24, 0x023B
     7e8:	88 30       	cpi	r24, 0x08	; 8
     7ea:	39 f4       	brne	.+14     	; 0x7fa <GameRoll+0x768>
		{
			gu8_Game_Task++;
     7ec:	80 91 23 02 	lds	r24, 0x0223
     7f0:	8f 5f       	subi	r24, 0xFF	; 255
     7f2:	80 93 23 02 	sts	0x0223, r24
			gu8_clearq8=NULL;
     7f6:	10 92 3b 02 	sts	0x023B, r1
		}
		break;
	default :
		break;
	}
}
     7fa:	28 96       	adiw	r28, 0x08	; 8
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61
     806:	cf 91       	pop	r28
     808:	df 91       	pop	r29
     80a:	08 95       	ret

0000080c <main>:
 */
#include "Game.h"


int main (void)
{
     80c:	0f 93       	push	r16
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	cd b7       	in	r28, 0x3d	; 61
     814:	de b7       	in	r29, 0x3e	; 62
	SOS_Init(5);
     816:	85 e0       	ldi	r24, 0x05	; 5
     818:	0e 94 1b 04 	call	0x836	; 0x836 <SOS_Init>
	SOS_Create(1,TASK_FUNCTIONALITY_PERIODIC,&GameRoll,0);
     81c:	29 e4       	ldi	r18, 0x49	; 73
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	61 e0       	ldi	r22, 0x01	; 1
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	41 e0       	ldi	r20, 0x01	; 1
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	0e 94 4a 04 	call	0x894	; 0x894 <SOS_Create>
	while(1)
	{
		SOS_Schedular();
     830:	0e 94 95 06 	call	0xd2a	; 0xd2a <SOS_Schedular>
     834:	fd cf       	rjmp	.-6      	; 0x830 <main+0x24>

00000836 <SOS_Init>:
static uint32_t gu8_ISR_Flag=NULL;

/*************************FUNCTIONS_IMPLEMENTATION***********************************/

ERROR_SOS_TYPE SOS_Init(uint8_t au8_SystemResolution)
{
     836:	df 93       	push	r29
     838:	cf 93       	push	r28
     83a:	00 d0       	rcall	.+0      	; 0x83c <SOS_Init+0x6>
     83c:	cd b7       	in	r28, 0x3d	; 61
     83e:	de b7       	in	r29, 0x3e	; 62
     840:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_error;
	if(au8_SystemResolution>=SOS_RESOLUTION)
     842:	8a 81       	ldd	r24, Y+2	; 0x02
     844:	88 23       	and	r24, r24
     846:	f1 f0       	breq	.+60     	; 0x884 <__stack+0x25>
	{
		if(au8_SystemResolution!=NULL)
     848:	8a 81       	ldd	r24, Y+2	; 0x02
     84a:	88 23       	and	r24, r24
     84c:	c1 f0       	breq	.+48     	; 0x87e <__stack+0x1f>
		{
			/*initializing timer channel*/
			gstr_Confg_Timer.Timer_Channel=TIMER0;
     84e:	10 92 4a 02 	sts	0x024A, r1
			gstr_Confg_Timer.Timer_Psc= F_CPU_CLOCK_1024_TIMER_0;
     852:	85 e0       	ldi	r24, 0x05	; 5
     854:	80 93 4b 02 	sts	0x024B, r24
			gstr_Confg_Timer.Interrupt_Mode=INTERRUPT;
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	80 93 4d 02 	sts	0x024D, r24
			gstr_Confg_Timer.Timer_Mode= TIMER_MODE;
     85e:	10 92 4c 02 	sts	0x024C, r1
			gu8_SOS_resolution= au8_SystemResolution;
     862:	8a 81       	ldd	r24, Y+2	; 0x02
     864:	80 93 42 02 	sts	0x0242, r24
			Timer_Init(&gstr_Confg_Timer); /*calling function timer_init to initialize the timer*/
     868:	8a e4       	ldi	r24, 0x4A	; 74
     86a:	92 e0       	ldi	r25, 0x02	; 2
     86c:	0e 94 43 08 	call	0x1086	; 0x1086 <Timer_Init>
			au8_error=SOS_INIT_IS_INITIALIZED;
     870:	19 82       	std	Y+1, r1	; 0x01
			gu8_Init_Flag++;
     872:	80 91 43 02 	lds	r24, 0x0243
     876:	8f 5f       	subi	r24, 0xFF	; 255
     878:	80 93 43 02 	sts	0x0243, r24
     87c:	05 c0       	rjmp	.+10     	; 0x888 <__stack+0x29>
		}
		else
		{
			au8_error=SOS_INIT_RESOLUTION_NOT_DEFINED;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	89 83       	std	Y+1, r24	; 0x01
     882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
		}
	}
	else
	{
		au8_error=SOS_INIT_RESOLUTION_NOT_DEFINED;
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	89 83       	std	Y+1, r24	; 0x01
	}
	return au8_error;
     888:	89 81       	ldd	r24, Y+1	; 0x01
}
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	cf 91       	pop	r28
     890:	df 91       	pop	r29
     892:	08 95       	ret

00000894 <SOS_Create>:

ERROR_SOS_TYPE SOS_Create(uint32_t au8_SOS_Periodicity, uint8_t au8_SOS_Functionality,Ptr_Func CallBack, uint8_t au8_periority)
{
     894:	0f 93       	push	r16
     896:	df 93       	push	r29
     898:	cf 93       	push	r28
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	2a 97       	sbiw	r28, 0x0a	; 10
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	6b 83       	std	Y+3, r22	; 0x03
     8ac:	7c 83       	std	Y+4, r23	; 0x04
     8ae:	8d 83       	std	Y+5, r24	; 0x05
     8b0:	9e 83       	std	Y+6, r25	; 0x06
     8b2:	4f 83       	std	Y+7, r20	; 0x07
     8b4:	39 87       	std	Y+9, r19	; 0x09
     8b6:	28 87       	std	Y+8, r18	; 0x08
     8b8:	0a 87       	std	Y+10, r16	; 0x0a
	uint8_t au8_error=NULL;
     8ba:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t au8_timer_counts=NULL;
     8bc:	19 82       	std	Y+1, r1	; 0x01
	if(gu8_Init_Flag==TRUE)
     8be:	80 91 43 02 	lds	r24, 0x0243
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	09 f0       	breq	.+2      	; 0x8c8 <SOS_Create+0x34>
     8c6:	41 c1       	rjmp	.+642    	; 0xb4a <SOS_Create+0x2b6>
	{
		if(gu8_TMU_BUFFER_NUMBER<TASKS_MAX_NUMBER)
     8c8:	80 91 44 02 	lds	r24, 0x0244
     8cc:	8f 30       	cpi	r24, 0x0F	; 15
     8ce:	08 f0       	brcs	.+2      	; 0x8d2 <SOS_Create+0x3e>
     8d0:	3a c1       	rjmp	.+628    	; 0xb46 <SOS_Create+0x2b2>
		{
			if(gastr_SOSBuffer[au8_periority].au8_Task_Status==Buffer_Task_NOTReady)
     8d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     8d4:	28 2f       	mov	r18, r24
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	c9 01       	movw	r24, r18
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	82 0f       	add	r24, r18
     8e0:	93 1f       	adc	r25, r19
     8e2:	88 0f       	add	r24, r24
     8e4:	99 1f       	adc	r25, r25
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	82 0f       	add	r24, r18
     8ec:	93 1f       	adc	r25, r19
     8ee:	fc 01       	movw	r30, r24
     8f0:	e7 5a       	subi	r30, 0xA7	; 167
     8f2:	fd 4f       	sbci	r31, 0xFD	; 253
     8f4:	80 81       	ld	r24, Z
     8f6:	88 23       	and	r24, r24
     8f8:	09 f0       	breq	.+2      	; 0x8fc <SOS_Create+0x68>
     8fa:	22 c1       	rjmp	.+580    	; 0xb40 <SOS_Create+0x2ac>
			{
				if(au8_SOS_Functionality==TASK_FUNCTIONALITY_ONESHOT)
     8fc:	8f 81       	ldd	r24, Y+7	; 0x07
     8fe:	82 30       	cpi	r24, 0x02	; 2
     900:	09 f0       	breq	.+2      	; 0x904 <SOS_Create+0x70>
     902:	98 c0       	rjmp	.+304    	; 0xa34 <SOS_Create+0x1a0>
				{
					gastr_SOSBuffer[au8_periority].au8_Buffer_ID=au8_periority;
     904:	8a 85       	ldd	r24, Y+10	; 0x0a
     906:	28 2f       	mov	r18, r24
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	c9 01       	movw	r24, r18
     90c:	88 0f       	add	r24, r24
     90e:	99 1f       	adc	r25, r25
     910:	82 0f       	add	r24, r18
     912:	93 1f       	adc	r25, r19
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	82 0f       	add	r24, r18
     91e:	93 1f       	adc	r25, r19
     920:	fc 01       	movw	r30, r24
     922:	e8 5a       	subi	r30, 0xA8	; 168
     924:	fd 4f       	sbci	r31, 0xFD	; 253
     926:	8a 85       	ldd	r24, Y+10	; 0x0a
     928:	80 83       	st	Z, r24
					gastr_SOSBuffer[au8_periority].au32_PtrToFunc=CallBack;
     92a:	8a 85       	ldd	r24, Y+10	; 0x0a
     92c:	28 2f       	mov	r18, r24
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	c9 01       	movw	r24, r18
     932:	88 0f       	add	r24, r24
     934:	99 1f       	adc	r25, r25
     936:	82 0f       	add	r24, r18
     938:	93 1f       	adc	r25, r19
     93a:	88 0f       	add	r24, r24
     93c:	99 1f       	adc	r25, r25
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	82 0f       	add	r24, r18
     944:	93 1f       	adc	r25, r19
     946:	fc 01       	movw	r30, r24
     948:	e2 5b       	subi	r30, 0xB2	; 178
     94a:	fd 4f       	sbci	r31, 0xFD	; 253
     94c:	88 85       	ldd	r24, Y+8	; 0x08
     94e:	99 85       	ldd	r25, Y+9	; 0x09
     950:	91 83       	std	Z+1, r25	; 0x01
     952:	80 83       	st	Z, r24
					gastr_SOSBuffer[au8_periority].au8_Functionality=TASK_FUNCTIONALITY_ONESHOT;
     954:	8a 85       	ldd	r24, Y+10	; 0x0a
     956:	28 2f       	mov	r18, r24
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	c9 01       	movw	r24, r18
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	82 0f       	add	r24, r18
     962:	93 1f       	adc	r25, r19
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	82 0f       	add	r24, r18
     96e:	93 1f       	adc	r25, r19
     970:	fc 01       	movw	r30, r24
     972:	e6 5a       	subi	r30, 0xA6	; 166
     974:	fd 4f       	sbci	r31, 0xFD	; 253
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	80 83       	st	Z, r24
					gastr_SOSBuffer[au8_periority].au8_Task_Status=Buffer_Task_Ready;
     97a:	8a 85       	ldd	r24, Y+10	; 0x0a
     97c:	28 2f       	mov	r18, r24
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	c9 01       	movw	r24, r18
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	82 0f       	add	r24, r18
     988:	93 1f       	adc	r25, r19
     98a:	88 0f       	add	r24, r24
     98c:	99 1f       	adc	r25, r25
     98e:	88 0f       	add	r24, r24
     990:	99 1f       	adc	r25, r25
     992:	82 0f       	add	r24, r18
     994:	93 1f       	adc	r25, r19
     996:	fc 01       	movw	r30, r24
     998:	e7 5a       	subi	r30, 0xA7	; 167
     99a:	fd 4f       	sbci	r31, 0xFD	; 253
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 83       	st	Z, r24
					gastr_SOSBuffer[au8_periority].au32_Periodicity=au8_SOS_Periodicity;
     9a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     9a2:	28 2f       	mov	r18, r24
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	c9 01       	movw	r24, r18
     9a8:	88 0f       	add	r24, r24
     9aa:	99 1f       	adc	r25, r25
     9ac:	82 0f       	add	r24, r18
     9ae:	93 1f       	adc	r25, r19
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	82 0f       	add	r24, r18
     9ba:	93 1f       	adc	r25, r19
     9bc:	fc 01       	movw	r30, r24
     9be:	e0 5b       	subi	r30, 0xB0	; 176
     9c0:	fd 4f       	sbci	r31, 0xFD	; 253
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	9c 81       	ldd	r25, Y+4	; 0x04
     9c6:	ad 81       	ldd	r26, Y+5	; 0x05
     9c8:	be 81       	ldd	r27, Y+6	; 0x06
     9ca:	80 83       	st	Z, r24
     9cc:	91 83       	std	Z+1, r25	; 0x01
     9ce:	a2 83       	std	Z+2, r26	; 0x02
     9d0:	b3 83       	std	Z+3, r27	; 0x03
					gastr_SOSBuffer[au8_periority].au32_Periodicity_New=au8_SOS_Periodicity;
     9d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     9d4:	28 2f       	mov	r18, r24
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	c9 01       	movw	r24, r18
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	82 0f       	add	r24, r18
     9e0:	93 1f       	adc	r25, r19
     9e2:	88 0f       	add	r24, r24
     9e4:	99 1f       	adc	r25, r25
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	fc 01       	movw	r30, r24
     9f0:	ec 5a       	subi	r30, 0xAC	; 172
     9f2:	fd 4f       	sbci	r31, 0xFD	; 253
     9f4:	8b 81       	ldd	r24, Y+3	; 0x03
     9f6:	9c 81       	ldd	r25, Y+4	; 0x04
     9f8:	ad 81       	ldd	r26, Y+5	; 0x05
     9fa:	be 81       	ldd	r27, Y+6	; 0x06
     9fc:	80 83       	st	Z, r24
     9fe:	91 83       	std	Z+1, r25	; 0x01
     a00:	a2 83       	std	Z+2, r26	; 0x02
     a02:	b3 83       	std	Z+3, r27	; 0x03
					if(gu8_TMU_BUFFER_NUMBER==NULL)
     a04:	80 91 44 02 	lds	r24, 0x0244
     a08:	88 23       	and	r24, r24
     a0a:	69 f4       	brne	.+26     	; 0xa26 <SOS_Create+0x192>
					{
						au8_timer_counts=gu8_SOS_resolution;
     a0c:	80 91 42 02 	lds	r24, 0x0242
     a10:	89 83       	std	Y+1, r24	; 0x01
						Timer_Start(TIMER0,au8_timer_counts);
     a12:	89 81       	ldd	r24, Y+1	; 0x01
     a14:	28 2f       	mov	r18, r24
     a16:	30 e0       	ldi	r19, 0x00	; 0
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	80 e0       	ldi	r24, 0x00	; 0
     a1e:	ba 01       	movw	r22, r20
     a20:	a9 01       	movw	r20, r18
     a22:	0e 94 1d 09 	call	0x123a	; 0x123a <Timer_Start>
					}
					gu8_TMU_BUFFER_NUMBER++;
     a26:	80 91 44 02 	lds	r24, 0x0244
     a2a:	8f 5f       	subi	r24, 0xFF	; 255
     a2c:	80 93 44 02 	sts	0x0244, r24
					au8_error=SOS_CREATE_OK;
     a30:	1a 82       	std	Y+2, r1	; 0x02
     a32:	8b c0       	rjmp	.+278    	; 0xb4a <SOS_Create+0x2b6>
				}
				else if(au8_SOS_Functionality==TASK_FUNCTIONALITY_PERIODIC)
     a34:	8f 81       	ldd	r24, Y+7	; 0x07
     a36:	81 30       	cpi	r24, 0x01	; 1
     a38:	09 f0       	breq	.+2      	; 0xa3c <SOS_Create+0x1a8>
     a3a:	7f c0       	rjmp	.+254    	; 0xb3a <SOS_Create+0x2a6>
				{
					gastr_SOSBuffer[au8_periority].au8_Buffer_ID=au8_periority;
     a3c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a3e:	28 2f       	mov	r18, r24
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	c9 01       	movw	r24, r18
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	82 0f       	add	r24, r18
     a4a:	93 1f       	adc	r25, r19
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	82 0f       	add	r24, r18
     a56:	93 1f       	adc	r25, r19
     a58:	fc 01       	movw	r30, r24
     a5a:	e8 5a       	subi	r30, 0xA8	; 168
     a5c:	fd 4f       	sbci	r31, 0xFD	; 253
     a5e:	8a 85       	ldd	r24, Y+10	; 0x0a
     a60:	80 83       	st	Z, r24
					gastr_SOSBuffer[au8_periority].au32_PtrToFunc=CallBack;
     a62:	8a 85       	ldd	r24, Y+10	; 0x0a
     a64:	28 2f       	mov	r18, r24
     a66:	30 e0       	ldi	r19, 0x00	; 0
     a68:	c9 01       	movw	r24, r18
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	82 0f       	add	r24, r18
     a70:	93 1f       	adc	r25, r19
     a72:	88 0f       	add	r24, r24
     a74:	99 1f       	adc	r25, r25
     a76:	88 0f       	add	r24, r24
     a78:	99 1f       	adc	r25, r25
     a7a:	82 0f       	add	r24, r18
     a7c:	93 1f       	adc	r25, r19
     a7e:	fc 01       	movw	r30, r24
     a80:	e2 5b       	subi	r30, 0xB2	; 178
     a82:	fd 4f       	sbci	r31, 0xFD	; 253
     a84:	88 85       	ldd	r24, Y+8	; 0x08
     a86:	99 85       	ldd	r25, Y+9	; 0x09
     a88:	91 83       	std	Z+1, r25	; 0x01
     a8a:	80 83       	st	Z, r24
					gastr_SOSBuffer[au8_periority].au8_Functionality=TASK_FUNCTIONALITY_PERIODIC;
     a8c:	8a 85       	ldd	r24, Y+10	; 0x0a
     a8e:	28 2f       	mov	r18, r24
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	c9 01       	movw	r24, r18
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	82 0f       	add	r24, r18
     a9a:	93 1f       	adc	r25, r19
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	88 0f       	add	r24, r24
     aa2:	99 1f       	adc	r25, r25
     aa4:	82 0f       	add	r24, r18
     aa6:	93 1f       	adc	r25, r19
     aa8:	fc 01       	movw	r30, r24
     aaa:	e6 5a       	subi	r30, 0xA6	; 166
     aac:	fd 4f       	sbci	r31, 0xFD	; 253
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	80 83       	st	Z, r24
					gastr_SOSBuffer[au8_periority].au8_Task_Status=Buffer_Task_Ready;
     ab2:	8a 85       	ldd	r24, Y+10	; 0x0a
     ab4:	28 2f       	mov	r18, r24
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	c9 01       	movw	r24, r18
     aba:	88 0f       	add	r24, r24
     abc:	99 1f       	adc	r25, r25
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	88 0f       	add	r24, r24
     ac8:	99 1f       	adc	r25, r25
     aca:	82 0f       	add	r24, r18
     acc:	93 1f       	adc	r25, r19
     ace:	fc 01       	movw	r30, r24
     ad0:	e7 5a       	subi	r30, 0xA7	; 167
     ad2:	fd 4f       	sbci	r31, 0xFD	; 253
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	80 83       	st	Z, r24
					gastr_SOSBuffer[au8_periority].au32_Periodicity=au8_SOS_Periodicity;
     ad8:	8a 85       	ldd	r24, Y+10	; 0x0a
     ada:	28 2f       	mov	r18, r24
     adc:	30 e0       	ldi	r19, 0x00	; 0
     ade:	c9 01       	movw	r24, r18
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	82 0f       	add	r24, r18
     ae6:	93 1f       	adc	r25, r19
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	82 0f       	add	r24, r18
     af2:	93 1f       	adc	r25, r19
     af4:	fc 01       	movw	r30, r24
     af6:	e0 5b       	subi	r30, 0xB0	; 176
     af8:	fd 4f       	sbci	r31, 0xFD	; 253
     afa:	8b 81       	ldd	r24, Y+3	; 0x03
     afc:	9c 81       	ldd	r25, Y+4	; 0x04
     afe:	ad 81       	ldd	r26, Y+5	; 0x05
     b00:	be 81       	ldd	r27, Y+6	; 0x06
     b02:	80 83       	st	Z, r24
     b04:	91 83       	std	Z+1, r25	; 0x01
     b06:	a2 83       	std	Z+2, r26	; 0x02
     b08:	b3 83       	std	Z+3, r27	; 0x03
					if(gu8_TMU_BUFFER_NUMBER==NULL)
     b0a:	80 91 44 02 	lds	r24, 0x0244
     b0e:	88 23       	and	r24, r24
     b10:	69 f4       	brne	.+26     	; 0xb2c <SOS_Create+0x298>
					{
						au8_timer_counts=gu8_SOS_resolution;
     b12:	80 91 42 02 	lds	r24, 0x0242
     b16:	89 83       	std	Y+1, r24	; 0x01
						Timer_Start(TIMER0,au8_timer_counts);
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	ba 01       	movw	r22, r20
     b26:	a9 01       	movw	r20, r18
     b28:	0e 94 1d 09 	call	0x123a	; 0x123a <Timer_Start>
					}
					gu8_TMU_BUFFER_NUMBER++;
     b2c:	80 91 44 02 	lds	r24, 0x0244
     b30:	8f 5f       	subi	r24, 0xFF	; 255
     b32:	80 93 44 02 	sts	0x0244, r24
					au8_error=SOS_CREATE_OK;
     b36:	1a 82       	std	Y+2, r1	; 0x02
     b38:	08 c0       	rjmp	.+16     	; 0xb4a <SOS_Create+0x2b6>
				}
				else
				{
					au8_error=SOS_CREATE_FUNCTIONALITY_NDEFINED;
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	8a 83       	std	Y+2, r24	; 0x02
     b3e:	05 c0       	rjmp	.+10     	; 0xb4a <SOS_Create+0x2b6>
				}
			}
			else
			{
				au8_error=SOS_CREATE_PRIORITY_IS_REDFEINED;
     b40:	82 e0       	ldi	r24, 0x02	; 2
     b42:	8a 83       	std	Y+2, r24	; 0x02
     b44:	02 c0       	rjmp	.+4      	; 0xb4a <SOS_Create+0x2b6>
			}
		}
		else
		{
			au8_error=SOS_CREATE_BUFFER_FULL;
     b46:	83 e0       	ldi	r24, 0x03	; 3
     b48:	8a 83       	std	Y+2, r24	; 0x02
		}
	}
	return au8_error;
     b4a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     b4c:	2a 96       	adiw	r28, 0x0a	; 10
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	de bf       	out	0x3e, r29	; 62
     b54:	0f be       	out	0x3f, r0	; 63
     b56:	cd bf       	out	0x3d, r28	; 61
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	0f 91       	pop	r16
     b5e:	08 95       	ret

00000b60 <SOS_Stop>:
ERROR_SOS_TYPE SOS_Stop(Ptr_Func CallBack)
{
     b60:	df 93       	push	r29
     b62:	cf 93       	push	r28
     b64:	00 d0       	rcall	.+0      	; 0xb66 <SOS_Stop+0x6>
     b66:	00 d0       	rcall	.+0      	; 0xb68 <SOS_Stop+0x8>
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	9c 83       	std	Y+4, r25	; 0x04
     b6e:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t au8_loop=NULL;
     b70:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t au8_error=NULL;
     b72:	19 82       	std	Y+1, r1	; 0x01
	if(CallBack!=NULL)
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	09 f4       	brne	.+2      	; 0xb7e <SOS_Stop+0x1e>
     b7c:	cc c0       	rjmp	.+408    	; 0xd16 <SOS_Stop+0x1b6>
	{
		for(au8_loop=0; au8_loop<TASKS_MAX_NUMBER; au8_loop++)
     b7e:	1a 82       	std	Y+2, r1	; 0x02
     b80:	c5 c0       	rjmp	.+394    	; 0xd0c <SOS_Stop+0x1ac>
		{
			if(gastr_SOSBuffer[au8_loop].au32_PtrToFunc==CallBack)
     b82:	8a 81       	ldd	r24, Y+2	; 0x02
     b84:	28 2f       	mov	r18, r24
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	c9 01       	movw	r24, r18
     b8a:	88 0f       	add	r24, r24
     b8c:	99 1f       	adc	r25, r25
     b8e:	82 0f       	add	r24, r18
     b90:	93 1f       	adc	r25, r19
     b92:	88 0f       	add	r24, r24
     b94:	99 1f       	adc	r25, r25
     b96:	88 0f       	add	r24, r24
     b98:	99 1f       	adc	r25, r25
     b9a:	82 0f       	add	r24, r18
     b9c:	93 1f       	adc	r25, r19
     b9e:	fc 01       	movw	r30, r24
     ba0:	e2 5b       	subi	r30, 0xB2	; 178
     ba2:	fd 4f       	sbci	r31, 0xFD	; 253
     ba4:	20 81       	ld	r18, Z
     ba6:	31 81       	ldd	r19, Z+1	; 0x01
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	09 f0       	breq	.+2      	; 0xbb4 <SOS_Stop+0x54>
     bb2:	a7 c0       	rjmp	.+334    	; 0xd02 <SOS_Stop+0x1a2>
			{
				if(gastr_SOSBuffer[au8_loop].au8_Task_Status==Buffer_Task_Done)
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	c9 01       	movw	r24, r18
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	88 0f       	add	r24, r24
     bc6:	99 1f       	adc	r25, r25
     bc8:	88 0f       	add	r24, r24
     bca:	99 1f       	adc	r25, r25
     bcc:	82 0f       	add	r24, r18
     bce:	93 1f       	adc	r25, r19
     bd0:	fc 01       	movw	r30, r24
     bd2:	e7 5a       	subi	r30, 0xA7	; 167
     bd4:	fd 4f       	sbci	r31, 0xFD	; 253
     bd6:	80 81       	ld	r24, Z
     bd8:	83 30       	cpi	r24, 0x03	; 3
     bda:	09 f0       	breq	.+2      	; 0xbde <SOS_Stop+0x7e>
     bdc:	94 c0       	rjmp	.+296    	; 0xd06 <SOS_Stop+0x1a6>
				{
					if(gastr_SOSBuffer[au8_loop].au8_Functionality==TASK_FUNCTIONALITY_PERIODIC)
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	c9 01       	movw	r24, r18
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	82 0f       	add	r24, r18
     bec:	93 1f       	adc	r25, r19
     bee:	88 0f       	add	r24, r24
     bf0:	99 1f       	adc	r25, r25
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	82 0f       	add	r24, r18
     bf8:	93 1f       	adc	r25, r19
     bfa:	fc 01       	movw	r30, r24
     bfc:	e6 5a       	subi	r30, 0xA6	; 166
     bfe:	fd 4f       	sbci	r31, 0xFD	; 253
     c00:	80 81       	ld	r24, Z
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	09 f0       	breq	.+2      	; 0xc08 <SOS_Stop+0xa8>
     c06:	7a c0       	rjmp	.+244    	; 0xcfc <SOS_Stop+0x19c>
					{
						gastr_SOSBuffer[au8_loop].au32_PtrToFunc=NULL;
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	c9 01       	movw	r24, r18
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	88 0f       	add	r24, r24
     c1e:	99 1f       	adc	r25, r25
     c20:	82 0f       	add	r24, r18
     c22:	93 1f       	adc	r25, r19
     c24:	fc 01       	movw	r30, r24
     c26:	e2 5b       	subi	r30, 0xB2	; 178
     c28:	fd 4f       	sbci	r31, 0xFD	; 253
     c2a:	11 82       	std	Z+1, r1	; 0x01
     c2c:	10 82       	st	Z, r1
						gastr_SOSBuffer[au8_loop].au8_Functionality=NULL;
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	28 2f       	mov	r18, r24
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	c9 01       	movw	r24, r18
     c36:	88 0f       	add	r24, r24
     c38:	99 1f       	adc	r25, r25
     c3a:	82 0f       	add	r24, r18
     c3c:	93 1f       	adc	r25, r19
     c3e:	88 0f       	add	r24, r24
     c40:	99 1f       	adc	r25, r25
     c42:	88 0f       	add	r24, r24
     c44:	99 1f       	adc	r25, r25
     c46:	82 0f       	add	r24, r18
     c48:	93 1f       	adc	r25, r19
     c4a:	fc 01       	movw	r30, r24
     c4c:	e6 5a       	subi	r30, 0xA6	; 166
     c4e:	fd 4f       	sbci	r31, 0xFD	; 253
     c50:	10 82       	st	Z, r1
						gastr_SOSBuffer[au8_loop].au8_Task_Status=Buffer_Task_NOTReady;
     c52:	8a 81       	ldd	r24, Y+2	; 0x02
     c54:	28 2f       	mov	r18, r24
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	c9 01       	movw	r24, r18
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	82 0f       	add	r24, r18
     c60:	93 1f       	adc	r25, r19
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	88 0f       	add	r24, r24
     c68:	99 1f       	adc	r25, r25
     c6a:	82 0f       	add	r24, r18
     c6c:	93 1f       	adc	r25, r19
     c6e:	fc 01       	movw	r30, r24
     c70:	e7 5a       	subi	r30, 0xA7	; 167
     c72:	fd 4f       	sbci	r31, 0xFD	; 253
     c74:	10 82       	st	Z, r1
						gastr_SOSBuffer[au8_loop].au32_Periodicity=NULL;
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	28 2f       	mov	r18, r24
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	c9 01       	movw	r24, r18
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	82 0f       	add	r24, r18
     c84:	93 1f       	adc	r25, r19
     c86:	88 0f       	add	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	82 0f       	add	r24, r18
     c90:	93 1f       	adc	r25, r19
     c92:	fc 01       	movw	r30, r24
     c94:	e0 5b       	subi	r30, 0xB0	; 176
     c96:	fd 4f       	sbci	r31, 0xFD	; 253
     c98:	10 82       	st	Z, r1
     c9a:	11 82       	std	Z+1, r1	; 0x01
     c9c:	12 82       	std	Z+2, r1	; 0x02
     c9e:	13 82       	std	Z+3, r1	; 0x03
						gastr_SOSBuffer[au8_loop].au32_Periodicity_New=NULL;
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	c9 01       	movw	r24, r18
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	82 0f       	add	r24, r18
     cae:	93 1f       	adc	r25, r19
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	88 0f       	add	r24, r24
     cb6:	99 1f       	adc	r25, r25
     cb8:	82 0f       	add	r24, r18
     cba:	93 1f       	adc	r25, r19
     cbc:	fc 01       	movw	r30, r24
     cbe:	ec 5a       	subi	r30, 0xAC	; 172
     cc0:	fd 4f       	sbci	r31, 0xFD	; 253
     cc2:	10 82       	st	Z, r1
     cc4:	11 82       	std	Z+1, r1	; 0x01
     cc6:	12 82       	std	Z+2, r1	; 0x02
     cc8:	13 82       	std	Z+3, r1	; 0x03
						gastr_SOSBuffer[au8_loop].au8_Buffer_ID=NULL;
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	c9 01       	movw	r24, r18
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	82 0f       	add	r24, r18
     cd8:	93 1f       	adc	r25, r19
     cda:	88 0f       	add	r24, r24
     cdc:	99 1f       	adc	r25, r25
     cde:	88 0f       	add	r24, r24
     ce0:	99 1f       	adc	r25, r25
     ce2:	82 0f       	add	r24, r18
     ce4:	93 1f       	adc	r25, r19
     ce6:	fc 01       	movw	r30, r24
     ce8:	e8 5a       	subi	r30, 0xA8	; 168
     cea:	fd 4f       	sbci	r31, 0xFD	; 253
     cec:	10 82       	st	Z, r1
						gu8_TMU_BUFFER_NUMBER--;
     cee:	80 91 44 02 	lds	r24, 0x0244
     cf2:	81 50       	subi	r24, 0x01	; 1
     cf4:	80 93 44 02 	sts	0x0244, r24
						au8_error=SOS_STOP_OK;
     cf8:	19 82       	std	Y+1, r1	; 0x01
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <SOS_Stop+0x1a6>
					}
					else
					{
						au8_error=SOS_STOP_TASK_IS_ONE_SHOT;
     cfc:	82 e0       	ldi	r24, 0x02	; 2
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <SOS_Stop+0x1a6>
					}
				}
			}
			else
			{
				au8_error=SOS_STOP_TASK_NOT_FOUND;
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	89 83       	std	Y+1, r24	; 0x01
{
	uint8_t au8_loop=NULL;
	uint8_t au8_error=NULL;
	if(CallBack!=NULL)
	{
		for(au8_loop=0; au8_loop<TASKS_MAX_NUMBER; au8_loop++)
     d06:	8a 81       	ldd	r24, Y+2	; 0x02
     d08:	8f 5f       	subi	r24, 0xFF	; 255
     d0a:	8a 83       	std	Y+2, r24	; 0x02
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	8f 30       	cpi	r24, 0x0F	; 15
     d10:	08 f4       	brcc	.+2      	; 0xd14 <SOS_Stop+0x1b4>
     d12:	37 cf       	rjmp	.-402    	; 0xb82 <SOS_Stop+0x22>
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <SOS_Stop+0x1ba>
			}
		}
	}
	else
	{
		au8_error=SOS_SOP_FUNC_NULL;
     d16:	84 e0       	ldi	r24, 0x04	; 4
     d18:	89 83       	std	Y+1, r24	; 0x01
	}
	return au8_error;
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
}
     d1c:	0f 90       	pop	r0
     d1e:	0f 90       	pop	r0
     d20:	0f 90       	pop	r0
     d22:	0f 90       	pop	r0
     d24:	cf 91       	pop	r28
     d26:	df 91       	pop	r29
     d28:	08 95       	ret

00000d2a <SOS_Schedular>:

void SOS_Schedular (void)
{
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_loop;
	switch(gu8_SOS_Status)
     d38:	80 91 45 02 	lds	r24, 0x0245
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	09 f0       	breq	.+2      	; 0xd46 <SOS_Schedular+0x1c>
     d44:	2c c1       	rjmp	.+600    	; 0xf9e <SOS_Schedular+0x274>
	{
	case SOS_Execute_Tasks:
		for(au8_loop=0; au8_loop<TASKS_MAX_NUMBER; au8_loop++)
     d46:	19 82       	std	Y+1, r1	; 0x01
     d48:	23 c1       	rjmp	.+582    	; 0xf90 <SOS_Schedular+0x266>
		{
			if(gastr_SOSBuffer[au8_loop].au8_Task_Status!=((Buffer_Task_NOTReady)))
     d4a:	89 81       	ldd	r24, Y+1	; 0x01
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	c9 01       	movw	r24, r18
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	82 0f       	add	r24, r18
     d58:	93 1f       	adc	r25, r19
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	82 0f       	add	r24, r18
     d64:	93 1f       	adc	r25, r19
     d66:	fc 01       	movw	r30, r24
     d68:	e7 5a       	subi	r30, 0xA7	; 167
     d6a:	fd 4f       	sbci	r31, 0xFD	; 253
     d6c:	80 81       	ld	r24, Z
     d6e:	88 23       	and	r24, r24
     d70:	09 f4       	brne	.+2      	; 0xd74 <SOS_Schedular+0x4a>
     d72:	0b c1       	rjmp	.+534    	; 0xf8a <SOS_Schedular+0x260>
			{
				if(gu8_ISR_Flag==(gastr_SOSBuffer[au8_loop].au32_Periodicity_New))
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	28 2f       	mov	r18, r24
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	c9 01       	movw	r24, r18
     d7c:	88 0f       	add	r24, r24
     d7e:	99 1f       	adc	r25, r25
     d80:	82 0f       	add	r24, r18
     d82:	93 1f       	adc	r25, r19
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	82 0f       	add	r24, r18
     d8e:	93 1f       	adc	r25, r19
     d90:	fc 01       	movw	r30, r24
     d92:	ec 5a       	subi	r30, 0xAC	; 172
     d94:	fd 4f       	sbci	r31, 0xFD	; 253
     d96:	20 81       	ld	r18, Z
     d98:	31 81       	ldd	r19, Z+1	; 0x01
     d9a:	42 81       	ldd	r20, Z+2	; 0x02
     d9c:	53 81       	ldd	r21, Z+3	; 0x03
     d9e:	80 91 46 02 	lds	r24, 0x0246
     da2:	90 91 47 02 	lds	r25, 0x0247
     da6:	a0 91 48 02 	lds	r26, 0x0248
     daa:	b0 91 49 02 	lds	r27, 0x0249
     dae:	28 17       	cp	r18, r24
     db0:	39 07       	cpc	r19, r25
     db2:	4a 07       	cpc	r20, r26
     db4:	5b 07       	cpc	r21, r27
     db6:	09 f0       	breq	.+2      	; 0xdba <SOS_Schedular+0x90>
     db8:	e8 c0       	rjmp	.+464    	; 0xf8a <SOS_Schedular+0x260>
				{
						if(gastr_SOSBuffer[au8_loop].au8_Functionality==TASK_FUNCTIONALITY_PERIODIC)
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	c9 01       	movw	r24, r18
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	82 0f       	add	r24, r18
     dc8:	93 1f       	adc	r25, r19
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	82 0f       	add	r24, r18
     dd4:	93 1f       	adc	r25, r19
     dd6:	fc 01       	movw	r30, r24
     dd8:	e6 5a       	subi	r30, 0xA6	; 166
     dda:	fd 4f       	sbci	r31, 0xFD	; 253
     ddc:	80 81       	ld	r24, Z
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	09 f0       	breq	.+2      	; 0xde4 <SOS_Schedular+0xba>
     de2:	6e c0       	rjmp	.+220    	; 0xec0 <SOS_Schedular+0x196>
						{
							gastr_SOSBuffer[au8_loop].au32_PtrToFunc();
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	c9 01       	movw	r24, r18
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	82 0f       	add	r24, r18
     df2:	93 1f       	adc	r25, r19
     df4:	88 0f       	add	r24, r24
     df6:	99 1f       	adc	r25, r25
     df8:	88 0f       	add	r24, r24
     dfa:	99 1f       	adc	r25, r25
     dfc:	82 0f       	add	r24, r18
     dfe:	93 1f       	adc	r25, r19
     e00:	fc 01       	movw	r30, r24
     e02:	e2 5b       	subi	r30, 0xB2	; 178
     e04:	fd 4f       	sbci	r31, 0xFD	; 253
     e06:	01 90       	ld	r0, Z+
     e08:	f0 81       	ld	r31, Z
     e0a:	e0 2d       	mov	r30, r0
     e0c:	09 95       	icall
							gastr_SOSBuffer[au8_loop].au8_Task_Status=Buffer_Task_Done;
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	c9 01       	movw	r24, r18
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	82 0f       	add	r24, r18
     e1c:	93 1f       	adc	r25, r19
     e1e:	88 0f       	add	r24, r24
     e20:	99 1f       	adc	r25, r25
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	82 0f       	add	r24, r18
     e28:	93 1f       	adc	r25, r19
     e2a:	fc 01       	movw	r30, r24
     e2c:	e7 5a       	subi	r30, 0xA7	; 167
     e2e:	fd 4f       	sbci	r31, 0xFD	; 253
     e30:	83 e0       	ldi	r24, 0x03	; 3
     e32:	80 83       	st	Z, r24
							gastr_SOSBuffer[au8_loop].au32_Periodicity_New+=gastr_SOSBuffer[au8_loop].au32_Periodicity;
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	08 2f       	mov	r16, r24
     e38:	10 e0       	ldi	r17, 0x00	; 0
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	c9 01       	movw	r24, r18
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	82 0f       	add	r24, r18
     e48:	93 1f       	adc	r25, r19
     e4a:	88 0f       	add	r24, r24
     e4c:	99 1f       	adc	r25, r25
     e4e:	88 0f       	add	r24, r24
     e50:	99 1f       	adc	r25, r25
     e52:	82 0f       	add	r24, r18
     e54:	93 1f       	adc	r25, r19
     e56:	fc 01       	movw	r30, r24
     e58:	ec 5a       	subi	r30, 0xAC	; 172
     e5a:	fd 4f       	sbci	r31, 0xFD	; 253
     e5c:	40 81       	ld	r20, Z
     e5e:	51 81       	ldd	r21, Z+1	; 0x01
     e60:	62 81       	ldd	r22, Z+2	; 0x02
     e62:	73 81       	ldd	r23, Z+3	; 0x03
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	28 2f       	mov	r18, r24
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	c9 01       	movw	r24, r18
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	82 0f       	add	r24, r18
     e72:	93 1f       	adc	r25, r19
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	82 0f       	add	r24, r18
     e7e:	93 1f       	adc	r25, r19
     e80:	fc 01       	movw	r30, r24
     e82:	e0 5b       	subi	r30, 0xB0	; 176
     e84:	fd 4f       	sbci	r31, 0xFD	; 253
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	a2 81       	ldd	r26, Z+2	; 0x02
     e8c:	b3 81       	ldd	r27, Z+3	; 0x03
     e8e:	9a 01       	movw	r18, r20
     e90:	ab 01       	movw	r20, r22
     e92:	28 0f       	add	r18, r24
     e94:	39 1f       	adc	r19, r25
     e96:	4a 1f       	adc	r20, r26
     e98:	5b 1f       	adc	r21, r27
     e9a:	c8 01       	movw	r24, r16
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	80 0f       	add	r24, r16
     ea2:	91 1f       	adc	r25, r17
     ea4:	88 0f       	add	r24, r24
     ea6:	99 1f       	adc	r25, r25
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	80 0f       	add	r24, r16
     eae:	91 1f       	adc	r25, r17
     eb0:	fc 01       	movw	r30, r24
     eb2:	ec 5a       	subi	r30, 0xAC	; 172
     eb4:	fd 4f       	sbci	r31, 0xFD	; 253
     eb6:	20 83       	st	Z, r18
     eb8:	31 83       	std	Z+1, r19	; 0x01
     eba:	42 83       	std	Z+2, r20	; 0x02
     ebc:	53 83       	std	Z+3, r21	; 0x03
     ebe:	65 c0       	rjmp	.+202    	; 0xf8a <SOS_Schedular+0x260>
						}
						else if(gastr_SOSBuffer[au8_loop].au8_Functionality==TASK_FUNCTIONALITY_ONESHOT)
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	28 2f       	mov	r18, r24
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	c9 01       	movw	r24, r18
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	82 0f       	add	r24, r18
     ece:	93 1f       	adc	r25, r19
     ed0:	88 0f       	add	r24, r24
     ed2:	99 1f       	adc	r25, r25
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	82 0f       	add	r24, r18
     eda:	93 1f       	adc	r25, r19
     edc:	fc 01       	movw	r30, r24
     ede:	e6 5a       	subi	r30, 0xA6	; 166
     ee0:	fd 4f       	sbci	r31, 0xFD	; 253
     ee2:	80 81       	ld	r24, Z
     ee4:	82 30       	cpi	r24, 0x02	; 2
     ee6:	09 f0       	breq	.+2      	; 0xeea <SOS_Schedular+0x1c0>
     ee8:	50 c0       	rjmp	.+160    	; 0xf8a <SOS_Schedular+0x260>
						{
							gastr_SOSBuffer[au8_loop].au32_PtrToFunc();
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	c9 01       	movw	r24, r18
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	82 0f       	add	r24, r18
     ef8:	93 1f       	adc	r25, r19
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	82 0f       	add	r24, r18
     f04:	93 1f       	adc	r25, r19
     f06:	fc 01       	movw	r30, r24
     f08:	e2 5b       	subi	r30, 0xB2	; 178
     f0a:	fd 4f       	sbci	r31, 0xFD	; 253
     f0c:	01 90       	ld	r0, Z+
     f0e:	f0 81       	ld	r31, Z
     f10:	e0 2d       	mov	r30, r0
     f12:	09 95       	icall
							gastr_SOSBuffer[au8_loop].au8_Functionality=NULL;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	c9 01       	movw	r24, r18
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	82 0f       	add	r24, r18
     f22:	93 1f       	adc	r25, r19
     f24:	88 0f       	add	r24, r24
     f26:	99 1f       	adc	r25, r25
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	82 0f       	add	r24, r18
     f2e:	93 1f       	adc	r25, r19
     f30:	fc 01       	movw	r30, r24
     f32:	e6 5a       	subi	r30, 0xA6	; 166
     f34:	fd 4f       	sbci	r31, 0xFD	; 253
     f36:	10 82       	st	Z, r1
							gastr_SOSBuffer[au8_loop].au8_Buffer_ID=NULL;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	c9 01       	movw	r24, r18
     f40:	88 0f       	add	r24, r24
     f42:	99 1f       	adc	r25, r25
     f44:	82 0f       	add	r24, r18
     f46:	93 1f       	adc	r25, r19
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	82 0f       	add	r24, r18
     f52:	93 1f       	adc	r25, r19
     f54:	fc 01       	movw	r30, r24
     f56:	e8 5a       	subi	r30, 0xA8	; 168
     f58:	fd 4f       	sbci	r31, 0xFD	; 253
     f5a:	10 82       	st	Z, r1
							gastr_SOSBuffer[au8_loop].au8_Task_Status=Buffer_Task_NOTReady;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	c9 01       	movw	r24, r18
     f64:	88 0f       	add	r24, r24
     f66:	99 1f       	adc	r25, r25
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	88 0f       	add	r24, r24
     f6e:	99 1f       	adc	r25, r25
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	82 0f       	add	r24, r18
     f76:	93 1f       	adc	r25, r19
     f78:	fc 01       	movw	r30, r24
     f7a:	e7 5a       	subi	r30, 0xA7	; 167
     f7c:	fd 4f       	sbci	r31, 0xFD	; 253
     f7e:	10 82       	st	Z, r1
							gu8_TMU_BUFFER_NUMBER--;
     f80:	80 91 44 02 	lds	r24, 0x0244
     f84:	81 50       	subi	r24, 0x01	; 1
     f86:	80 93 44 02 	sts	0x0244, r24
{
	uint8_t au8_loop;
	switch(gu8_SOS_Status)
	{
	case SOS_Execute_Tasks:
		for(au8_loop=0; au8_loop<TASKS_MAX_NUMBER; au8_loop++)
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	8f 5f       	subi	r24, 0xFF	; 255
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	8f 30       	cpi	r24, 0x0F	; 15
     f94:	08 f4       	brcc	.+2      	; 0xf98 <SOS_Schedular+0x26e>
     f96:	d9 ce       	rjmp	.-590    	; 0xd4a <SOS_Schedular+0x20>
			else
			{

			}
		}
		gu8_SOS_Status=SOS_No_Tasks_TO_EXECUTE;
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	80 93 45 02 	sts	0x0245, r24
		break;
	case SOS_No_Tasks_TO_EXECUTE:
		break;
	}
}
     f9e:	0f 90       	pop	r0
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	1f 91       	pop	r17
     fa6:	0f 91       	pop	r16
     fa8:	08 95       	ret

00000faa <__vector_10>:


ISR(TIMER0_COMP_vect)
{
     faa:	1f 92       	push	r1
     fac:	0f 92       	push	r0
     fae:	0f b6       	in	r0, 0x3f	; 63
     fb0:	0f 92       	push	r0
     fb2:	11 24       	eor	r1, r1
     fb4:	2f 93       	push	r18
     fb6:	3f 93       	push	r19
     fb8:	8f 93       	push	r24
     fba:	9f 93       	push	r25
     fbc:	af 93       	push	r26
     fbe:	bf 93       	push	r27
     fc0:	ef 93       	push	r30
     fc2:	ff 93       	push	r31
     fc4:	df 93       	push	r29
     fc6:	cf 93       	push	r28
     fc8:	00 d0       	rcall	.+0      	; 0xfca <__vector_10+0x20>
     fca:	cd b7       	in	r28, 0x3d	; 61
     fcc:	de b7       	in	r29, 0x3e	; 62
	gu8_ISR_Flag++;
     fce:	80 91 46 02 	lds	r24, 0x0246
     fd2:	90 91 47 02 	lds	r25, 0x0247
     fd6:	a0 91 48 02 	lds	r26, 0x0248
     fda:	b0 91 49 02 	lds	r27, 0x0249
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	a1 1d       	adc	r26, r1
     fe2:	b1 1d       	adc	r27, r1
     fe4:	80 93 46 02 	sts	0x0246, r24
     fe8:	90 93 47 02 	sts	0x0247, r25
     fec:	a0 93 48 02 	sts	0x0248, r26
     ff0:	b0 93 49 02 	sts	0x0249, r27
	gu8_SOS_Status=SOS_Execute_Tasks;
     ff4:	10 92 45 02 	sts	0x0245, r1
	if(gu8_ISR_Flag==255)
     ff8:	80 91 46 02 	lds	r24, 0x0246
     ffc:	90 91 47 02 	lds	r25, 0x0247
    1000:	a0 91 48 02 	lds	r26, 0x0248
    1004:	b0 91 49 02 	lds	r27, 0x0249
    1008:	8f 3f       	cpi	r24, 0xFF	; 255
    100a:	91 05       	cpc	r25, r1
    100c:	a1 05       	cpc	r26, r1
    100e:	b1 05       	cpc	r27, r1
    1010:	49 f5       	brne	.+82     	; 0x1064 <__vector_10+0xba>
	{
		gu8_ISR_Flag=0;
    1012:	10 92 46 02 	sts	0x0246, r1
    1016:	10 92 47 02 	sts	0x0247, r1
    101a:	10 92 48 02 	sts	0x0248, r1
    101e:	10 92 49 02 	sts	0x0249, r1
		for(int au8_loop=0; au8_loop<TASKS_MAX_NUMBER; au8_loop++)
    1022:	1a 82       	std	Y+2, r1	; 0x02
    1024:	19 82       	std	Y+1, r1	; 0x01
    1026:	19 c0       	rjmp	.+50     	; 0x105a <__vector_10+0xb0>
		{
			gastr_SOSBuffer[au8_loop].au32_Periodicity_New=0;
    1028:	29 81       	ldd	r18, Y+1	; 0x01
    102a:	3a 81       	ldd	r19, Y+2	; 0x02
    102c:	c9 01       	movw	r24, r18
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	82 0f       	add	r24, r18
    1034:	93 1f       	adc	r25, r19
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	88 0f       	add	r24, r24
    103c:	99 1f       	adc	r25, r25
    103e:	82 0f       	add	r24, r18
    1040:	93 1f       	adc	r25, r19
    1042:	fc 01       	movw	r30, r24
    1044:	ec 5a       	subi	r30, 0xAC	; 172
    1046:	fd 4f       	sbci	r31, 0xFD	; 253
    1048:	10 82       	st	Z, r1
    104a:	11 82       	std	Z+1, r1	; 0x01
    104c:	12 82       	std	Z+2, r1	; 0x02
    104e:	13 82       	std	Z+3, r1	; 0x03
	gu8_ISR_Flag++;
	gu8_SOS_Status=SOS_Execute_Tasks;
	if(gu8_ISR_Flag==255)
	{
		gu8_ISR_Flag=0;
		for(int au8_loop=0; au8_loop<TASKS_MAX_NUMBER; au8_loop++)
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	01 96       	adiw	r24, 0x01	; 1
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	89 83       	std	Y+1, r24	; 0x01
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	9a 81       	ldd	r25, Y+2	; 0x02
    105e:	8f 30       	cpi	r24, 0x0F	; 15
    1060:	91 05       	cpc	r25, r1
    1062:	14 f3       	brlt	.-60     	; 0x1028 <__vector_10+0x7e>
		{
			gastr_SOSBuffer[au8_loop].au32_Periodicity_New=0;
		}
	}
}
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	cf 91       	pop	r28
    106a:	df 91       	pop	r29
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	3f 91       	pop	r19
    107a:	2f 91       	pop	r18
    107c:	0f 90       	pop	r0
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	0f 90       	pop	r0
    1082:	1f 90       	pop	r1
    1084:	18 95       	reti

00001086 <Timer_Init>:

#include"Timer_Driver.h"
static uint8_t Prescaler_Timer[NO_OF_CHANNELS]={'\0','\0' ,'\0'};  /*Array to Copy Prescaler for each Timer Channel from Init to Start*/
static uint8_t Mode_Timer[NO_OF_CHANNELS]={'\0','\0' ,'\0'};       /*Array to Copy Mode for each Timer Channel from Init to Start*/
uint8_t Timer_Init(Str_TimerConfiguration_t* Confg_S)
{
    1086:	df 93       	push	r29
    1088:	cf 93       	push	r28
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	29 97       	sbiw	r28, 0x09	; 9
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	f8 94       	cli
    1094:	de bf       	out	0x3e, r29	; 62
    1096:	0f be       	out	0x3f, r0	; 63
    1098:	cd bf       	out	0x3d, r28	; 61
    109a:	9b 83       	std	Y+3, r25	; 0x03
    109c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t u8_error=NULL;
    109e:	19 82       	std	Y+1, r1	; 0x01
	switch(Confg_S->Timer_Channel)
    10a0:	ea 81       	ldd	r30, Y+2	; 0x02
    10a2:	fb 81       	ldd	r31, Y+3	; 0x03
    10a4:	80 81       	ld	r24, Z
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	39 87       	std	Y+9, r19	; 0x09
    10ac:	28 87       	std	Y+8, r18	; 0x08
    10ae:	88 85       	ldd	r24, Y+8	; 0x08
    10b0:	99 85       	ldd	r25, Y+9	; 0x09
    10b2:	00 97       	sbiw	r24, 0x00	; 0
    10b4:	39 f0       	breq	.+14     	; 0x10c4 <Timer_Init+0x3e>
    10b6:	28 85       	ldd	r18, Y+8	; 0x08
    10b8:	39 85       	ldd	r19, Y+9	; 0x09
    10ba:	21 30       	cpi	r18, 0x01	; 1
    10bc:	31 05       	cpc	r19, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <Timer_Init+0x3c>
    10c0:	63 c0       	rjmp	.+198    	; 0x1188 <Timer_Init+0x102>
    10c2:	af c0       	rjmp	.+350    	; 0x1222 <Timer_Init+0x19c>
	{
	case TIMER0:
		switch(Confg_S->Timer_Mode)
    10c4:	ea 81       	ldd	r30, Y+2	; 0x02
    10c6:	fb 81       	ldd	r31, Y+3	; 0x03
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	88 2f       	mov	r24, r24
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	00 96       	adiw	r24, 0x00	; 0
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	91 05       	cpc	r25, r1
    10d4:	48 f5       	brcc	.+82     	; 0x1128 <Timer_Init+0xa2>
		{
		case TIMER_MODE:
		case COUNTER_MODE:
			SET_BIT(TCCR0,7);
    10d6:	a3 e5       	ldi	r26, 0x53	; 83
    10d8:	b0 e0       	ldi	r27, 0x00	; 0
    10da:	e3 e5       	ldi	r30, 0x53	; 83
    10dc:	f0 e0       	ldi	r31, 0x00	; 0
    10de:	80 81       	ld	r24, Z
    10e0:	80 68       	ori	r24, 0x80	; 128
    10e2:	8c 93       	st	X, r24
			SET_BIT(TCCR0,3);
    10e4:	a3 e5       	ldi	r26, 0x53	; 83
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e3 e5       	ldi	r30, 0x53	; 83
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	88 60       	ori	r24, 0x08	; 8
    10f0:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,6);
    10f2:	a3 e5       	ldi	r26, 0x53	; 83
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	e3 e5       	ldi	r30, 0x53	; 83
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	8f 7b       	andi	r24, 0xBF	; 191
    10fe:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,4); /*configuring timer0 output compare mode and non pwm*/
    1100:	a3 e5       	ldi	r26, 0x53	; 83
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e3 e5       	ldi	r30, 0x53	; 83
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	8f 7e       	andi	r24, 0xEF	; 239
    110c:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,5);
    110e:	a3 e5       	ldi	r26, 0x53	; 83
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e3 e5       	ldi	r30, 0x53	; 83
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	8f 7d       	andi	r24, 0xDF	; 223
    111a:	8c 93       	st	X, r24
			Prescaler_Timer[TIMER0]= Confg_S->Timer_Psc;
    111c:	ea 81       	ldd	r30, Y+2	; 0x02
    111e:	fb 81       	ldd	r31, Y+3	; 0x03
    1120:	81 81       	ldd	r24, Z+1	; 0x01
    1122:	80 93 11 03 	sts	0x0311, r24
    1126:	02 c0       	rjmp	.+4      	; 0x112c <Timer_Init+0xa6>
			break;
		default:
			u8_error=ERROR_NOK;
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch(Confg_S->Interrupt_Mode)
    112c:	ea 81       	ldd	r30, Y+2	; 0x02
    112e:	fb 81       	ldd	r31, Y+3	; 0x03
    1130:	83 81       	ldd	r24, Z+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	3f 83       	std	Y+7, r19	; 0x07
    1138:	2e 83       	std	Y+6, r18	; 0x06
    113a:	8e 81       	ldd	r24, Y+6	; 0x06
    113c:	9f 81       	ldd	r25, Y+7	; 0x07
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	31 f0       	breq	.+12     	; 0x114e <Timer_Init+0xc8>
    1142:	2e 81       	ldd	r18, Y+6	; 0x06
    1144:	3f 81       	ldd	r19, Y+7	; 0x07
    1146:	21 30       	cpi	r18, 0x01	; 1
    1148:	31 05       	cpc	r19, r1
    114a:	71 f0       	breq	.+28     	; 0x1168 <Timer_Init+0xe2>
    114c:	1a c0       	rjmp	.+52     	; 0x1182 <Timer_Init+0xfc>
		{
		case POLLING:
			Mode_Timer[TIMER0]= Confg_S->Interrupt_Mode;
    114e:	ea 81       	ldd	r30, Y+2	; 0x02
    1150:	fb 81       	ldd	r31, Y+3	; 0x03
    1152:	83 81       	ldd	r24, Z+3	; 0x03
    1154:	80 93 14 03 	sts	0x0314, r24
			SET_BIT(TIMSK,1);
    1158:	a9 e5       	ldi	r26, 0x59	; 89
    115a:	b0 e0       	ldi	r27, 0x00	; 0
    115c:	e9 e5       	ldi	r30, 0x59	; 89
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	80 81       	ld	r24, Z
    1162:	82 60       	ori	r24, 0x02	; 2
    1164:	8c 93       	st	X, r24
    1166:	5f c0       	rjmp	.+190    	; 0x1226 <Timer_Init+0x1a0>
			break;
		case INTERRUPT:
			SET_BIT(TIMSK,1); /*enable output compare interrupt oc timer 0*/
    1168:	a9 e5       	ldi	r26, 0x59	; 89
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	e9 e5       	ldi	r30, 0x59	; 89
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	80 81       	ld	r24, Z
    1172:	82 60       	ori	r24, 0x02	; 2
    1174:	8c 93       	st	X, r24
			Mode_Timer[TIMER0]= Confg_S->Interrupt_Mode;
    1176:	ea 81       	ldd	r30, Y+2	; 0x02
    1178:	fb 81       	ldd	r31, Y+3	; 0x03
    117a:	83 81       	ldd	r24, Z+3	; 0x03
    117c:	80 93 14 03 	sts	0x0314, r24
    1180:	52 c0       	rjmp	.+164    	; 0x1226 <Timer_Init+0x1a0>
			break;
		default:
			u8_error= ERROR_NOK;
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	4f c0       	rjmp	.+158    	; 0x1226 <Timer_Init+0x1a0>
			break;
		}
		break;
	case TIMER1:
		switch(Confg_S->Timer_Mode)
    1188:	ea 81       	ldd	r30, Y+2	; 0x02
    118a:	fb 81       	ldd	r31, Y+3	; 0x03
    118c:	82 81       	ldd	r24, Z+2	; 0x02
    118e:	88 2f       	mov	r24, r24
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	00 96       	adiw	r24, 0x00	; 0
    1194:	82 30       	cpi	r24, 0x02	; 2
    1196:	91 05       	cpc	r25, r1
    1198:	a0 f4       	brcc	.+40     	; 0x11c2 <Timer_Init+0x13c>
		{
		case TIMER_MODE:
		case COUNTER_MODE:
			CLEAR_BIT(TCCR1A,6); /*Setting COMPA Channel  IN TIMER 1 as Output Compare Match mode*/
    119a:	af e4       	ldi	r26, 0x4F	; 79
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	ef e4       	ldi	r30, 0x4F	; 79
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	8f 7b       	andi	r24, 0xBF	; 191
    11a6:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR1A,7);
    11a8:	af e4       	ldi	r26, 0x4F	; 79
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ef e4       	ldi	r30, 0x4F	; 79
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 77       	andi	r24, 0x7F	; 127
    11b4:	8c 93       	st	X, r24
			Prescaler_Timer[TIMER1]= Confg_S->Timer_Psc; /*moving prescaler to global variable*/
    11b6:	ea 81       	ldd	r30, Y+2	; 0x02
    11b8:	fb 81       	ldd	r31, Y+3	; 0x03
    11ba:	81 81       	ldd	r24, Z+1	; 0x01
    11bc:	80 93 12 03 	sts	0x0312, r24
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <Timer_Init+0x140>
			break;
		default:
			u8_error=ERROR_NOK;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		switch(Confg_S->Interrupt_Mode)
    11c6:	ea 81       	ldd	r30, Y+2	; 0x02
    11c8:	fb 81       	ldd	r31, Y+3	; 0x03
    11ca:	83 81       	ldd	r24, Z+3	; 0x03
    11cc:	28 2f       	mov	r18, r24
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	3d 83       	std	Y+5, r19	; 0x05
    11d2:	2c 83       	std	Y+4, r18	; 0x04
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	9d 81       	ldd	r25, Y+5	; 0x05
    11d8:	00 97       	sbiw	r24, 0x00	; 0
    11da:	31 f0       	breq	.+12     	; 0x11e8 <Timer_Init+0x162>
    11dc:	2c 81       	ldd	r18, Y+4	; 0x04
    11de:	3d 81       	ldd	r19, Y+5	; 0x05
    11e0:	21 30       	cpi	r18, 0x01	; 1
    11e2:	31 05       	cpc	r19, r1
    11e4:	71 f0       	breq	.+28     	; 0x1202 <Timer_Init+0x17c>
    11e6:	1a c0       	rjmp	.+52     	; 0x121c <Timer_Init+0x196>
		{
		case POLLING:
			Mode_Timer[TIMER1]= Confg_S->Interrupt_Mode; /*moving Interrupt Mode to global variable*/
    11e8:	ea 81       	ldd	r30, Y+2	; 0x02
    11ea:	fb 81       	ldd	r31, Y+3	; 0x03
    11ec:	83 81       	ldd	r24, Z+3	; 0x03
    11ee:	80 93 15 03 	sts	0x0315, r24
			SET_BIT(TIMSK,4); /*OC1A INTEERUPT Enable*/
    11f2:	a9 e5       	ldi	r26, 0x59	; 89
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e9 e5       	ldi	r30, 0x59	; 89
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	80 61       	ori	r24, 0x10	; 16
    11fe:	8c 93       	st	X, r24
    1200:	12 c0       	rjmp	.+36     	; 0x1226 <Timer_Init+0x1a0>
			break;
		case INTERRUPT:
			SET_BIT(TIMSK,4); /*OC1A INTEERUPT Enable*/
    1202:	a9 e5       	ldi	r26, 0x59	; 89
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e9 e5       	ldi	r30, 0x59	; 89
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	80 61       	ori	r24, 0x10	; 16
    120e:	8c 93       	st	X, r24
			Mode_Timer[TIMER1]= Confg_S->Interrupt_Mode;  /*moving Interrupt Mode to global variable*/
    1210:	ea 81       	ldd	r30, Y+2	; 0x02
    1212:	fb 81       	ldd	r31, Y+3	; 0x03
    1214:	83 81       	ldd	r24, Z+3	; 0x03
    1216:	80 93 15 03 	sts	0x0315, r24
    121a:	05 c0       	rjmp	.+10     	; 0x1226 <Timer_Init+0x1a0>
			break;
		default:
			u8_error= ERROR_NOK;
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	02 c0       	rjmp	.+4      	; 0x1226 <Timer_Init+0x1a0>
			break;
		}
		break;
	default:
		u8_error= ERROR_NOK;
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return u8_error;
    1226:	89 81       	ldd	r24, Y+1	; 0x01
}
    1228:	29 96       	adiw	r28, 0x09	; 9
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <Timer_Start>:
uint8_t Timer_Start(uint8_t Copy_uint8_TimerChannel,uint32_t Copy_uint32_TickCounts)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	28 97       	sbiw	r28, 0x08	; 8
    1244:	0f b6       	in	r0, 0x3f	; 63
    1246:	f8 94       	cli
    1248:	de bf       	out	0x3e, r29	; 62
    124a:	0f be       	out	0x3f, r0	; 63
    124c:	cd bf       	out	0x3d, r28	; 61
    124e:	8a 83       	std	Y+2, r24	; 0x02
    1250:	4b 83       	std	Y+3, r20	; 0x03
    1252:	5c 83       	std	Y+4, r21	; 0x04
    1254:	6d 83       	std	Y+5, r22	; 0x05
    1256:	7e 83       	std	Y+6, r23	; 0x06
	volatile uint8_t Error_Check_TickCounts;
	switch (Copy_uint8_TimerChannel)
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	38 87       	std	Y+8, r19	; 0x08
    1260:	2f 83       	std	Y+7, r18	; 0x07
    1262:	8f 81       	ldd	r24, Y+7	; 0x07
    1264:	98 85       	ldd	r25, Y+8	; 0x08
    1266:	00 97       	sbiw	r24, 0x00	; 0
    1268:	39 f0       	breq	.+14     	; 0x1278 <Timer_Start+0x3e>
    126a:	2f 81       	ldd	r18, Y+7	; 0x07
    126c:	38 85       	ldd	r19, Y+8	; 0x08
    126e:	21 30       	cpi	r18, 0x01	; 1
    1270:	31 05       	cpc	r19, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <Timer_Start+0x3c>
    1274:	54 c0       	rjmp	.+168    	; 0x131e <Timer_Start+0xe4>
    1276:	aa c0       	rjmp	.+340    	; 0x13cc <Timer_Start+0x192>
	{
	case TIMER0:
		TCCR0 &= 0XF8;
    1278:	a3 e5       	ldi	r26, 0x53	; 83
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e3 e5       	ldi	r30, 0x53	; 83
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	88 7f       	andi	r24, 0xF8	; 248
    1284:	8c 93       	st	X, r24
		TCCR0|= Prescaler_Timer[TIMER0];
    1286:	a3 e5       	ldi	r26, 0x53	; 83
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e3 e5       	ldi	r30, 0x53	; 83
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	90 81       	ld	r25, Z
    1290:	80 91 11 03 	lds	r24, 0x0311
    1294:	89 2b       	or	r24, r25
    1296:	8c 93       	st	X, r24
		if((Copy_uint32_TickCounts<=255) && (Copy_uint32_TickCounts>0))
    1298:	8b 81       	ldd	r24, Y+3	; 0x03
    129a:	9c 81       	ldd	r25, Y+4	; 0x04
    129c:	ad 81       	ldd	r26, Y+5	; 0x05
    129e:	be 81       	ldd	r27, Y+6	; 0x06
    12a0:	8f 3f       	cpi	r24, 0xFF	; 255
    12a2:	91 05       	cpc	r25, r1
    12a4:	a1 05       	cpc	r26, r1
    12a6:	b1 05       	cpc	r27, r1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <Timer_Start+0x72>
    12aa:	88 f4       	brcc	.+34     	; 0x12ce <Timer_Start+0x94>
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	9c 81       	ldd	r25, Y+4	; 0x04
    12b0:	ad 81       	ldd	r26, Y+5	; 0x05
    12b2:	be 81       	ldd	r27, Y+6	; 0x06
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	a1 05       	cpc	r26, r1
    12b8:	b1 05       	cpc	r27, r1
    12ba:	49 f0       	breq	.+18     	; 0x12ce <Timer_Start+0x94>
		{
			TCNT0 =0;
    12bc:	e2 e5       	ldi	r30, 0x52	; 82
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	10 82       	st	Z, r1
			OCR0=Copy_uint32_TickCounts;
    12c2:	ec e5       	ldi	r30, 0x5C	; 92
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	80 83       	st	Z, r24
			Error_Check_TickCounts=ERROR_OK;
    12ca:	19 82       	std	Y+1, r1	; 0x01
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <Timer_Start+0x98>
		}
		else
		{
			Error_Check_TickCounts=ERROR_NOK;
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	89 83       	std	Y+1, r24	; 0x01
		}
		if(Mode_Timer[TIMER0]==POLLING)
    12d2:	80 91 14 03 	lds	r24, 0x0314
    12d6:	88 23       	and	r24, r24
    12d8:	91 f4       	brne	.+36     	; 0x12fe <Timer_Start+0xc4>
		{
			while(BIT_IS_CLEAR(TIFR,1));
    12da:	e8 e5       	ldi	r30, 0x58	; 88
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	88 2f       	mov	r24, r24
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	82 70       	andi	r24, 0x02	; 2
    12e6:	90 70       	andi	r25, 0x00	; 0
    12e8:	00 97       	sbiw	r24, 0x00	; 0
    12ea:	b9 f3       	breq	.-18     	; 0x12da <Timer_Start+0xa0>
			SET_BIT(TIFR,1);
    12ec:	a8 e5       	ldi	r26, 0x58	; 88
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	e8 e5       	ldi	r30, 0x58	; 88
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	80 81       	ld	r24, Z
    12f6:	82 60       	ori	r24, 0x02	; 2
    12f8:	8c 93       	st	X, r24
			Error_Check_TickCounts=ERROR_OK;
    12fa:	19 82       	std	Y+1, r1	; 0x01
    12fc:	67 c0       	rjmp	.+206    	; 0x13cc <Timer_Start+0x192>
		}
		else if(Mode_Timer[TIMER0]==INTERRUPT)
    12fe:	80 91 14 03 	lds	r24, 0x0314
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	49 f4       	brne	.+18     	; 0x1318 <Timer_Start+0xde>
		{
			SET_BIT(SREG,7); /*enable global interrupt*/
    1306:	af e5       	ldi	r26, 0x5F	; 95
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ef e5       	ldi	r30, 0x5F	; 95
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	80 68       	ori	r24, 0x80	; 128
    1312:	8c 93       	st	X, r24
			Error_Check_TickCounts=ERROR_OK;
    1314:	19 82       	std	Y+1, r1	; 0x01
    1316:	5a c0       	rjmp	.+180    	; 0x13cc <Timer_Start+0x192>
		}
		else
		{
			Error_Check_TickCounts=ERROR_NOK;
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	57 c0       	rjmp	.+174    	; 0x13cc <Timer_Start+0x192>
		}
		break;
	case TIMER1:
		TCCR1B &= 0XF8;
    131e:	ae e4       	ldi	r26, 0x4E	; 78
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	ee e4       	ldi	r30, 0x4E	; 78
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	88 7f       	andi	r24, 0xF8	; 248
    132a:	8c 93       	st	X, r24
		TCCR1B |= Prescaler_Timer[TIMER1];
    132c:	ae e4       	ldi	r26, 0x4E	; 78
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	ee e4       	ldi	r30, 0x4E	; 78
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	90 81       	ld	r25, Z
    1336:	80 91 12 03 	lds	r24, 0x0312
    133a:	89 2b       	or	r24, r25
    133c:	8c 93       	st	X, r24
		if((Copy_uint32_TickCounts<=65000) && (Copy_uint32_TickCounts>0))
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	ad 81       	ldd	r26, Y+5	; 0x05
    1344:	be 81       	ldd	r27, Y+6	; 0x06
    1346:	89 3e       	cpi	r24, 0xE9	; 233
    1348:	3d ef       	ldi	r19, 0xFD	; 253
    134a:	93 07       	cpc	r25, r19
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	a3 07       	cpc	r26, r19
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	b3 07       	cpc	r27, r19
    1354:	a0 f4       	brcc	.+40     	; 0x137e <Timer_Start+0x144>
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	ad 81       	ldd	r26, Y+5	; 0x05
    135c:	be 81       	ldd	r27, Y+6	; 0x06
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	a1 05       	cpc	r26, r1
    1362:	b1 05       	cpc	r27, r1
    1364:	61 f0       	breq	.+24     	; 0x137e <Timer_Start+0x144>
		{
			TCNT1 =0;
    1366:	ec e4       	ldi	r30, 0x4C	; 76
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	11 82       	std	Z+1, r1	; 0x01
    136c:	10 82       	st	Z, r1
			OCR1A=Copy_uint32_TickCounts;
    136e:	ea e4       	ldi	r30, 0x4A	; 74
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	91 83       	std	Z+1, r25	; 0x01
    1378:	80 83       	st	Z, r24
			Error_Check_TickCounts=ERROR_OK;
    137a:	19 82       	std	Y+1, r1	; 0x01
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <Timer_Start+0x148>
		}
		else
		{
			Error_Check_TickCounts=ERROR_NOK;
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	89 83       	std	Y+1, r24	; 0x01
		}
		if(Mode_Timer[TIMER1]==POLLING)
    1382:	80 91 15 03 	lds	r24, 0x0315
    1386:	88 23       	and	r24, r24
    1388:	91 f4       	brne	.+36     	; 0x13ae <Timer_Start+0x174>
		{
			while(BIT_IS_CLEAR(TIFR,4));
    138a:	e8 e5       	ldi	r30, 0x58	; 88
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	88 2f       	mov	r24, r24
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	80 71       	andi	r24, 0x10	; 16
    1396:	90 70       	andi	r25, 0x00	; 0
    1398:	00 97       	sbiw	r24, 0x00	; 0
    139a:	b9 f3       	breq	.-18     	; 0x138a <Timer_Start+0x150>
			SET_BIT(TIFR,4);
    139c:	a8 e5       	ldi	r26, 0x58	; 88
    139e:	b0 e0       	ldi	r27, 0x00	; 0
    13a0:	e8 e5       	ldi	r30, 0x58	; 88
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	80 61       	ori	r24, 0x10	; 16
    13a8:	8c 93       	st	X, r24
			Error_Check_TickCounts=ERROR_OK;
    13aa:	19 82       	std	Y+1, r1	; 0x01
    13ac:	0f c0       	rjmp	.+30     	; 0x13cc <Timer_Start+0x192>
		}
		else if(Mode_Timer[TIMER1]==INTERRUPT)
    13ae:	80 91 15 03 	lds	r24, 0x0315
    13b2:	81 30       	cpi	r24, 0x01	; 1
    13b4:	49 f4       	brne	.+18     	; 0x13c8 <Timer_Start+0x18e>
		{
			SET_BIT(SREG,7); /*enable global interrupt*/
    13b6:	af e5       	ldi	r26, 0x5F	; 95
    13b8:	b0 e0       	ldi	r27, 0x00	; 0
    13ba:	ef e5       	ldi	r30, 0x5F	; 95
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	80 68       	ori	r24, 0x80	; 128
    13c2:	8c 93       	st	X, r24
			Error_Check_TickCounts=ERROR_OK;
    13c4:	19 82       	std	Y+1, r1	; 0x01
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <Timer_Start+0x192>
		}
		else
		{
			Error_Check_TickCounts=ERROR_NOK;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	89 83       	std	Y+1, r24	; 0x01
		}
		break;

	}
	return Error_Check_TickCounts;
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ce:	28 96       	adiw	r28, 0x08	; 8
    13d0:	0f b6       	in	r0, 0x3f	; 63
    13d2:	f8 94       	cli
    13d4:	de bf       	out	0x3e, r29	; 62
    13d6:	0f be       	out	0x3f, r0	; 63
    13d8:	cd bf       	out	0x3d, r28	; 61
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <Timer_Stop>:


uint8_t Timer_Stop(uint8_t Copy_uint8_TimerChannel)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <Timer_Stop+0x6>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <Timer_Stop+0x8>
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_uint8_TimerChannel)
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	28 2f       	mov	r18, r24
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	3c 83       	std	Y+4, r19	; 0x04
    13f6:	2b 83       	std	Y+3, r18	; 0x03
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	00 97       	sbiw	r24, 0x00	; 0
    13fe:	31 f0       	breq	.+12     	; 0x140c <Timer_Stop+0x2c>
    1400:	2b 81       	ldd	r18, Y+3	; 0x03
    1402:	3c 81       	ldd	r19, Y+4	; 0x04
    1404:	21 30       	cpi	r18, 0x01	; 1
    1406:	31 05       	cpc	r19, r1
    1408:	81 f0       	breq	.+32     	; 0x142a <Timer_Stop+0x4a>
    140a:	1e c0       	rjmp	.+60     	; 0x1448 <Timer_Stop+0x68>
	{
	case TIMER0:
		TCCR0 &= 0XF8;
    140c:	a3 e5       	ldi	r26, 0x53	; 83
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e3 e5       	ldi	r30, 0x53	; 83
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	88 7f       	andi	r24, 0xF8	; 248
    1418:	8c 93       	st	X, r24
		TCCR0|=NO_CLOCK_TIMER_0;
    141a:	a3 e5       	ldi	r26, 0x53	; 83
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e5       	ldi	r30, 0x53	; 83
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	8c 93       	st	X, r24
		return ERROR_OK;
    1426:	1a 82       	std	Y+2, r1	; 0x02
    1428:	11 c0       	rjmp	.+34     	; 0x144c <Timer_Stop+0x6c>
		break;
	case TIMER1:
		TCCR1B &= 0XF8;
    142a:	ae e4       	ldi	r26, 0x4E	; 78
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	ee e4       	ldi	r30, 0x4E	; 78
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	88 7f       	andi	r24, 0xF8	; 248
    1436:	8c 93       	st	X, r24
		TCCR1B|=NO_CLOCK_TIMER_0;
    1438:	ae e4       	ldi	r26, 0x4E	; 78
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	ee e4       	ldi	r30, 0x4E	; 78
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	8c 93       	st	X, r24
		return ERROR_OK;
    1444:	1a 82       	std	Y+2, r1	; 0x02
    1446:	02 c0       	rjmp	.+4      	; 0x144c <Timer_Stop+0x6c>
	default:
	return ERROR_NOK;
    1448:	31 e0       	ldi	r19, 0x01	; 1
    144a:	3a 83       	std	Y+2, r19	; 0x02
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
	break;
	}
}
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <Timer_Reset>:

uint8_t Timer_Reset(uint8_t Copy_uint8_TimerChannel)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	00 d0       	rcall	.+0      	; 0x1462 <Timer_Reset+0x6>
    1462:	00 d0       	rcall	.+0      	; 0x1464 <Timer_Reset+0x8>
    1464:	cd b7       	in	r28, 0x3d	; 61
    1466:	de b7       	in	r29, 0x3e	; 62
    1468:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_uint8_TimerChannel)
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	3c 83       	std	Y+4, r19	; 0x04
    1472:	2b 83       	std	Y+3, r18	; 0x03
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	9c 81       	ldd	r25, Y+4	; 0x04
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	31 f0       	breq	.+12     	; 0x1488 <Timer_Reset+0x2c>
    147c:	2b 81       	ldd	r18, Y+3	; 0x03
    147e:	3c 81       	ldd	r19, Y+4	; 0x04
    1480:	21 30       	cpi	r18, 0x01	; 1
    1482:	31 05       	cpc	r19, r1
    1484:	31 f0       	breq	.+12     	; 0x1492 <Timer_Reset+0x36>
    1486:	0b c0       	rjmp	.+22     	; 0x149e <Timer_Reset+0x42>
	{
	case TIMER0:
		TCNT0=0;
    1488:	e2 e5       	ldi	r30, 0x52	; 82
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
		return ERROR_OK;
    148e:	1a 82       	std	Y+2, r1	; 0x02
    1490:	08 c0       	rjmp	.+16     	; 0x14a2 <Timer_Reset+0x46>
	case TIMER1:
		TCNT1=0;
    1492:	ec e4       	ldi	r30, 0x4C	; 76
    1494:	f0 e0       	ldi	r31, 0x00	; 0
    1496:	11 82       	std	Z+1, r1	; 0x01
    1498:	10 82       	st	Z, r1
		return ERROR_OK;
    149a:	1a 82       	std	Y+2, r1	; 0x02
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <Timer_Reset+0x46>
	default:
		return ERROR_NOK;
    149e:	31 e0       	ldi	r19, 0x01	; 1
    14a0:	3a 83       	std	Y+2, r19	; 0x02
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    14a4:	0f 90       	pop	r0
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	cf 91       	pop	r28
    14ae:	df 91       	pop	r29
    14b0:	08 95       	ret

000014b2 <Timer_Get_FlagStatus>:
uint8_t Timer_Get_FlagStatus(uint8_t Copy_uint8_TimerChannel, uint8_t *Copy_uint8Ptr_FlagStatus)
{
    14b2:	df 93       	push	r29
    14b4:	cf 93       	push	r28
    14b6:	00 d0       	rcall	.+0      	; 0x14b8 <Timer_Get_FlagStatus+0x6>
    14b8:	00 d0       	rcall	.+0      	; 0x14ba <Timer_Get_FlagStatus+0x8>
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <Timer_Get_FlagStatus+0xa>
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	7b 83       	std	Y+3, r23	; 0x03
    14c4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_uint8_TimerChannel)
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	3e 83       	std	Y+6, r19	; 0x06
    14ce:	2d 83       	std	Y+5, r18	; 0x05
    14d0:	8d 81       	ldd	r24, Y+5	; 0x05
    14d2:	9e 81       	ldd	r25, Y+6	; 0x06
    14d4:	00 97       	sbiw	r24, 0x00	; 0
    14d6:	31 f0       	breq	.+12     	; 0x14e4 <Timer_Get_FlagStatus+0x32>
    14d8:	2d 81       	ldd	r18, Y+5	; 0x05
    14da:	3e 81       	ldd	r19, Y+6	; 0x06
    14dc:	21 30       	cpi	r18, 0x01	; 1
    14de:	31 05       	cpc	r19, r1
    14e0:	59 f0       	breq	.+22     	; 0x14f8 <Timer_Get_FlagStatus+0x46>
    14e2:	15 c0       	rjmp	.+42     	; 0x150e <Timer_Get_FlagStatus+0x5c>
	{
	case TIMER0:
		*Copy_uint8Ptr_FlagStatus= GET_BIT(TIFR,1);
    14e4:	e8 e5       	ldi	r30, 0x58	; 88
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	86 95       	lsr	r24
    14ec:	81 70       	andi	r24, 0x01	; 1
    14ee:	ea 81       	ldd	r30, Y+2	; 0x02
    14f0:	fb 81       	ldd	r31, Y+3	; 0x03
    14f2:	80 83       	st	Z, r24
		return ERROR_OK;
    14f4:	1c 82       	std	Y+4, r1	; 0x04
    14f6:	0d c0       	rjmp	.+26     	; 0x1512 <Timer_Get_FlagStatus+0x60>
		break;
	case TIMER1:
		*Copy_uint8Ptr_FlagStatus= GET_BIT(TIFR,4);
    14f8:	e8 e5       	ldi	r30, 0x58	; 88
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	82 95       	swap	r24
    1500:	8f 70       	andi	r24, 0x0F	; 15
    1502:	81 70       	andi	r24, 0x01	; 1
    1504:	ea 81       	ldd	r30, Y+2	; 0x02
    1506:	fb 81       	ldd	r31, Y+3	; 0x03
    1508:	80 83       	st	Z, r24
		return ERROR_OK;
    150a:	1c 82       	std	Y+4, r1	; 0x04
    150c:	02 c0       	rjmp	.+4      	; 0x1512 <Timer_Get_FlagStatus+0x60>
		break;
	default:
	return ERROR_NOK;
    150e:	31 e0       	ldi	r19, 0x01	; 1
    1510:	3c 83       	std	Y+4, r19	; 0x04
    1512:	8c 81       	ldd	r24, Y+4	; 0x04
	break;
	}
}
    1514:	26 96       	adiw	r28, 0x06	; 6
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <DIO_INIT_Pin>:


#include "DIO.h"

uint8_t DIO_INIT_Pin (uint8_t Pin_Number, uint8_t direction)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <DIO_INIT_Pin+0x6>
    152c:	0f 92       	push	r0
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	6a 83       	std	Y+2, r22	; 0x02
	if((Pin_Number>= A0) && (Pin_Number<= A7))
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	88 30       	cpi	r24, 0x08	; 8
    153a:	78 f5       	brcc	.+94     	; 0x159a <DIO_INIT_Pin+0x74>
	{
		if(direction==OUTPUT)
    153c:	8a 81       	ldd	r24, Y+2	; 0x02
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	99 f4       	brne	.+38     	; 0x1568 <DIO_INIT_Pin+0x42>
		{
			SET_BIT(DDRA, Pin_Number);
    1542:	aa e3       	ldi	r26, 0x3A	; 58
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	ea e3       	ldi	r30, 0x3A	; 58
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_INIT_Pin+0x3a>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_INIT_Pin+0x36>
    1564:	84 2b       	or	r24, r20
    1566:	8c 93       	st	X, r24
		}
		if(direction==INPUT)
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	88 23       	and	r24, r24
    156c:	a1 f4       	brne	.+40     	; 0x1596 <DIO_INIT_Pin+0x70>
		{
			CLEAR_BIT(DDRA, Pin_Number);
    156e:	aa e3       	ldi	r26, 0x3A	; 58
    1570:	b0 e0       	ldi	r27, 0x00	; 0
    1572:	ea e3       	ldi	r30, 0x3A	; 58
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	48 2f       	mov	r20, r24
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	28 2f       	mov	r18, r24
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	02 2e       	mov	r0, r18
    1586:	02 c0       	rjmp	.+4      	; 0x158c <DIO_INIT_Pin+0x66>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	0a 94       	dec	r0
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <DIO_INIT_Pin+0x62>
    1590:	80 95       	com	r24
    1592:	84 23       	and	r24, r20
    1594:	8c 93       	st	X, r24
		}
		return ERROR_OK;
    1596:	1b 82       	std	Y+3, r1	; 0x03
    1598:	b3 c0       	rjmp	.+358    	; 0x1700 <DIO_INIT_Pin+0x1da>
	}
	if((Pin_Number>=B0) && (Pin_Number<=B7))
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	88 30       	cpi	r24, 0x08	; 8
    159e:	c0 f1       	brcs	.+112    	; 0x1610 <DIO_INIT_Pin+0xea>
    15a0:	89 81       	ldd	r24, Y+1	; 0x01
    15a2:	80 31       	cpi	r24, 0x10	; 16
    15a4:	a8 f5       	brcc	.+106    	; 0x1610 <DIO_INIT_Pin+0xea>
	{
		if(direction==OUTPUT)
    15a6:	8a 81       	ldd	r24, Y+2	; 0x02
    15a8:	81 30       	cpi	r24, 0x01	; 1
    15aa:	b1 f4       	brne	.+44     	; 0x15d8 <DIO_INIT_Pin+0xb2>
		{
			SET_BIT(DDRB, (Pin_Number%8));
    15ac:	a7 e3       	ldi	r26, 0x37	; 55
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e7 e3       	ldi	r30, 0x37	; 55
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	48 2f       	mov	r20, r24
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	9c 01       	movw	r18, r24
    15c0:	27 70       	andi	r18, 0x07	; 7
    15c2:	30 70       	andi	r19, 0x00	; 0
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	02 2e       	mov	r0, r18
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <DIO_INIT_Pin+0xaa>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	0a 94       	dec	r0
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <DIO_INIT_Pin+0xa6>
    15d4:	84 2b       	or	r24, r20
    15d6:	8c 93       	st	X, r24
		}
		if(direction==INPUT)
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	88 23       	and	r24, r24
    15dc:	b9 f4       	brne	.+46     	; 0x160c <DIO_INIT_Pin+0xe6>
		{
			CLEAR_BIT(DDRB, (Pin_Number%8));
    15de:	a7 e3       	ldi	r26, 0x37	; 55
    15e0:	b0 e0       	ldi	r27, 0x00	; 0
    15e2:	e7 e3       	ldi	r30, 0x37	; 55
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	48 2f       	mov	r20, r24
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	88 2f       	mov	r24, r24
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	9c 01       	movw	r18, r24
    15f2:	27 70       	andi	r18, 0x07	; 7
    15f4:	30 70       	andi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 2e       	mov	r0, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <DIO_INIT_Pin+0xdc>
    15fe:	88 0f       	add	r24, r24
    1600:	99 1f       	adc	r25, r25
    1602:	0a 94       	dec	r0
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <DIO_INIT_Pin+0xd8>
    1606:	80 95       	com	r24
    1608:	84 23       	and	r24, r20
    160a:	8c 93       	st	X, r24
		}
		return ERROR_OK;
    160c:	1b 82       	std	Y+3, r1	; 0x03
    160e:	78 c0       	rjmp	.+240    	; 0x1700 <DIO_INIT_Pin+0x1da>
	}
	if((Pin_Number>=C0) && (Pin_Number<=C7))
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	80 31       	cpi	r24, 0x10	; 16
    1614:	c0 f1       	brcs	.+112    	; 0x1686 <DIO_INIT_Pin+0x160>
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	88 31       	cpi	r24, 0x18	; 24
    161a:	a8 f5       	brcc	.+106    	; 0x1686 <DIO_INIT_Pin+0x160>
	{

		if(direction==OUTPUT)
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	81 30       	cpi	r24, 0x01	; 1
    1620:	b1 f4       	brne	.+44     	; 0x164e <DIO_INIT_Pin+0x128>
		{
			SET_BIT(DDRC,(Pin_Number%8));
    1622:	a4 e3       	ldi	r26, 0x34	; 52
    1624:	b0 e0       	ldi	r27, 0x00	; 0
    1626:	e4 e3       	ldi	r30, 0x34	; 52
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	48 2f       	mov	r20, r24
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	88 2f       	mov	r24, r24
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	9c 01       	movw	r18, r24
    1636:	27 70       	andi	r18, 0x07	; 7
    1638:	30 70       	andi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_INIT_Pin+0x120>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_INIT_Pin+0x11c>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
		}
		if(direction==INPUT)
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	88 23       	and	r24, r24
    1652:	b9 f4       	brne	.+46     	; 0x1682 <DIO_INIT_Pin+0x15c>
		{
			CLEAR_BIT(DDRC,(Pin_Number%8));
    1654:	a4 e3       	ldi	r26, 0x34	; 52
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e4 e3       	ldi	r30, 0x34	; 52
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 01       	movw	r18, r24
    1668:	27 70       	andi	r18, 0x07	; 7
    166a:	30 70       	andi	r19, 0x00	; 0
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	02 2e       	mov	r0, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <DIO_INIT_Pin+0x152>
    1674:	88 0f       	add	r24, r24
    1676:	99 1f       	adc	r25, r25
    1678:	0a 94       	dec	r0
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <DIO_INIT_Pin+0x14e>
    167c:	80 95       	com	r24
    167e:	84 23       	and	r24, r20
    1680:	8c 93       	st	X, r24
		}
		return ERROR_OK;
    1682:	1b 82       	std	Y+3, r1	; 0x03
    1684:	3d c0       	rjmp	.+122    	; 0x1700 <DIO_INIT_Pin+0x1da>
	}
	if((Pin_Number>=D0) && (Pin_Number<=D7))
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	88 31       	cpi	r24, 0x18	; 24
    168a:	c0 f1       	brcs	.+112    	; 0x16fc <DIO_INIT_Pin+0x1d6>
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	80 32       	cpi	r24, 0x20	; 32
    1690:	a8 f5       	brcc	.+106    	; 0x16fc <DIO_INIT_Pin+0x1d6>
	{
		if(direction==OUTPUT)
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	81 30       	cpi	r24, 0x01	; 1
    1696:	b1 f4       	brne	.+44     	; 0x16c4 <DIO_INIT_Pin+0x19e>
		{
			SET_BIT(DDRD, (Pin_Number%8));
    1698:	a1 e3       	ldi	r26, 0x31	; 49
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e1 e3       	ldi	r30, 0x31	; 49
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	88 2f       	mov	r24, r24
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	9c 01       	movw	r18, r24
    16ac:	27 70       	andi	r18, 0x07	; 7
    16ae:	30 70       	andi	r19, 0x00	; 0
    16b0:	81 e0       	ldi	r24, 0x01	; 1
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	02 2e       	mov	r0, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <DIO_INIT_Pin+0x196>
    16b8:	88 0f       	add	r24, r24
    16ba:	99 1f       	adc	r25, r25
    16bc:	0a 94       	dec	r0
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <DIO_INIT_Pin+0x192>
    16c0:	84 2b       	or	r24, r20
    16c2:	8c 93       	st	X, r24
		}
		if(direction==INPUT)
    16c4:	8a 81       	ldd	r24, Y+2	; 0x02
    16c6:	88 23       	and	r24, r24
    16c8:	b9 f4       	brne	.+46     	; 0x16f8 <DIO_INIT_Pin+0x1d2>
		{
			CLEAR_BIT(DDRD, (Pin_Number%8));
    16ca:	a1 e3       	ldi	r26, 0x31	; 49
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e1 e3       	ldi	r30, 0x31	; 49
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	9c 01       	movw	r18, r24
    16de:	27 70       	andi	r18, 0x07	; 7
    16e0:	30 70       	andi	r19, 0x00	; 0
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	02 2e       	mov	r0, r18
    16e8:	02 c0       	rjmp	.+4      	; 0x16ee <DIO_INIT_Pin+0x1c8>
    16ea:	88 0f       	add	r24, r24
    16ec:	99 1f       	adc	r25, r25
    16ee:	0a 94       	dec	r0
    16f0:	e2 f7       	brpl	.-8      	; 0x16ea <DIO_INIT_Pin+0x1c4>
    16f2:	80 95       	com	r24
    16f4:	84 23       	and	r24, r20
    16f6:	8c 93       	st	X, r24
		}
		return ERROR_OK;
    16f8:	1b 82       	std	Y+3, r1	; 0x03
    16fa:	02 c0       	rjmp	.+4      	; 0x1700 <DIO_INIT_Pin+0x1da>
	}
	else {
		return ERROR_NOK;
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	8b 83       	std	Y+3, r24	; 0x03
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	08 95       	ret

0000170e <DIO_INIT_PORT>:

uint8_t DIO_INIT_PORT (uint8_t Port_Name, uint8_t direction)
{
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	00 d0       	rcall	.+0      	; 0x1714 <DIO_INIT_PORT+0x6>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	6a 83       	std	Y+2, r22	; 0x02
	if(Port_Name ==PA)
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	88 23       	and	r24, r24
    1722:	81 f4       	brne	.+32     	; 0x1744 <DIO_INIT_PORT+0x36>
	{
		if(direction==OUTPUT)
    1724:	8a 81       	ldd	r24, Y+2	; 0x02
    1726:	81 30       	cpi	r24, 0x01	; 1
    1728:	29 f4       	brne	.+10     	; 0x1734 <DIO_INIT_PORT+0x26>
		{
			DDRA=0xFF;
    172a:	ea e3       	ldi	r30, 0x3A	; 58
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	8f ef       	ldi	r24, 0xFF	; 255
    1730:	80 83       	st	Z, r24
    1732:	06 c0       	rjmp	.+12     	; 0x1740 <DIO_INIT_PORT+0x32>
		}
		else if(direction==INPUT)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	88 23       	and	r24, r24
    1738:	19 f4       	brne	.+6      	; 0x1740 <DIO_INIT_PORT+0x32>
		{
			DDRA=0x00;
    173a:	ea e3       	ldi	r30, 0x3A	; 58
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	10 82       	st	Z, r1
		}
		return ERROR_OK;
    1740:	1b 82       	std	Y+3, r1	; 0x03
    1742:	3b c0       	rjmp	.+118    	; 0x17ba <DIO_INIT_PORT+0xac>
	}
	else if(Port_Name ==PB)
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	81 f4       	brne	.+32     	; 0x176a <DIO_INIT_PORT+0x5c>
	{
		if(direction==OUTPUT)
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	29 f4       	brne	.+10     	; 0x175a <DIO_INIT_PORT+0x4c>
		{
			DDRB=0xFF;
    1750:	e7 e3       	ldi	r30, 0x37	; 55
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8f ef       	ldi	r24, 0xFF	; 255
    1756:	80 83       	st	Z, r24
    1758:	06 c0       	rjmp	.+12     	; 0x1766 <DIO_INIT_PORT+0x58>
		}
		else if(direction==INPUT)
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	88 23       	and	r24, r24
    175e:	19 f4       	brne	.+6      	; 0x1766 <DIO_INIT_PORT+0x58>
		{
			DDRB=0x00;
    1760:	e7 e3       	ldi	r30, 0x37	; 55
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	10 82       	st	Z, r1
		}
		return ERROR_OK;
    1766:	1b 82       	std	Y+3, r1	; 0x03
    1768:	28 c0       	rjmp	.+80     	; 0x17ba <DIO_INIT_PORT+0xac>
	}
	else if(Port_Name ==PC)
    176a:	89 81       	ldd	r24, Y+1	; 0x01
    176c:	82 30       	cpi	r24, 0x02	; 2
    176e:	81 f4       	brne	.+32     	; 0x1790 <DIO_INIT_PORT+0x82>
	{
		if(direction==OUTPUT)
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	29 f4       	brne	.+10     	; 0x1780 <DIO_INIT_PORT+0x72>
		{
			DDRC=0xFF;
    1776:	e4 e3       	ldi	r30, 0x34	; 52
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8f ef       	ldi	r24, 0xFF	; 255
    177c:	80 83       	st	Z, r24
    177e:	06 c0       	rjmp	.+12     	; 0x178c <DIO_INIT_PORT+0x7e>
		}
		else if(direction==INPUT)
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	88 23       	and	r24, r24
    1784:	19 f4       	brne	.+6      	; 0x178c <DIO_INIT_PORT+0x7e>
		{
			DDRC=0x00;
    1786:	e4 e3       	ldi	r30, 0x34	; 52
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	10 82       	st	Z, r1
		}
		return 	ERROR_OK;
    178c:	1b 82       	std	Y+3, r1	; 0x03
    178e:	15 c0       	rjmp	.+42     	; 0x17ba <DIO_INIT_PORT+0xac>
	}
	else if(Port_Name ==PD)
    1790:	89 81       	ldd	r24, Y+1	; 0x01
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	81 f4       	brne	.+32     	; 0x17b6 <DIO_INIT_PORT+0xa8>
	{
		if(direction==OUTPUT)
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	81 30       	cpi	r24, 0x01	; 1
    179a:	29 f4       	brne	.+10     	; 0x17a6 <DIO_INIT_PORT+0x98>
		{
			DDRD=0xFF;
    179c:	e1 e3       	ldi	r30, 0x31	; 49
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	8f ef       	ldi	r24, 0xFF	; 255
    17a2:	80 83       	st	Z, r24
    17a4:	06 c0       	rjmp	.+12     	; 0x17b2 <DIO_INIT_PORT+0xa4>
		}
		else if(direction==INPUT)
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	88 23       	and	r24, r24
    17aa:	19 f4       	brne	.+6      	; 0x17b2 <DIO_INIT_PORT+0xa4>
		{
			DDRD=0x00;
    17ac:	e1 e3       	ldi	r30, 0x31	; 49
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	10 82       	st	Z, r1
		}
		return ERROR_OK;
    17b2:	1b 82       	std	Y+3, r1	; 0x03
    17b4:	02 c0       	rjmp	.+4      	; 0x17ba <DIO_INIT_PORT+0xac>
	}
	else
	{
		return ERROR_NOK;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	8b 83       	std	Y+3, r24	; 0x03
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	cf 91       	pop	r28
    17c4:	df 91       	pop	r29
    17c6:	08 95       	ret

000017c8 <DIO_Write_pin>:
uint8_t DIO_Write_pin (uint8_t Pin_Number, uint8_t Data)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <DIO_Write_pin+0x6>
    17ce:	0f 92       	push	r0
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	89 83       	std	Y+1, r24	; 0x01
    17d6:	6a 83       	std	Y+2, r22	; 0x02
	if((Pin_Number>=A0) && (Pin_Number<=A7))
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	88 30       	cpi	r24, 0x08	; 8
    17dc:	78 f5       	brcc	.+94     	; 0x183c <DIO_Write_pin+0x74>
	{
		if(Data == HIGH)
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	81 30       	cpi	r24, 0x01	; 1
    17e2:	99 f4       	brne	.+38     	; 0x180a <DIO_Write_pin+0x42>
		{
			SET_BIT(PORTA,Pin_Number);
    17e4:	ab e3       	ldi	r26, 0x3B	; 59
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	eb e3       	ldi	r30, 0x3B	; 59
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_Write_pin+0x3a>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_Write_pin+0x36>
    1806:	84 2b       	or	r24, r20
    1808:	8c 93       	st	X, r24
		}
		if(Data == LOW)
    180a:	8a 81       	ldd	r24, Y+2	; 0x02
    180c:	88 23       	and	r24, r24
    180e:	a1 f4       	brne	.+40     	; 0x1838 <DIO_Write_pin+0x70>
		{
			CLEAR_BIT(PORTA, Pin_Number);
    1810:	ab e3       	ldi	r26, 0x3B	; 59
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	eb e3       	ldi	r30, 0x3B	; 59
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	89 81       	ldd	r24, Y+1	; 0x01
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <DIO_Write_pin+0x66>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <DIO_Write_pin+0x62>
    1832:	80 95       	com	r24
    1834:	84 23       	and	r24, r20
    1836:	8c 93       	st	X, r24
		}
		return ERROR_OK;
    1838:	1b 82       	std	Y+3, r1	; 0x03
    183a:	b3 c0       	rjmp	.+358    	; 0x19a2 <DIO_Write_pin+0x1da>
	}
	if((Pin_Number>=B0) && (Pin_Number<=B7))
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	88 30       	cpi	r24, 0x08	; 8
    1840:	c0 f1       	brcs	.+112    	; 0x18b2 <DIO_Write_pin+0xea>
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	80 31       	cpi	r24, 0x10	; 16
    1846:	a8 f5       	brcc	.+106    	; 0x18b2 <DIO_Write_pin+0xea>
	{
		if(Data==HIGH)
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	81 30       	cpi	r24, 0x01	; 1
    184c:	b1 f4       	brne	.+44     	; 0x187a <DIO_Write_pin+0xb2>
		{
			SET_BIT(PORTB,(Pin_Number%8));
    184e:	a8 e3       	ldi	r26, 0x38	; 56
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	e8 e3       	ldi	r30, 0x38	; 56
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 81       	ld	r24, Z
    1858:	48 2f       	mov	r20, r24
    185a:	89 81       	ldd	r24, Y+1	; 0x01
    185c:	88 2f       	mov	r24, r24
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	9c 01       	movw	r18, r24
    1862:	27 70       	andi	r18, 0x07	; 7
    1864:	30 70       	andi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_Write_pin+0xaa>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_Write_pin+0xa6>
    1876:	84 2b       	or	r24, r20
    1878:	8c 93       	st	X, r24
		}
		if(Data==LOW)
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	88 23       	and	r24, r24
    187e:	b9 f4       	brne	.+46     	; 0x18ae <DIO_Write_pin+0xe6>
		{
			CLEAR_BIT(PORTB, (Pin_Number%8));
    1880:	a8 e3       	ldi	r26, 0x38	; 56
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e8 e3       	ldi	r30, 0x38	; 56
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	48 2f       	mov	r20, r24
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	9c 01       	movw	r18, r24
    1894:	27 70       	andi	r18, 0x07	; 7
    1896:	30 70       	andi	r19, 0x00	; 0
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 2e       	mov	r0, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <DIO_Write_pin+0xdc>
    18a0:	88 0f       	add	r24, r24
    18a2:	99 1f       	adc	r25, r25
    18a4:	0a 94       	dec	r0
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <DIO_Write_pin+0xd8>
    18a8:	80 95       	com	r24
    18aa:	84 23       	and	r24, r20
    18ac:	8c 93       	st	X, r24
		}
		return ERROR_OK;
    18ae:	1b 82       	std	Y+3, r1	; 0x03
    18b0:	78 c0       	rjmp	.+240    	; 0x19a2 <DIO_Write_pin+0x1da>
	}
	if((Pin_Number>=C0) && (Pin_Number<=C7))
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
    18b4:	80 31       	cpi	r24, 0x10	; 16
    18b6:	c0 f1       	brcs	.+112    	; 0x1928 <DIO_Write_pin+0x160>
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	88 31       	cpi	r24, 0x18	; 24
    18bc:	a8 f5       	brcc	.+106    	; 0x1928 <DIO_Write_pin+0x160>
	{

		if(Data==HIGH)
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	b1 f4       	brne	.+44     	; 0x18f0 <DIO_Write_pin+0x128>
		{
			SET_BIT(PORTC,Pin_Number%8);
    18c4:	a5 e3       	ldi	r26, 0x35	; 53
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e5 e3       	ldi	r30, 0x35	; 53
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	48 2f       	mov	r20, r24
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9c 01       	movw	r18, r24
    18d8:	27 70       	andi	r18, 0x07	; 7
    18da:	30 70       	andi	r19, 0x00	; 0
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 2e       	mov	r0, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <DIO_Write_pin+0x120>
    18e4:	88 0f       	add	r24, r24
    18e6:	99 1f       	adc	r25, r25
    18e8:	0a 94       	dec	r0
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <DIO_Write_pin+0x11c>
    18ec:	84 2b       	or	r24, r20
    18ee:	8c 93       	st	X, r24
		}
		if(Data==LOW)
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	88 23       	and	r24, r24
    18f4:	b9 f4       	brne	.+46     	; 0x1924 <DIO_Write_pin+0x15c>
		{
			CLEAR_BIT(PORTC,Pin_Number%8);
    18f6:	a5 e3       	ldi	r26, 0x35	; 53
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e5 e3       	ldi	r30, 0x35	; 53
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	9c 01       	movw	r18, r24
    190a:	27 70       	andi	r18, 0x07	; 7
    190c:	30 70       	andi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <DIO_Write_pin+0x152>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <DIO_Write_pin+0x14e>
    191e:	80 95       	com	r24
    1920:	84 23       	and	r24, r20
    1922:	8c 93       	st	X, r24
		}
		return ERROR_OK;
    1924:	1b 82       	std	Y+3, r1	; 0x03
    1926:	3d c0       	rjmp	.+122    	; 0x19a2 <DIO_Write_pin+0x1da>
	}
	if((Pin_Number>=D0) && (Pin_Number<=D7))
    1928:	89 81       	ldd	r24, Y+1	; 0x01
    192a:	88 31       	cpi	r24, 0x18	; 24
    192c:	c0 f1       	brcs	.+112    	; 0x199e <DIO_Write_pin+0x1d6>
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	80 32       	cpi	r24, 0x20	; 32
    1932:	a8 f5       	brcc	.+106    	; 0x199e <DIO_Write_pin+0x1d6>
	{
		if(Data==HIGH)
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	b1 f4       	brne	.+44     	; 0x1966 <DIO_Write_pin+0x19e>
		{
			SET_BIT(PORTD,(Pin_Number%8));
    193a:	a2 e3       	ldi	r26, 0x32	; 50
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e2 e3       	ldi	r30, 0x32	; 50
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	9c 01       	movw	r18, r24
    194e:	27 70       	andi	r18, 0x07	; 7
    1950:	30 70       	andi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <DIO_Write_pin+0x196>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <DIO_Write_pin+0x192>
    1962:	84 2b       	or	r24, r20
    1964:	8c 93       	st	X, r24
		}
		if(Data==LOW)
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	88 23       	and	r24, r24
    196a:	b9 f4       	brne	.+46     	; 0x199a <DIO_Write_pin+0x1d2>
		{
			CLEAR_BIT(PORTD, (Pin_Number%8));
    196c:	a2 e3       	ldi	r26, 0x32	; 50
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e2 e3       	ldi	r30, 0x32	; 50
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	80 81       	ld	r24, Z
    1976:	48 2f       	mov	r20, r24
    1978:	89 81       	ldd	r24, Y+1	; 0x01
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	9c 01       	movw	r18, r24
    1980:	27 70       	andi	r18, 0x07	; 7
    1982:	30 70       	andi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <DIO_Write_pin+0x1c8>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <DIO_Write_pin+0x1c4>
    1994:	80 95       	com	r24
    1996:	84 23       	and	r24, r20
    1998:	8c 93       	st	X, r24
		}
		return ERROR_OK;
    199a:	1b 82       	std	Y+3, r1	; 0x03
    199c:	02 c0       	rjmp	.+4      	; 0x19a2 <DIO_Write_pin+0x1da>
	}
	else
	{
		return ERROR_NOK;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	8b 83       	std	Y+3, r24	; 0x03
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    19a4:	0f 90       	pop	r0
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	cf 91       	pop	r28
    19ac:	df 91       	pop	r29
    19ae:	08 95       	ret

000019b0 <DIO_Read_Pin>:

uint8_t DIO_Read_Pin (uint8_t Pin_Number, volatile uint8_t * ReadData)
{
    19b0:	df 93       	push	r29
    19b2:	cf 93       	push	r28
    19b4:	00 d0       	rcall	.+0      	; 0x19b6 <DIO_Read_Pin+0x6>
    19b6:	00 d0       	rcall	.+0      	; 0x19b8 <DIO_Read_Pin+0x8>
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	7b 83       	std	Y+3, r23	; 0x03
    19c0:	6a 83       	std	Y+2, r22	; 0x02
	if((Pin_Number>=A0) && (Pin_Number<=A7))
    19c2:	89 81       	ldd	r24, Y+1	; 0x01
    19c4:	88 30       	cpi	r24, 0x08	; 8
    19c6:	78 f5       	brcc	.+94     	; 0x1a26 <DIO_Read_Pin+0x76>
	{
		if (BIT_IS_SET(PINA,Pin_Number))
    19c8:	e9 e3       	ldi	r30, 0x39	; 57
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	28 2f       	mov	r18, r24
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	88 2f       	mov	r24, r24
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a9 01       	movw	r20, r18
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <DIO_Read_Pin+0x30>
    19dc:	55 95       	asr	r21
    19de:	47 95       	ror	r20
    19e0:	8a 95       	dec	r24
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <DIO_Read_Pin+0x2c>
    19e4:	ca 01       	movw	r24, r20
    19e6:	81 70       	andi	r24, 0x01	; 1
    19e8:	90 70       	andi	r25, 0x00	; 0
    19ea:	88 23       	and	r24, r24
    19ec:	21 f0       	breq	.+8      	; 0x19f6 <DIO_Read_Pin+0x46>
		{
			*ReadData=1;
    19ee:	ea 81       	ldd	r30, Y+2	; 0x02
    19f0:	fb 81       	ldd	r31, Y+3	; 0x03
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	80 83       	st	Z, r24
		}
		if (BIT_IS_CLEAR(PINA, Pin_Number))
    19f6:	e9 e3       	ldi	r30, 0x39	; 57
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	80 81       	ld	r24, Z
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	a9 01       	movw	r20, r18
    1a08:	02 c0       	rjmp	.+4      	; 0x1a0e <DIO_Read_Pin+0x5e>
    1a0a:	55 95       	asr	r21
    1a0c:	47 95       	ror	r20
    1a0e:	8a 95       	dec	r24
    1a10:	e2 f7       	brpl	.-8      	; 0x1a0a <DIO_Read_Pin+0x5a>
    1a12:	ca 01       	movw	r24, r20
    1a14:	81 70       	andi	r24, 0x01	; 1
    1a16:	90 70       	andi	r25, 0x00	; 0
    1a18:	00 97       	sbiw	r24, 0x00	; 0
    1a1a:	19 f4       	brne	.+6      	; 0x1a22 <DIO_Read_Pin+0x72>
		{
			*ReadData=0;
    1a1c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a1e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a20:	10 82       	st	Z, r1
		}
		return ERROR_OK;
    1a22:	1c 82       	std	Y+4, r1	; 0x04
    1a24:	ad c0       	rjmp	.+346    	; 0x1b80 <DIO_Read_Pin+0x1d0>
	}
	if((Pin_Number>=B0) && (Pin_Number<=B7))
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
    1a28:	88 30       	cpi	r24, 0x08	; 8
    1a2a:	b0 f1       	brcs	.+108    	; 0x1a98 <DIO_Read_Pin+0xe8>
    1a2c:	89 81       	ldd	r24, Y+1	; 0x01
    1a2e:	80 31       	cpi	r24, 0x10	; 16
    1a30:	98 f5       	brcc	.+102    	; 0x1a98 <DIO_Read_Pin+0xe8>
	{
		if (BIT_IS_SET(PINB, (Pin_Number%8)))
    1a32:	e6 e3       	ldi	r30, 0x36	; 54
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	88 2f       	mov	r24, r24
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	87 70       	andi	r24, 0x07	; 7
    1a44:	90 70       	andi	r25, 0x00	; 0
    1a46:	a9 01       	movw	r20, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <DIO_Read_Pin+0x9e>
    1a4a:	55 95       	asr	r21
    1a4c:	47 95       	ror	r20
    1a4e:	8a 95       	dec	r24
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <DIO_Read_Pin+0x9a>
    1a52:	ca 01       	movw	r24, r20
    1a54:	81 70       	andi	r24, 0x01	; 1
    1a56:	90 70       	andi	r25, 0x00	; 0
    1a58:	88 23       	and	r24, r24
    1a5a:	21 f0       	breq	.+8      	; 0x1a64 <DIO_Read_Pin+0xb4>
		{
			*ReadData=1;
    1a5c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a5e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	80 83       	st	Z, r24
		}
		if (BIT_IS_CLEAR(PINB, (Pin_Number%8)))
    1a64:	e6 e3       	ldi	r30, 0x36	; 54
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	28 2f       	mov	r18, r24
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	88 2f       	mov	r24, r24
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	87 70       	andi	r24, 0x07	; 7
    1a76:	90 70       	andi	r25, 0x00	; 0
    1a78:	a9 01       	movw	r20, r18
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <DIO_Read_Pin+0xd0>
    1a7c:	55 95       	asr	r21
    1a7e:	47 95       	ror	r20
    1a80:	8a 95       	dec	r24
    1a82:	e2 f7       	brpl	.-8      	; 0x1a7c <DIO_Read_Pin+0xcc>
    1a84:	ca 01       	movw	r24, r20
    1a86:	81 70       	andi	r24, 0x01	; 1
    1a88:	90 70       	andi	r25, 0x00	; 0
    1a8a:	00 97       	sbiw	r24, 0x00	; 0
    1a8c:	19 f4       	brne	.+6      	; 0x1a94 <DIO_Read_Pin+0xe4>
		{
			*ReadData=0;
    1a8e:	ea 81       	ldd	r30, Y+2	; 0x02
    1a90:	fb 81       	ldd	r31, Y+3	; 0x03
    1a92:	10 82       	st	Z, r1
		}
		return ERROR_OK;
    1a94:	1c 82       	std	Y+4, r1	; 0x04
    1a96:	74 c0       	rjmp	.+232    	; 0x1b80 <DIO_Read_Pin+0x1d0>
	}
	if((Pin_Number>=C0) && (Pin_Number<=C7))
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	80 31       	cpi	r24, 0x10	; 16
    1a9c:	b0 f1       	brcs	.+108    	; 0x1b0a <DIO_Read_Pin+0x15a>
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	88 31       	cpi	r24, 0x18	; 24
    1aa2:	98 f5       	brcc	.+102    	; 0x1b0a <DIO_Read_Pin+0x15a>
	{
		if (BIT_IS_SET(PINC,(Pin_Number%8)))
    1aa4:	e3 e3       	ldi	r30, 0x33	; 51
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	28 2f       	mov	r18, r24
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	88 2f       	mov	r24, r24
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	87 70       	andi	r24, 0x07	; 7
    1ab6:	90 70       	andi	r25, 0x00	; 0
    1ab8:	a9 01       	movw	r20, r18
    1aba:	02 c0       	rjmp	.+4      	; 0x1ac0 <DIO_Read_Pin+0x110>
    1abc:	55 95       	asr	r21
    1abe:	47 95       	ror	r20
    1ac0:	8a 95       	dec	r24
    1ac2:	e2 f7       	brpl	.-8      	; 0x1abc <DIO_Read_Pin+0x10c>
    1ac4:	ca 01       	movw	r24, r20
    1ac6:	81 70       	andi	r24, 0x01	; 1
    1ac8:	90 70       	andi	r25, 0x00	; 0
    1aca:	88 23       	and	r24, r24
    1acc:	21 f0       	breq	.+8      	; 0x1ad6 <DIO_Read_Pin+0x126>
		{
			*ReadData=1;
    1ace:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	80 83       	st	Z, r24
		}
		if (BIT_IS_CLEAR(PINC, (Pin_Number%8)))
    1ad6:	e3 e3       	ldi	r30, 0x33	; 51
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	89 81       	ldd	r24, Y+1	; 0x01
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	87 70       	andi	r24, 0x07	; 7
    1ae8:	90 70       	andi	r25, 0x00	; 0
    1aea:	a9 01       	movw	r20, r18
    1aec:	02 c0       	rjmp	.+4      	; 0x1af2 <DIO_Read_Pin+0x142>
    1aee:	55 95       	asr	r21
    1af0:	47 95       	ror	r20
    1af2:	8a 95       	dec	r24
    1af4:	e2 f7       	brpl	.-8      	; 0x1aee <DIO_Read_Pin+0x13e>
    1af6:	ca 01       	movw	r24, r20
    1af8:	81 70       	andi	r24, 0x01	; 1
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	19 f4       	brne	.+6      	; 0x1b06 <DIO_Read_Pin+0x156>
		{
			*ReadData=0;
    1b00:	ea 81       	ldd	r30, Y+2	; 0x02
    1b02:	fb 81       	ldd	r31, Y+3	; 0x03
    1b04:	10 82       	st	Z, r1
		}
		return ERROR_OK;
    1b06:	1c 82       	std	Y+4, r1	; 0x04
    1b08:	3b c0       	rjmp	.+118    	; 0x1b80 <DIO_Read_Pin+0x1d0>
	}
	if((Pin_Number>=D0) && (Pin_Number<=D7))
    1b0a:	89 81       	ldd	r24, Y+1	; 0x01
    1b0c:	88 31       	cpi	r24, 0x18	; 24
    1b0e:	b0 f1       	brcs	.+108    	; 0x1b7c <DIO_Read_Pin+0x1cc>
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	80 32       	cpi	r24, 0x20	; 32
    1b14:	98 f5       	brcc	.+102    	; 0x1b7c <DIO_Read_Pin+0x1cc>
	{
		if (BIT_IS_SET(PIND,(Pin_Number%8)))
    1b16:	e0 e3       	ldi	r30, 0x30	; 48
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	80 81       	ld	r24, Z
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	89 81       	ldd	r24, Y+1	; 0x01
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	87 70       	andi	r24, 0x07	; 7
    1b28:	90 70       	andi	r25, 0x00	; 0
    1b2a:	a9 01       	movw	r20, r18
    1b2c:	02 c0       	rjmp	.+4      	; 0x1b32 <DIO_Read_Pin+0x182>
    1b2e:	55 95       	asr	r21
    1b30:	47 95       	ror	r20
    1b32:	8a 95       	dec	r24
    1b34:	e2 f7       	brpl	.-8      	; 0x1b2e <DIO_Read_Pin+0x17e>
    1b36:	ca 01       	movw	r24, r20
    1b38:	81 70       	andi	r24, 0x01	; 1
    1b3a:	90 70       	andi	r25, 0x00	; 0
    1b3c:	88 23       	and	r24, r24
    1b3e:	21 f0       	breq	.+8      	; 0x1b48 <DIO_Read_Pin+0x198>
		{
			*ReadData=1;
    1b40:	ea 81       	ldd	r30, Y+2	; 0x02
    1b42:	fb 81       	ldd	r31, Y+3	; 0x03
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	80 83       	st	Z, r24
		}
		if (BIT_IS_CLEAR(PIND, (Pin_Number%8)) )
    1b48:	e0 e3       	ldi	r30, 0x30	; 48
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	28 2f       	mov	r18, r24
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	87 70       	andi	r24, 0x07	; 7
    1b5a:	90 70       	andi	r25, 0x00	; 0
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <DIO_Read_Pin+0x1b4>
    1b60:	55 95       	asr	r21
    1b62:	47 95       	ror	r20
    1b64:	8a 95       	dec	r24
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <DIO_Read_Pin+0x1b0>
    1b68:	ca 01       	movw	r24, r20
    1b6a:	81 70       	andi	r24, 0x01	; 1
    1b6c:	90 70       	andi	r25, 0x00	; 0
    1b6e:	00 97       	sbiw	r24, 0x00	; 0
    1b70:	19 f4       	brne	.+6      	; 0x1b78 <DIO_Read_Pin+0x1c8>
		{
			*ReadData=0;
    1b72:	ea 81       	ldd	r30, Y+2	; 0x02
    1b74:	fb 81       	ldd	r31, Y+3	; 0x03
    1b76:	10 82       	st	Z, r1
		}
		return ERROR_OK;
    1b78:	1c 82       	std	Y+4, r1	; 0x04
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_Read_Pin+0x1d0>
	}
	else
	{
		return ERROR_NOK;
    1b7c:	51 e0       	ldi	r21, 0x01	; 1
    1b7e:	5c 83       	std	Y+4, r21	; 0x04
    1b80:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	0f 90       	pop	r0
    1b8a:	cf 91       	pop	r28
    1b8c:	df 91       	pop	r29
    1b8e:	08 95       	ret

00001b90 <DIO_Write_Port>:
uint8_t DIO_Write_Port (uint8_t Port_Name, uint8_t Data)
{
    1b90:	df 93       	push	r29
    1b92:	cf 93       	push	r28
    1b94:	00 d0       	rcall	.+0      	; 0x1b96 <DIO_Write_Port+0x6>
    1b96:	0f 92       	push	r0
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	89 83       	std	Y+1, r24	; 0x01
    1b9e:	6a 83       	std	Y+2, r22	; 0x02
	if(Port_Name ==PA)
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	88 23       	and	r24, r24
    1ba4:	31 f4       	brne	.+12     	; 0x1bb2 <DIO_Write_Port+0x22>
	{
		PORTA= Data;
    1ba6:	eb e3       	ldi	r30, 0x3B	; 59
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	80 83       	st	Z, r24
		return ERROR_OK;
    1bae:	1b 82       	std	Y+3, r1	; 0x03
    1bb0:	1d c0       	rjmp	.+58     	; 0x1bec <DIO_Write_Port+0x5c>
	}
	if(Port_Name ==PB)
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	81 30       	cpi	r24, 0x01	; 1
    1bb6:	31 f4       	brne	.+12     	; 0x1bc4 <DIO_Write_Port+0x34>
	{
		PORTB= Data;
    1bb8:	e8 e3       	ldi	r30, 0x38	; 56
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	80 83       	st	Z, r24
		return ERROR_OK;
    1bc0:	1b 82       	std	Y+3, r1	; 0x03
    1bc2:	14 c0       	rjmp	.+40     	; 0x1bec <DIO_Write_Port+0x5c>
	}
	if(Port_Name ==PC)
    1bc4:	89 81       	ldd	r24, Y+1	; 0x01
    1bc6:	82 30       	cpi	r24, 0x02	; 2
    1bc8:	31 f4       	brne	.+12     	; 0x1bd6 <DIO_Write_Port+0x46>
	{
		PORTC= Data;
    1bca:	e5 e3       	ldi	r30, 0x35	; 53
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd0:	80 83       	st	Z, r24
		return ERROR_OK;
    1bd2:	1b 82       	std	Y+3, r1	; 0x03
    1bd4:	0b c0       	rjmp	.+22     	; 0x1bec <DIO_Write_Port+0x5c>
	}
	if(Port_Name ==PD)
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	83 30       	cpi	r24, 0x03	; 3
    1bda:	31 f4       	brne	.+12     	; 0x1be8 <DIO_Write_Port+0x58>
	{
		PORTD= Data;
    1bdc:	e2 e3       	ldi	r30, 0x32	; 50
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	8a 81       	ldd	r24, Y+2	; 0x02
    1be2:	80 83       	st	Z, r24
		return ERROR_OK;
    1be4:	1b 82       	std	Y+3, r1	; 0x03
    1be6:	02 c0       	rjmp	.+4      	; 0x1bec <DIO_Write_Port+0x5c>
	}
	else{
		return ERROR_NOK;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	8b 83       	std	Y+3, r24	; 0x03
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	08 95       	ret

00001bfa <DIO_Read_Port>:

uint8_t DIO_Read_Port (uint8_t Port_Name, volatile uint8_t * ReadData)
{
    1bfa:	df 93       	push	r29
    1bfc:	cf 93       	push	r28
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <DIO_Read_Port+0x6>
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <DIO_Read_Port+0x8>
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	7b 83       	std	Y+3, r23	; 0x03
    1c0a:	6a 83       	std	Y+2, r22	; 0x02
	if(Port_Name ==PA)
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	88 23       	and	r24, r24
    1c10:	41 f4       	brne	.+16     	; 0x1c22 <DIO_Read_Port+0x28>
	{
		*ReadData= PINA;
    1c12:	e9 e3       	ldi	r30, 0x39	; 57
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	ea 81       	ldd	r30, Y+2	; 0x02
    1c1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1c1c:	80 83       	st	Z, r24
		return ERROR_OK;
    1c1e:	1c 82       	std	Y+4, r1	; 0x04
    1c20:	23 c0       	rjmp	.+70     	; 0x1c68 <DIO_Read_Port+0x6e>
	}
	else if(Port_Name ==PB)
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	41 f4       	brne	.+16     	; 0x1c38 <DIO_Read_Port+0x3e>
	{
		*ReadData= PINB;
    1c28:	e6 e3       	ldi	r30, 0x36	; 54
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    1c30:	fb 81       	ldd	r31, Y+3	; 0x03
    1c32:	80 83       	st	Z, r24
		return ERROR_OK;
    1c34:	1c 82       	std	Y+4, r1	; 0x04
    1c36:	18 c0       	rjmp	.+48     	; 0x1c68 <DIO_Read_Port+0x6e>
	}
	else if(Port_Name ==PC)
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	82 30       	cpi	r24, 0x02	; 2
    1c3c:	41 f4       	brne	.+16     	; 0x1c4e <DIO_Read_Port+0x54>
	{
		*ReadData= PINC;
    1c3e:	e3 e3       	ldi	r30, 0x33	; 51
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	ea 81       	ldd	r30, Y+2	; 0x02
    1c46:	fb 81       	ldd	r31, Y+3	; 0x03
    1c48:	80 83       	st	Z, r24
		return ERROR_OK;
    1c4a:	1c 82       	std	Y+4, r1	; 0x04
    1c4c:	0d c0       	rjmp	.+26     	; 0x1c68 <DIO_Read_Port+0x6e>
	}
	else if(Port_Name ==PD)
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	83 30       	cpi	r24, 0x03	; 3
    1c52:	41 f4       	brne	.+16     	; 0x1c64 <DIO_Read_Port+0x6a>
	{
		*ReadData= PIND;
    1c54:	e0 e3       	ldi	r30, 0x30	; 48
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1c5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1c5e:	80 83       	st	Z, r24
		return ERROR_OK;
    1c60:	1c 82       	std	Y+4, r1	; 0x04
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <DIO_Read_Port+0x6e>
	}
	else
	{
		return ERROR_NOK;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	8c 83       	std	Y+4, r24	; 0x04
    1c68:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	08 95       	ret

00001c78 <DIO_Activate_Pullup>:

uint8_t DIO_Activate_Pullup (uint8_t Pin_Number)
{
    1c78:	df 93       	push	r29
    1c7a:	cf 93       	push	r28
    1c7c:	00 d0       	rcall	.+0      	; 0x1c7e <DIO_Activate_Pullup+0x6>
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	89 83       	std	Y+1, r24	; 0x01
	if((Pin_Number>=A0) && (Pin_Number<=A7))
    1c84:	89 81       	ldd	r24, Y+1	; 0x01
    1c86:	88 30       	cpi	r24, 0x08	; 8
    1c88:	a8 f4       	brcc	.+42     	; 0x1cb4 <DIO_Activate_Pullup+0x3c>
	{
		SET_BIT(PORTA, Pin_Number);
    1c8a:	ab e3       	ldi	r26, 0x3B	; 59
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	eb e3       	ldi	r30, 0x3B	; 59
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	48 2f       	mov	r20, r24
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <DIO_Activate_Pullup+0x30>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <DIO_Activate_Pullup+0x2c>
    1cac:	84 2b       	or	r24, r20
    1cae:	8c 93       	st	X, r24
		return ERROR_OK;
    1cb0:	1a 82       	std	Y+2, r1	; 0x02
    1cb2:	62 c0       	rjmp	.+196    	; 0x1d78 <DIO_Activate_Pullup+0x100>
	}
	if((Pin_Number>=B0) && (Pin_Number<=B7))
    1cb4:	89 81       	ldd	r24, Y+1	; 0x01
    1cb6:	88 30       	cpi	r24, 0x08	; 8
    1cb8:	e8 f0       	brcs	.+58     	; 0x1cf4 <DIO_Activate_Pullup+0x7c>
    1cba:	89 81       	ldd	r24, Y+1	; 0x01
    1cbc:	80 31       	cpi	r24, 0x10	; 16
    1cbe:	d0 f4       	brcc	.+52     	; 0x1cf4 <DIO_Activate_Pullup+0x7c>
	{
		SET_BIT(PORTB, ((Pin_Number%8)-1));
    1cc0:	a8 e3       	ldi	r26, 0x38	; 56
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e8 e3       	ldi	r30, 0x38	; 56
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	89 81       	ldd	r24, Y+1	; 0x01
    1cce:	88 2f       	mov	r24, r24
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	87 70       	andi	r24, 0x07	; 7
    1cd4:	90 70       	andi	r25, 0x00	; 0
    1cd6:	9c 01       	movw	r18, r24
    1cd8:	21 50       	subi	r18, 0x01	; 1
    1cda:	30 40       	sbci	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 2e       	mov	r0, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <DIO_Activate_Pullup+0x70>
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	0a 94       	dec	r0
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <DIO_Activate_Pullup+0x6c>
    1cec:	84 2b       	or	r24, r20
    1cee:	8c 93       	st	X, r24
		return ERROR_OK;
    1cf0:	1a 82       	std	Y+2, r1	; 0x02
    1cf2:	42 c0       	rjmp	.+132    	; 0x1d78 <DIO_Activate_Pullup+0x100>
	}
	if((Pin_Number>=C0) && (Pin_Number<=C7))
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	80 31       	cpi	r24, 0x10	; 16
    1cf8:	e8 f0       	brcs	.+58     	; 0x1d34 <DIO_Activate_Pullup+0xbc>
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	88 31       	cpi	r24, 0x18	; 24
    1cfe:	d0 f4       	brcc	.+52     	; 0x1d34 <DIO_Activate_Pullup+0xbc>
	{
		SET_BIT(PORTC, ((Pin_Number%8)-1));
    1d00:	a5 e3       	ldi	r26, 0x35	; 53
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e5 e3       	ldi	r30, 0x35	; 53
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	48 2f       	mov	r20, r24
    1d0c:	89 81       	ldd	r24, Y+1	; 0x01
    1d0e:	88 2f       	mov	r24, r24
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	87 70       	andi	r24, 0x07	; 7
    1d14:	90 70       	andi	r25, 0x00	; 0
    1d16:	9c 01       	movw	r18, r24
    1d18:	21 50       	subi	r18, 0x01	; 1
    1d1a:	30 40       	sbci	r19, 0x00	; 0
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	02 2e       	mov	r0, r18
    1d22:	02 c0       	rjmp	.+4      	; 0x1d28 <DIO_Activate_Pullup+0xb0>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	0a 94       	dec	r0
    1d2a:	e2 f7       	brpl	.-8      	; 0x1d24 <DIO_Activate_Pullup+0xac>
    1d2c:	84 2b       	or	r24, r20
    1d2e:	8c 93       	st	X, r24
		return ERROR_OK;
    1d30:	1a 82       	std	Y+2, r1	; 0x02
    1d32:	22 c0       	rjmp	.+68     	; 0x1d78 <DIO_Activate_Pullup+0x100>
	}
	if((Pin_Number>=D0) && (Pin_Number<=D7))
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	88 31       	cpi	r24, 0x18	; 24
    1d38:	e8 f0       	brcs	.+58     	; 0x1d74 <DIO_Activate_Pullup+0xfc>
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	80 32       	cpi	r24, 0x20	; 32
    1d3e:	d0 f4       	brcc	.+52     	; 0x1d74 <DIO_Activate_Pullup+0xfc>
	{
		SET_BIT(PORTD,((Pin_Number%8)-1));
    1d40:	a2 e3       	ldi	r26, 0x32	; 50
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e2 e3       	ldi	r30, 0x32	; 50
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	48 2f       	mov	r20, r24
    1d4c:	89 81       	ldd	r24, Y+1	; 0x01
    1d4e:	88 2f       	mov	r24, r24
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	87 70       	andi	r24, 0x07	; 7
    1d54:	90 70       	andi	r25, 0x00	; 0
    1d56:	9c 01       	movw	r18, r24
    1d58:	21 50       	subi	r18, 0x01	; 1
    1d5a:	30 40       	sbci	r19, 0x00	; 0
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	02 2e       	mov	r0, r18
    1d62:	02 c0       	rjmp	.+4      	; 0x1d68 <DIO_Activate_Pullup+0xf0>
    1d64:	88 0f       	add	r24, r24
    1d66:	99 1f       	adc	r25, r25
    1d68:	0a 94       	dec	r0
    1d6a:	e2 f7       	brpl	.-8      	; 0x1d64 <DIO_Activate_Pullup+0xec>
    1d6c:	84 2b       	or	r24, r20
    1d6e:	8c 93       	st	X, r24
		return ERROR_OK;
    1d70:	1a 82       	std	Y+2, r1	; 0x02
    1d72:	02 c0       	rjmp	.+4      	; 0x1d78 <DIO_Activate_Pullup+0x100>
	}
	else
	{
		return ERROR_NOK;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	8a 83       	std	Y+2, r24	; 0x02
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	cf 91       	pop	r28
    1d80:	df 91       	pop	r29
    1d82:	08 95       	ret

00001d84 <DIO_Diactivate_Pullup>:
uint8_t DIO_Diactivate_Pullup (uint8_t Pin_Number)
{
    1d84:	df 93       	push	r29
    1d86:	cf 93       	push	r28
    1d88:	00 d0       	rcall	.+0      	; 0x1d8a <DIO_Diactivate_Pullup+0x6>
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	89 83       	std	Y+1, r24	; 0x01
	if((Pin_Number>=A0) && (Pin_Number<A7))
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	87 30       	cpi	r24, 0x07	; 7
    1d94:	b0 f4       	brcc	.+44     	; 0x1dc2 <DIO_Diactivate_Pullup+0x3e>
	{
		CLEAR_BIT(PORTA, Pin_Number);
    1d96:	ab e3       	ldi	r26, 0x3B	; 59
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	eb e3       	ldi	r30, 0x3B	; 59
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	80 81       	ld	r24, Z
    1da0:	48 2f       	mov	r20, r24
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 2e       	mov	r0, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_Diactivate_Pullup+0x30>
    1db0:	88 0f       	add	r24, r24
    1db2:	99 1f       	adc	r25, r25
    1db4:	0a 94       	dec	r0
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <DIO_Diactivate_Pullup+0x2c>
    1db8:	80 95       	com	r24
    1dba:	84 23       	and	r24, r20
    1dbc:	8c 93       	st	X, r24
		return ERROR_OK;
    1dbe:	1a 82       	std	Y+2, r1	; 0x02
    1dc0:	65 c0       	rjmp	.+202    	; 0x1e8c <DIO_Diactivate_Pullup+0x108>
	}
	if((Pin_Number>=B0) && (Pin_Number<=B7))
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	88 30       	cpi	r24, 0x08	; 8
    1dc6:	f0 f0       	brcs	.+60     	; 0x1e04 <DIO_Diactivate_Pullup+0x80>
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	80 31       	cpi	r24, 0x10	; 16
    1dcc:	d8 f4       	brcc	.+54     	; 0x1e04 <DIO_Diactivate_Pullup+0x80>
	{
		CLEAR_BIT(PORTB, ((Pin_Number%8)-1));
    1dce:	a8 e3       	ldi	r26, 0x38	; 56
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e8 e3       	ldi	r30, 0x38	; 56
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	48 2f       	mov	r20, r24
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	87 70       	andi	r24, 0x07	; 7
    1de2:	90 70       	andi	r25, 0x00	; 0
    1de4:	9c 01       	movw	r18, r24
    1de6:	21 50       	subi	r18, 0x01	; 1
    1de8:	30 40       	sbci	r19, 0x00	; 0
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 2e       	mov	r0, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <DIO_Diactivate_Pullup+0x72>
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	0a 94       	dec	r0
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <DIO_Diactivate_Pullup+0x6e>
    1dfa:	80 95       	com	r24
    1dfc:	84 23       	and	r24, r20
    1dfe:	8c 93       	st	X, r24
		return ERROR_OK;
    1e00:	1a 82       	std	Y+2, r1	; 0x02
    1e02:	44 c0       	rjmp	.+136    	; 0x1e8c <DIO_Diactivate_Pullup+0x108>
	}
	if((Pin_Number>=C0) && (Pin_Number<=C7))
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	80 31       	cpi	r24, 0x10	; 16
    1e08:	f0 f0       	brcs	.+60     	; 0x1e46 <DIO_Diactivate_Pullup+0xc2>
    1e0a:	89 81       	ldd	r24, Y+1	; 0x01
    1e0c:	88 31       	cpi	r24, 0x18	; 24
    1e0e:	d8 f4       	brcc	.+54     	; 0x1e46 <DIO_Diactivate_Pullup+0xc2>
	{
		CLEAR_BIT(PORTC, ((Pin_Number%8)-1));
    1e10:	a5 e3       	ldi	r26, 0x35	; 53
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e5 e3       	ldi	r30, 0x35	; 53
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	88 2f       	mov	r24, r24
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	87 70       	andi	r24, 0x07	; 7
    1e24:	90 70       	andi	r25, 0x00	; 0
    1e26:	9c 01       	movw	r18, r24
    1e28:	21 50       	subi	r18, 0x01	; 1
    1e2a:	30 40       	sbci	r19, 0x00	; 0
    1e2c:	81 e0       	ldi	r24, 0x01	; 1
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	02 2e       	mov	r0, r18
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <DIO_Diactivate_Pullup+0xb4>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <DIO_Diactivate_Pullup+0xb0>
    1e3c:	80 95       	com	r24
    1e3e:	84 23       	and	r24, r20
    1e40:	8c 93       	st	X, r24
		return ERROR_OK;
    1e42:	1a 82       	std	Y+2, r1	; 0x02
    1e44:	23 c0       	rjmp	.+70     	; 0x1e8c <DIO_Diactivate_Pullup+0x108>
	}
	if((Pin_Number>=D0) && (Pin_Number<=D7))
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	88 31       	cpi	r24, 0x18	; 24
    1e4a:	f0 f0       	brcs	.+60     	; 0x1e88 <DIO_Diactivate_Pullup+0x104>
    1e4c:	89 81       	ldd	r24, Y+1	; 0x01
    1e4e:	80 32       	cpi	r24, 0x20	; 32
    1e50:	d8 f4       	brcc	.+54     	; 0x1e88 <DIO_Diactivate_Pullup+0x104>
	{
		CLEAR_BIT(PORTD, ((Pin_Number%8)-1));
    1e52:	a2 e3       	ldi	r26, 0x32	; 50
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	e2 e3       	ldi	r30, 0x32	; 50
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	87 70       	andi	r24, 0x07	; 7
    1e66:	90 70       	andi	r25, 0x00	; 0
    1e68:	9c 01       	movw	r18, r24
    1e6a:	21 50       	subi	r18, 0x01	; 1
    1e6c:	30 40       	sbci	r19, 0x00	; 0
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	02 2e       	mov	r0, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <DIO_Diactivate_Pullup+0xf6>
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	0a 94       	dec	r0
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <DIO_Diactivate_Pullup+0xf2>
    1e7e:	80 95       	com	r24
    1e80:	84 23       	and	r24, r20
    1e82:	8c 93       	st	X, r24
		return ERROR_OK;
    1e84:	1a 82       	std	Y+2, r1	; 0x02
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <DIO_Diactivate_Pullup+0x108>
	}
	else
	{
		return ERROR_NOK;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	8a 83       	std	Y+2, r24	; 0x02
    1e8c:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1e8e:	0f 90       	pop	r0
    1e90:	0f 90       	pop	r0
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void){
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <KeyPad_getPressedKey+0x6>
    1e9e:	0f 92       	push	r0
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62

	uint8_t col,row;
	uint8_t u8_val=0;
    1ea4:	19 82       	std	Y+1, r1	; 0x01
	for(col=0;col<N_col;col++) /* loop for columns */
    1ea6:	1b 82       	std	Y+3, r1	; 0x03
    1ea8:	49 c0       	rjmp	.+146    	; 0x1f3c <KeyPad_getPressedKey+0xa4>
	{
		/*
		 * each time only one of the column pins will be output and
		 * the rest will be input pins include the row pins
		 */
		KEYPAD_PORT_DIR = (0b00010000<<col);
    1eaa:	e4 e3       	ldi	r30, 0x34	; 52
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	80 e1       	ldi	r24, 0x10	; 16
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <KeyPad_getPressedKey+0x26>
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	2a 95       	dec	r18
    1ec0:	e2 f7       	brpl	.-8      	; 0x1eba <KeyPad_getPressedKey+0x22>
    1ec2:	80 83       	st	Z, r24

		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(0b00010000<<col));
    1ec4:	e5 e3       	ldi	r30, 0x35	; 53
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	80 e1       	ldi	r24, 0x10	; 16
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <KeyPad_getPressedKey+0x42>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <KeyPad_getPressedKey+0x3e>
    1ede:	80 95       	com	r24
    1ee0:	80 83       	st	Z, r24
		for(row=0;row<(N_row);row++) /* loop for rows */
    1ee2:	1a 82       	std	Y+2, r1	; 0x02
    1ee4:	25 c0       	rjmp	.+74     	; 0x1f30 <KeyPad_getPressedKey+0x98>
		{
			if(BIT_IS_CLEAR(KEYPAD_PORT_IN,(row))) /* if the switch is press in this row */
    1ee6:	e3 e3       	ldi	r30, 0x33	; 51
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	28 2f       	mov	r18, r24
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	88 2f       	mov	r24, r24
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a9 01       	movw	r20, r18
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <KeyPad_getPressedKey+0x66>
    1efa:	55 95       	asr	r21
    1efc:	47 95       	ror	r20
    1efe:	8a 95       	dec	r24
    1f00:	e2 f7       	brpl	.-8      	; 0x1efa <KeyPad_getPressedKey+0x62>
    1f02:	ca 01       	movw	r24, r20
    1f04:	81 70       	andi	r24, 0x01	; 1
    1f06:	90 70       	andi	r25, 0x00	; 0
    1f08:	00 97       	sbiw	r24, 0x00	; 0
    1f0a:	79 f4       	brne	.+30     	; 0x1f2a <KeyPad_getPressedKey+0x92>
			{
#if (N_col == 3)
				u8_val= KeyPad_4x3_adjustKeyNumber ((row*N_col)+col+1);
    1f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0e:	28 2f       	mov	r18, r24
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	c9 01       	movw	r24, r18
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	82 0f       	add	r24, r18
    1f1a:	93 1f       	adc	r25, r19
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f20:	89 0f       	add	r24, r25
    1f22:	8f 5f       	subi	r24, 0xFF	; 255
    1f24:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <KeyPad_4x3_adjustKeyNumber>
    1f28:	89 83       	std	Y+1, r24	; 0x01
		/*
		 * clear the output pin column in this trace and enable the internal
		 * pull up resistors for the rows pins
		 */
		KEYPAD_PORT_OUT = (~(0b00010000<<col));
		for(row=0;row<(N_row);row++) /* loop for rows */
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	8f 5f       	subi	r24, 0xFF	; 255
    1f2e:	8a 83       	std	Y+2, r24	; 0x02
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	84 30       	cpi	r24, 0x04	; 4
    1f34:	c0 f2       	brcs	.-80     	; 0x1ee6 <KeyPad_getPressedKey+0x4e>
 *******************************************************************************/
uint8_t KeyPad_getPressedKey(void){

	uint8_t col,row;
	uint8_t u8_val=0;
	for(col=0;col<N_col;col++) /* loop for columns */
    1f36:	8b 81       	ldd	r24, Y+3	; 0x03
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	8b 83       	std	Y+3, r24	; 0x03
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	83 30       	cpi	r24, 0x03	; 3
    1f40:	08 f4       	brcc	.+2      	; 0x1f44 <KeyPad_getPressedKey+0xac>
    1f42:	b3 cf       	rjmp	.-154    	; 0x1eaa <KeyPad_getPressedKey+0x12>
				return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
#endif
			}
		}
	}
	return u8_val;
    1f44:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	cf 91       	pop	r28
    1f4e:	df 91       	pop	r29
    1f50:	08 95       	ret

00001f52 <KeyPad_4x3_adjustKeyNumber>:

#if (N_col == 3)

static uint8_t KeyPad_4x3_adjustKeyNumber(uint8_t button_number)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <KeyPad_4x3_adjustKeyNumber+0x6>
    1f58:	00 d0       	rcall	.+0      	; 0x1f5a <KeyPad_4x3_adjustKeyNumber+0x8>
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	3c 83       	std	Y+4, r19	; 0x04
    1f68:	2b 83       	std	Y+3, r18	; 0x03
    1f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f6e:	8a 30       	cpi	r24, 0x0A	; 10
    1f70:	91 05       	cpc	r25, r1
    1f72:	81 f0       	breq	.+32     	; 0x1f94 <KeyPad_4x3_adjustKeyNumber+0x42>
    1f74:	2b 81       	ldd	r18, Y+3	; 0x03
    1f76:	3c 81       	ldd	r19, Y+4	; 0x04
    1f78:	2a 30       	cpi	r18, 0x0A	; 10
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	9c f0       	brlt	.+38     	; 0x1fa4 <KeyPad_4x3_adjustKeyNumber+0x52>
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	8b 30       	cpi	r24, 0x0B	; 11
    1f84:	91 05       	cpc	r25, r1
    1f86:	49 f0       	breq	.+18     	; 0x1f9a <KeyPad_4x3_adjustKeyNumber+0x48>
    1f88:	2b 81       	ldd	r18, Y+3	; 0x03
    1f8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f8c:	2c 30       	cpi	r18, 0x0C	; 12
    1f8e:	31 05       	cpc	r19, r1
    1f90:	31 f0       	breq	.+12     	; 0x1f9e <KeyPad_4x3_adjustKeyNumber+0x4c>
    1f92:	08 c0       	rjmp	.+16     	; 0x1fa4 <KeyPad_4x3_adjustKeyNumber+0x52>
	{
		case 10: return '*'; // ASCII Code of =
    1f94:	3a e2       	ldi	r19, 0x2A	; 42
    1f96:	3a 83       	std	Y+2, r19	; 0x02
    1f98:	07 c0       	rjmp	.+14     	; 0x1fa8 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 11: return 0;
    1f9a:	1a 82       	std	Y+2, r1	; 0x02
    1f9c:	05 c0       	rjmp	.+10     	; 0x1fa8 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		case 12: return '#'; // ASCII Code of +
    1f9e:	83 e2       	ldi	r24, 0x23	; 35
    1fa0:	8a 83       	std	Y+2, r24	; 0x02
    1fa2:	02 c0       	rjmp	.+4      	; 0x1fa8 <KeyPad_4x3_adjustKeyNumber+0x56>
				 break;
		default: return button_number;
    1fa4:	99 81       	ldd	r25, Y+1	; 0x01
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <LCD_init>:

static uint8_t u8_buff[16]; /* String to hold the ascii result */
static uint8_t gu8_int_flag=NULL;

ERROR_TYPE_t LCD_init(void)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <LCD_init+0x6>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
	uint8_t au8_error=NULL;
    1fc4:	19 82       	std	Y+1, r1	; 0x01
	switch(gu8_INIT_Cases)
    1fc6:	80 91 17 03 	lds	r24, 0x0317
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	3b 83       	std	Y+3, r19	; 0x03
    1fd0:	2a 83       	std	Y+2, r18	; 0x02
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	91 05       	cpc	r25, r1
    1fda:	c1 f1       	breq	.+112    	; 0x204c <LCD_init+0x94>
    1fdc:	2a 81       	ldd	r18, Y+2	; 0x02
    1fde:	3b 81       	ldd	r19, Y+3	; 0x03
    1fe0:	22 30       	cpi	r18, 0x02	; 2
    1fe2:	31 05       	cpc	r19, r1
    1fe4:	2c f4       	brge	.+10     	; 0x1ff0 <LCD_init+0x38>
    1fe6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fea:	00 97       	sbiw	r24, 0x00	; 0
    1fec:	69 f0       	breq	.+26     	; 0x2008 <LCD_init+0x50>
    1fee:	5b c0       	rjmp	.+182    	; 0x20a6 <LCD_init+0xee>
    1ff0:	2a 81       	ldd	r18, Y+2	; 0x02
    1ff2:	3b 81       	ldd	r19, Y+3	; 0x03
    1ff4:	22 30       	cpi	r18, 0x02	; 2
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	e9 f1       	breq	.+122    	; 0x2074 <LCD_init+0xbc>
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffe:	83 30       	cpi	r24, 0x03	; 3
    2000:	91 05       	cpc	r25, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <LCD_init+0x4e>
    2004:	4b c0       	rjmp	.+150    	; 0x209c <LCD_init+0xe4>
    2006:	4f c0       	rjmp	.+158    	; 0x20a6 <LCD_init+0xee>
	{
	case INIT_CASE_0:
		LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW);
    2008:	aa e3       	ldi	r26, 0x3A	; 58
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	ea e3       	ldi	r30, 0x3A	; 58
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	80 81       	ld	r24, Z
    2012:	8e 60       	ori	r24, 0x0E	; 14
    2014:	8c 93       	st	X, r24
#if (DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_PINS
		LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
    2016:	aa e3       	ldi	r26, 0x3A	; 58
    2018:	b0 e0       	ldi	r27, 0x00	; 0
    201a:	ea e3       	ldi	r30, 0x3A	; 58
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	80 6f       	ori	r24, 0xF0	; 240
    2022:	8c 93       	st	X, r24
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    2024:	82 e0       	ldi	r24, 0x02	; 2
    2026:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
#endif
#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
#endif
		gu8_INIT_flag++;
    202a:	80 91 18 03 	lds	r24, 0x0318
    202e:	8f 5f       	subi	r24, 0xFF	; 255
    2030:	80 93 18 03 	sts	0x0318, r24
		if(gu8_INIT_flag==8)
    2034:	80 91 18 03 	lds	r24, 0x0318
    2038:	88 30       	cpi	r24, 0x08	; 8
    203a:	29 f4       	brne	.+10     	; 0x2046 <LCD_init+0x8e>
		{
			gu8_INIT_flag=NULL;
    203c:	10 92 18 03 	sts	0x0318, r1
			gu8_INIT_Cases=INIT_CASE_1;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	80 93 17 03 	sts	0x0317, r24
		}
		au8_error=INIT_MODE_BITS_COMMAND;
    2046:	81 e0       	ldi	r24, 0x01	; 1
    2048:	89 83       	std	Y+1, r24	; 0x01
    204a:	2f c0       	rjmp	.+94     	; 0x20aa <LCD_init+0xf2>
		break;
	case INIT_CASE_1:
		LCD_sendCommand(CURSOR_OFF); /* cursor off */
    204c:	8c e0       	ldi	r24, 0x0C	; 12
    204e:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_INIT_flag++;
    2052:	80 91 18 03 	lds	r24, 0x0318
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	80 93 18 03 	sts	0x0318, r24
		if(gu8_INIT_flag==8)
    205c:	80 91 18 03 	lds	r24, 0x0318
    2060:	88 30       	cpi	r24, 0x08	; 8
    2062:	29 f4       	brne	.+10     	; 0x206e <LCD_init+0xb6>
		{
			gu8_INIT_flag=NULL;
    2064:	10 92 18 03 	sts	0x0318, r1
			gu8_INIT_Cases=INIT_CASE_2;
    2068:	82 e0       	ldi	r24, 0x02	; 2
    206a:	80 93 17 03 	sts	0x0317, r24
		}
		au8_error=INIT_CURSOR_OFF_COMMAND;
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	89 83       	std	Y+1, r24	; 0x01
    2072:	1b c0       	rjmp	.+54     	; 0x20aa <LCD_init+0xf2>
		break;
	case INIT_CASE_2:
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    2074:	88 e2       	ldi	r24, 0x28	; 40
    2076:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
		gu8_INIT_flag++;
    207a:	80 91 18 03 	lds	r24, 0x0318
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	80 93 18 03 	sts	0x0318, r24
		if(gu8_INIT_flag==8)
    2084:	80 91 18 03 	lds	r24, 0x0318
    2088:	88 30       	cpi	r24, 0x08	; 8
    208a:	29 f4       	brne	.+10     	; 0x2096 <LCD_init+0xde>
		{
			gu8_INIT_flag=NULL;
    208c:	10 92 18 03 	sts	0x0318, r1
			gu8_INIT_Cases=INIT_CASE_3;
    2090:	83 e0       	ldi	r24, 0x03	; 3
    2092:	80 93 17 03 	sts	0x0317, r24
		}
		au8_error=INIT_CLEAR_COMMAND_OK;
    2096:	83 e0       	ldi	r24, 0x03	; 3
    2098:	89 83       	std	Y+1, r24	; 0x01
    209a:	07 c0       	rjmp	.+14     	; 0x20aa <LCD_init+0xf2>
		break;
	case INIT_CASE_3:
		au8_error=INIT_LCD_OK;
    209c:	19 82       	std	Y+1, r1	; 0x01
		gu8_INIT_Cases=INIT_CASE_3;
    209e:	83 e0       	ldi	r24, 0x03	; 3
    20a0:	80 93 17 03 	sts	0x0317, r24
    20a4:	02 c0       	rjmp	.+4      	; 0x20aa <LCD_init+0xf2>
		break; ;
	default:
		au8_error=INIT_LCD_NOK;
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return au8_error;
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <LCD_sendCommand>:


ERROR_TYPE_t LCD_sendCommand(uint8_t u8_command)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <LCD_sendCommand+0x6>
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <LCD_sendCommand+0x8>
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_error;
	switch(gu8_Send_Command_Cases)
    20c6:	80 91 19 03 	lds	r24, 0x0319
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	3c 83       	std	Y+4, r19	; 0x04
    20d0:	2b 83       	std	Y+3, r18	; 0x03
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	83 30       	cpi	r24, 0x03	; 3
    20d8:	91 05       	cpc	r25, r1
    20da:	09 f4       	brne	.+2      	; 0x20de <LCD_sendCommand+0x26>
    20dc:	59 c0       	rjmp	.+178    	; 0x2190 <LCD_sendCommand+0xd8>
    20de:	2b 81       	ldd	r18, Y+3	; 0x03
    20e0:	3c 81       	ldd	r19, Y+4	; 0x04
    20e2:	24 30       	cpi	r18, 0x04	; 4
    20e4:	31 05       	cpc	r19, r1
    20e6:	7c f4       	brge	.+30     	; 0x2106 <LCD_sendCommand+0x4e>
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	81 30       	cpi	r24, 0x01	; 1
    20ee:	91 05       	cpc	r25, r1
    20f0:	a9 f1       	breq	.+106    	; 0x215c <LCD_sendCommand+0xa4>
    20f2:	2b 81       	ldd	r18, Y+3	; 0x03
    20f4:	3c 81       	ldd	r19, Y+4	; 0x04
    20f6:	22 30       	cpi	r18, 0x02	; 2
    20f8:	31 05       	cpc	r19, r1
    20fa:	dc f5       	brge	.+118    	; 0x2172 <LCD_sendCommand+0xba>
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	d1 f0       	breq	.+52     	; 0x2138 <LCD_sendCommand+0x80>
    2104:	81 c0       	rjmp	.+258    	; 0x2208 <LCD_sendCommand+0x150>
    2106:	2b 81       	ldd	r18, Y+3	; 0x03
    2108:	3c 81       	ldd	r19, Y+4	; 0x04
    210a:	25 30       	cpi	r18, 0x05	; 5
    210c:	31 05       	cpc	r19, r1
    210e:	09 f4       	brne	.+2      	; 0x2112 <LCD_sendCommand+0x5a>
    2110:	55 c0       	rjmp	.+170    	; 0x21bc <LCD_sendCommand+0x104>
    2112:	8b 81       	ldd	r24, Y+3	; 0x03
    2114:	9c 81       	ldd	r25, Y+4	; 0x04
    2116:	85 30       	cpi	r24, 0x05	; 5
    2118:	91 05       	cpc	r25, r1
    211a:	0c f4       	brge	.+2      	; 0x211e <LCD_sendCommand+0x66>
    211c:	44 c0       	rjmp	.+136    	; 0x21a6 <LCD_sendCommand+0xee>
    211e:	2b 81       	ldd	r18, Y+3	; 0x03
    2120:	3c 81       	ldd	r19, Y+4	; 0x04
    2122:	26 30       	cpi	r18, 0x06	; 6
    2124:	31 05       	cpc	r19, r1
    2126:	09 f4       	brne	.+2      	; 0x212a <LCD_sendCommand+0x72>
    2128:	5f c0       	rjmp	.+190    	; 0x21e8 <LCD_sendCommand+0x130>
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	87 30       	cpi	r24, 0x07	; 7
    2130:	91 05       	cpc	r25, r1
    2132:	09 f4       	brne	.+2      	; 0x2136 <LCD_sendCommand+0x7e>
    2134:	64 c0       	rjmp	.+200    	; 0x21fe <LCD_sendCommand+0x146>
    2136:	68 c0       	rjmp	.+208    	; 0x2208 <LCD_sendCommand+0x150>
	{
	case COMMAND_CASE_0: /************************case_0****************************************/
		CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    2138:	ab e3       	ldi	r26, 0x3B	; 59
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	eb e3       	ldi	r30, 0x3B	; 59
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	8d 7f       	andi	r24, 0xFD	; 253
    2144:	8c 93       	st	X, r24
		CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    2146:	ab e3       	ldi	r26, 0x3B	; 59
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	eb e3       	ldi	r30, 0x3B	; 59
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	8b 7f       	andi	r24, 0xFB	; 251
    2152:	8c 93       	st	X, r24
		gu8_Send_Command_Cases=COMMAND_CASE_1;
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	80 93 19 03 	sts	0x0319, r24
    215a:	58 c0       	rjmp	.+176    	; 0x220c <LCD_sendCommand+0x154>
		//au8_error=COMMAND_CONFIG_OK;
		break;
	case COMMAND_CASE_1: /************************case_1****************************************/
		SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    215c:	ab e3       	ldi	r26, 0x3B	; 59
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	eb e3       	ldi	r30, 0x3B	; 59
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	88 60       	ori	r24, 0x08	; 8
    2168:	8c 93       	st	X, r24
		gu8_Send_Command_Cases=COMMAND_CASE_2;
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	80 93 19 03 	sts	0x0319, r24
    2170:	4d c0       	rjmp	.+154    	; 0x220c <LCD_sendCommand+0x154>
	//	au8_error=COMMAND_ENABLE_OK;
		break;
	case COMMAND_CASE_2: /************************case_2****************************************/
#if (DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_PINS
		LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (u8_command & 0xF0);
    2172:	ab e3       	ldi	r26, 0x3B	; 59
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	eb e3       	ldi	r30, 0x3B	; 59
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	98 2f       	mov	r25, r24
    217e:	9f 70       	andi	r25, 0x0F	; 15
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	80 7f       	andi	r24, 0xF0	; 240
    2184:	89 2b       	or	r24, r25
    2186:	8c 93       	st	X, r24
		LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((u8_command & 0xF0) >> 4);
#endif
#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT = u8_command; /* out the required command to the data bus D0 --> D7 */
#endif
		gu8_Send_Command_Cases=COMMAND_CASE_3;
    2188:	83 e0       	ldi	r24, 0x03	; 3
    218a:	80 93 19 03 	sts	0x0319, r24
    218e:	3e c0       	rjmp	.+124    	; 0x220c <LCD_sendCommand+0x154>
	//	au8_error=COMMAND_SEND_CURRENTLY;
		break;
	case COMMAND_CASE_3: /************************case_3****************************************/
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2190:	ab e3       	ldi	r26, 0x3B	; 59
    2192:	b0 e0       	ldi	r27, 0x00	; 0
    2194:	eb e3       	ldi	r30, 0x3B	; 59
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	80 81       	ld	r24, Z
    219a:	87 7f       	andi	r24, 0xF7	; 247
    219c:	8c 93       	st	X, r24
		gu8_Send_Command_Cases=COMMAND_CASE_4;
    219e:	84 e0       	ldi	r24, 0x04	; 4
    21a0:	80 93 19 03 	sts	0x0319, r24
    21a4:	33 c0       	rjmp	.+102    	; 0x220c <LCD_sendCommand+0x154>
	//	au8_error=COMMAND_SEND_OK;
		break;
	case COMMAND_CASE_4: /************************case_4****************************************/
		SET_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    21a6:	ab e3       	ldi	r26, 0x3B	; 59
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	eb e3       	ldi	r30, 0x3B	; 59
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	88 60       	ori	r24, 0x08	; 8
    21b2:	8c 93       	st	X, r24
		gu8_Send_Command_Cases=COMMAND_CASE_5;
    21b4:	85 e0       	ldi	r24, 0x05	; 5
    21b6:	80 93 19 03 	sts	0x0319, r24
    21ba:	28 c0       	rjmp	.+80     	; 0x220c <LCD_sendCommand+0x154>
	//	au8_error=COMMAND_SEND_OK;
		break;
	case COMMAND_CASE_5: /************************case_5****************************************/
#if (DATA_BITS_MODE == 4)
#ifdef UPPER_PORT_PINS
		LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((u8_command & 0x0F) << 4);
    21bc:	ab e3       	ldi	r26, 0x3B	; 59
    21be:	b0 e0       	ldi	r27, 0x00	; 0
    21c0:	eb e3       	ldi	r30, 0x3B	; 59
    21c2:	f0 e0       	ldi	r31, 0x00	; 0
    21c4:	80 81       	ld	r24, Z
    21c6:	28 2f       	mov	r18, r24
    21c8:	2f 70       	andi	r18, 0x0F	; 15
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	88 2f       	mov	r24, r24
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	82 95       	swap	r24
    21d2:	92 95       	swap	r25
    21d4:	90 7f       	andi	r25, 0xF0	; 240
    21d6:	98 27       	eor	r25, r24
    21d8:	80 7f       	andi	r24, 0xF0	; 240
    21da:	98 27       	eor	r25, r24
    21dc:	82 2b       	or	r24, r18
    21de:	8c 93       	st	X, r24
#else
		LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (u8_command & 0x0F);
#endif
#endif
		gu8_Send_Command_Cases=COMMAND_CASE_6;
    21e0:	86 e0       	ldi	r24, 0x06	; 6
    21e2:	80 93 19 03 	sts	0x0319, r24
    21e6:	12 c0       	rjmp	.+36     	; 0x220c <LCD_sendCommand+0x154>
	//	au8_error=COMMAND_CONFIG_OK;
		break;
	case COMMAND_CASE_6: /************************case_6****************************************/
		CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    21e8:	ab e3       	ldi	r26, 0x3B	; 59
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	eb e3       	ldi	r30, 0x3B	; 59
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	87 7f       	andi	r24, 0xF7	; 247
    21f4:	8c 93       	st	X, r24
		gu8_Send_Command_Cases=COMMAND_CASE_7;
    21f6:	87 e0       	ldi	r24, 0x07	; 7
    21f8:	80 93 19 03 	sts	0x0319, r24
    21fc:	07 c0       	rjmp	.+14     	; 0x220c <LCD_sendCommand+0x154>
	//	au8_error=COMMAND_CONFIG_OK;
		break;
	case COMMAND_CASE_7: /************************case_7****************************************/
		gu8_Send_Command_Cases=COMMAND_CASE_0;
    21fe:	10 92 19 03 	sts	0x0319, r1
		au8_error=100;
    2202:	84 e6       	ldi	r24, 0x64	; 100
    2204:	89 83       	std	Y+1, r24	; 0x01
    2206:	02 c0       	rjmp	.+4      	; 0x220c <LCD_sendCommand+0x154>
		break;
	default:
		au8_error=COMMAND_NOT_DELIEVERED;
    2208:	84 e0       	ldi	r24, 0x04	; 4
    220a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	return au8_error;
    220c:	89 81       	ldd	r24, Y+1	; 0x01
}
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <LCD_displayCharacter>:

ERROR_TYPE_t LCD_displayCharacter(uint8_t u8_data)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	00 d0       	rcall	.+0      	; 0x2222 <LCD_displayCharacter+0x6>
    2222:	00 d0       	rcall	.+0      	; 0x2224 <LCD_displayCharacter+0x8>
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
    2228:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t au8_error=NULL;
    222a:	19 82       	std	Y+1, r1	; 0x01
	if(gu8_INIT_Cases==INIT_CASE_3)
    222c:	80 91 17 03 	lds	r24, 0x0317
    2230:	83 30       	cpi	r24, 0x03	; 3
    2232:	09 f0       	breq	.+2      	; 0x2236 <LCD_displayCharacter+0x1a>
    2234:	ad c0       	rjmp	.+346    	; 0x2390 <LCD_displayCharacter+0x174>
	{
		switch(gu8_display_char_case)
    2236:	80 91 1a 03 	lds	r24, 0x031A
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	3c 83       	std	Y+4, r19	; 0x04
    2240:	2b 83       	std	Y+3, r18	; 0x03
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	83 30       	cpi	r24, 0x03	; 3
    2248:	91 05       	cpc	r25, r1
    224a:	09 f4       	brne	.+2      	; 0x224e <LCD_displayCharacter+0x32>
    224c:	5e c0       	rjmp	.+188    	; 0x230a <LCD_displayCharacter+0xee>
    224e:	2b 81       	ldd	r18, Y+3	; 0x03
    2250:	3c 81       	ldd	r19, Y+4	; 0x04
    2252:	24 30       	cpi	r18, 0x04	; 4
    2254:	31 05       	cpc	r19, r1
    2256:	84 f4       	brge	.+32     	; 0x2278 <LCD_displayCharacter+0x5c>
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	91 05       	cpc	r25, r1
    2260:	c1 f1       	breq	.+112    	; 0x22d2 <LCD_displayCharacter+0xb6>
    2262:	2b 81       	ldd	r18, Y+3	; 0x03
    2264:	3c 81       	ldd	r19, Y+4	; 0x04
    2266:	22 30       	cpi	r18, 0x02	; 2
    2268:	31 05       	cpc	r19, r1
    226a:	0c f0       	brlt	.+2      	; 0x226e <LCD_displayCharacter+0x52>
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <LCD_displayCharacter+0xd0>
    226e:	8b 81       	ldd	r24, Y+3	; 0x03
    2270:	9c 81       	ldd	r25, Y+4	; 0x04
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	d1 f0       	breq	.+52     	; 0x22aa <LCD_displayCharacter+0x8e>
    2276:	8a c0       	rjmp	.+276    	; 0x238c <LCD_displayCharacter+0x170>
    2278:	2b 81       	ldd	r18, Y+3	; 0x03
    227a:	3c 81       	ldd	r19, Y+4	; 0x04
    227c:	25 30       	cpi	r18, 0x05	; 5
    227e:	31 05       	cpc	r19, r1
    2280:	09 f4       	brne	.+2      	; 0x2284 <LCD_displayCharacter+0x68>
    2282:	5d c0       	rjmp	.+186    	; 0x233e <LCD_displayCharacter+0x122>
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	85 30       	cpi	r24, 0x05	; 5
    228a:	91 05       	cpc	r25, r1
    228c:	0c f4       	brge	.+2      	; 0x2290 <LCD_displayCharacter+0x74>
    228e:	4a c0       	rjmp	.+148    	; 0x2324 <LCD_displayCharacter+0x108>
    2290:	2b 81       	ldd	r18, Y+3	; 0x03
    2292:	3c 81       	ldd	r19, Y+4	; 0x04
    2294:	26 30       	cpi	r18, 0x06	; 6
    2296:	31 05       	cpc	r19, r1
    2298:	09 f4       	brne	.+2      	; 0x229c <LCD_displayCharacter+0x80>
    229a:	68 c0       	rjmp	.+208    	; 0x236c <LCD_displayCharacter+0x150>
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	87 30       	cpi	r24, 0x07	; 7
    22a2:	91 05       	cpc	r25, r1
    22a4:	09 f4       	brne	.+2      	; 0x22a8 <LCD_displayCharacter+0x8c>
    22a6:	6e c0       	rjmp	.+220    	; 0x2384 <LCD_displayCharacter+0x168>
    22a8:	71 c0       	rjmp	.+226    	; 0x238c <LCD_displayCharacter+0x170>
		{
		case DISPLAY_CHAR_CASE_0: /******************CASE_0*********************/
			SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    22aa:	ab e3       	ldi	r26, 0x3B	; 59
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	eb e3       	ldi	r30, 0x3B	; 59
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	82 60       	ori	r24, 0x02	; 2
    22b6:	8c 93       	st	X, r24
			CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    22b8:	ab e3       	ldi	r26, 0x3B	; 59
    22ba:	b0 e0       	ldi	r27, 0x00	; 0
    22bc:	eb e3       	ldi	r30, 0x3B	; 59
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	8b 7f       	andi	r24, 0xFB	; 251
    22c4:	8c 93       	st	X, r24
			gu8_display_char_case=DISPLAY_CHAR_CASE_1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	80 93 1a 03 	sts	0x031A, r24
			au8_error=DISPLAY_DATA_INIT_OK;
    22cc:	84 e0       	ldi	r24, 0x04	; 4
    22ce:	89 83       	std	Y+1, r24	; 0x01
    22d0:	5f c0       	rjmp	.+190    	; 0x2390 <LCD_displayCharacter+0x174>
			break;
		case DISPLAY_CHAR_CASE_1: /******************CASE_1*********************/
			SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    22d2:	ab e3       	ldi	r26, 0x3B	; 59
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	eb e3       	ldi	r30, 0x3B	; 59
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	88 60       	ori	r24, 0x08	; 8
    22de:	8c 93       	st	X, r24
			gu8_display_char_case=DISPLAY_CHAR_CASE_2;
    22e0:	82 e0       	ldi	r24, 0x02	; 2
    22e2:	80 93 1a 03 	sts	0x031A, r24
			au8_error=DISBLAY_DATA_ENABLE_OK;
    22e6:	82 e0       	ldi	r24, 0x02	; 2
    22e8:	89 83       	std	Y+1, r24	; 0x01
    22ea:	52 c0       	rjmp	.+164    	; 0x2390 <LCD_displayCharacter+0x174>
			break;
		case DISPLAY_CHAR_CASE_2: /******************CASE_2*********************/
#if (DATA_BITS_MODE == 4) /* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (u8_data & 0xF0);
    22ec:	ab e3       	ldi	r26, 0x3B	; 59
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	eb e3       	ldi	r30, 0x3B	; 59
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	98 2f       	mov	r25, r24
    22f8:	9f 70       	andi	r25, 0x0F	; 15
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	80 7f       	andi	r24, 0xF0	; 240
    22fe:	89 2b       	or	r24, r25
    2300:	8c 93       	st	X, r24
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((u8_data & 0xF0) >> 4);
#endif
#elif (DATA_BITS_MODE == 8)
			LCD_DATA_PORT = u8_data; /* out the required command to the data bus D0 --> D7 */
#endif
			gu8_display_char_case=DISPLAY_CHAR_CASE_3;
    2302:	83 e0       	ldi	r24, 0x03	; 3
    2304:	80 93 1a 03 	sts	0x031A, r24
    2308:	43 c0       	rjmp	.+134    	; 0x2390 <LCD_displayCharacter+0x174>
			break;
		case DISPLAY_CHAR_CASE_3: /******************CASE_3*********************/
			CLEAR_BIT(LCD_CTRL_PORT,E); /* DISABLE LCD E=1 */
    230a:	ab e3       	ldi	r26, 0x3B	; 59
    230c:	b0 e0       	ldi	r27, 0x00	; 0
    230e:	eb e3       	ldi	r30, 0x3B	; 59
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	80 81       	ld	r24, Z
    2314:	87 7f       	andi	r24, 0xF7	; 247
    2316:	8c 93       	st	X, r24
			gu8_display_char_case=DISPLAY_CHAR_CASE_4;
    2318:	84 e0       	ldi	r24, 0x04	; 4
    231a:	80 93 1a 03 	sts	0x031A, r24
			au8_error=DISPLAY_DATA_DISABLE_OK;
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	89 83       	std	Y+1, r24	; 0x01
    2322:	36 c0       	rjmp	.+108    	; 0x2390 <LCD_displayCharacter+0x174>
			break;
		case DISPLAY_CHAR_CASE_4: /******************CASE_4*********************/
			SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    2324:	ab e3       	ldi	r26, 0x3B	; 59
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	eb e3       	ldi	r30, 0x3B	; 59
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	88 60       	ori	r24, 0x08	; 8
    2330:	8c 93       	st	X, r24
			gu8_display_char_case=DISPLAY_CHAR_CASE_5;
    2332:	85 e0       	ldi	r24, 0x05	; 5
    2334:	80 93 1a 03 	sts	0x031A, r24
			au8_error=DISBLAY_DATA_ENABLE_OK;
    2338:	82 e0       	ldi	r24, 0x02	; 2
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	29 c0       	rjmp	.+82     	; 0x2390 <LCD_displayCharacter+0x174>
			break;
		case  DISPLAY_CHAR_CASE_5: /******************CASE_5*********************/
			/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((u8_data & 0x0F) << 4);
    233e:	ab e3       	ldi	r26, 0x3B	; 59
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	eb e3       	ldi	r30, 0x3B	; 59
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	28 2f       	mov	r18, r24
    234a:	2f 70       	andi	r18, 0x0F	; 15
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	88 2f       	mov	r24, r24
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	82 95       	swap	r24
    2354:	92 95       	swap	r25
    2356:	90 7f       	andi	r25, 0xF0	; 240
    2358:	98 27       	eor	r25, r24
    235a:	80 7f       	andi	r24, 0xF0	; 240
    235c:	98 27       	eor	r25, r24
    235e:	82 2b       	or	r24, r18
    2360:	8c 93       	st	X, r24
#else
			LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (u8_data & 0x0F);
#endif
			au8_error=DISPLAY_DATA_CONFIG_OK;
    2362:	19 82       	std	Y+1, r1	; 0x01
			gu8_display_char_case=DISPLAY_CHAR_CASE_6;
    2364:	86 e0       	ldi	r24, 0x06	; 6
    2366:	80 93 1a 03 	sts	0x031A, r24
    236a:	12 c0       	rjmp	.+36     	; 0x2390 <LCD_displayCharacter+0x174>
			break;
		case DISPLAY_CHAR_CASE_6: /******************CASE_6*********************/
			CLEAR_BIT(LCD_CTRL_PORT,E); /* DISABLE LCD E=1 */
    236c:	ab e3       	ldi	r26, 0x3B	; 59
    236e:	b0 e0       	ldi	r27, 0x00	; 0
    2370:	eb e3       	ldi	r30, 0x3B	; 59
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	80 81       	ld	r24, Z
    2376:	87 7f       	andi	r24, 0xF7	; 247
    2378:	8c 93       	st	X, r24
			au8_error=DISPLAY_DATA_CONFIG_OK;
    237a:	19 82       	std	Y+1, r1	; 0x01
			gu8_display_char_case=DISPLAY_CHAR_CASE_7;
    237c:	87 e0       	ldi	r24, 0x07	; 7
    237e:	80 93 1a 03 	sts	0x031A, r24
    2382:	06 c0       	rjmp	.+12     	; 0x2390 <LCD_displayCharacter+0x174>
			break;
		case DISPLAY_CHAR_CASE_7:
			gu8_display_char_case=DISPLAY_CHAR_CASE_0;
    2384:	10 92 1a 03 	sts	0x031A, r1
			au8_error=0;
    2388:	19 82       	std	Y+1, r1	; 0x01
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <LCD_displayCharacter+0x174>
			break;
		default:
			au8_error=DISPLAY_DATA_NOK;
    238c:	83 e0       	ldi	r24, 0x03	; 3
    238e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return au8_error;
    2390:	89 81       	ldd	r24, Y+1	; 0x01
}
    2392:	0f 90       	pop	r0
    2394:	0f 90       	pop	r0
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	cf 91       	pop	r28
    239c:	df 91       	pop	r29
    239e:	08 95       	ret

000023a0 <LCD_displayString>:

ERROR_TYPE_t LCD_displayString(const uint8_t * ptr_String, uint8_t* u8_dumy)
{
    23a0:	df 93       	push	r29
    23a2:	cf 93       	push	r28
    23a4:	00 d0       	rcall	.+0      	; 0x23a6 <LCD_displayString+0x6>
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <LCD_displayString+0x8>
    23a8:	0f 92       	push	r0
    23aa:	cd b7       	in	r28, 0x3d	; 61
    23ac:	de b7       	in	r29, 0x3e	; 62
    23ae:	9b 83       	std	Y+3, r25	; 0x03
    23b0:	8a 83       	std	Y+2, r24	; 0x02
    23b2:	7d 83       	std	Y+5, r23	; 0x05
    23b4:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t au8_error=NULL;
    23b6:	19 82       	std	Y+1, r1	; 0x01
	if(gu8_INIT_Cases==INIT_CASE_3)
    23b8:	80 91 17 03 	lds	r24, 0x0317
    23bc:	83 30       	cpi	r24, 0x03	; 3
    23be:	e1 f5       	brne	.+120    	; 0x2438 <LCD_displayString+0x98>
	{
		if(*u8_dumy==NULL)
    23c0:	ec 81       	ldd	r30, Y+4	; 0x04
    23c2:	fd 81       	ldd	r31, Y+5	; 0x05
    23c4:	80 81       	ld	r24, Z
    23c6:	88 23       	and	r24, r24
    23c8:	b9 f5       	brne	.+110    	; 0x2438 <LCD_displayString+0x98>
		{
			if (ptr_String[gu8_display_string_flag_arr] != '\0')
    23ca:	80 91 1b 03 	lds	r24, 0x031B
    23ce:	28 2f       	mov	r18, r24
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	9b 81       	ldd	r25, Y+3	; 0x03
    23d6:	fc 01       	movw	r30, r24
    23d8:	e2 0f       	add	r30, r18
    23da:	f3 1f       	adc	r31, r19
    23dc:	80 81       	ld	r24, Z
    23de:	88 23       	and	r24, r24
    23e0:	11 f1       	breq	.+68     	; 0x2426 <LCD_displayString+0x86>
			{
				LCD_displayCharacter(ptr_String[gu8_display_string_flag_arr]);
    23e2:	80 91 1b 03 	lds	r24, 0x031B
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	9b 81       	ldd	r25, Y+3	; 0x03
    23ee:	fc 01       	movw	r30, r24
    23f0:	e2 0f       	add	r30, r18
    23f2:	f3 1f       	adc	r31, r19
    23f4:	80 81       	ld	r24, Z
    23f6:	0e 94 0e 11 	call	0x221c	; 0x221c <LCD_displayCharacter>
				gu8_display_string_flag++;
    23fa:	80 91 1c 03 	lds	r24, 0x031C
    23fe:	8f 5f       	subi	r24, 0xFF	; 255
    2400:	80 93 1c 03 	sts	0x031C, r24
				if(gu8_display_string_flag==8)
    2404:	80 91 1c 03 	lds	r24, 0x031C
    2408:	88 30       	cpi	r24, 0x08	; 8
    240a:	51 f4       	brne	.+20     	; 0x2420 <LCD_displayString+0x80>
				{
					gu8_display_string_flag_arr+=1;
    240c:	80 91 1b 03 	lds	r24, 0x031B
    2410:	8f 5f       	subi	r24, 0xFF	; 255
    2412:	80 93 1b 03 	sts	0x031B, r24
					gu8_display_string_flag=NULL;
    2416:	10 92 1c 03 	sts	0x031C, r1
					au8_error=DISPLAY_STRING_CHAR_DONE;
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	0c c0       	rjmp	.+24     	; 0x2438 <LCD_displayString+0x98>
				}
				else
				{
					au8_error=DISPLAY_STRING_CHAR_NDONE;
    2420:	82 e0       	ldi	r24, 0x02	; 2
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	09 c0       	rjmp	.+18     	; 0x2438 <LCD_displayString+0x98>
				}
			}
			else
			{
				(*u8_dumy)=1;
    2426:	ec 81       	ldd	r30, Y+4	; 0x04
    2428:	fd 81       	ldd	r31, Y+5	; 0x05
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	80 83       	st	Z, r24
				gu8_display_string_flag_arr=NULL;
    242e:	10 92 1b 03 	sts	0x031B, r1
				gu8_display_string_flag=NULL;
    2432:	10 92 1c 03 	sts	0x031C, r1
				au8_error=DISPLAY_STRING_FINISHED;
    2436:	19 82       	std	Y+1, r1	; 0x01
			}
		}
	}
	return au8_error;
    2438:	89 81       	ldd	r24, Y+1	; 0x01
}
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	0f 90       	pop	r0
    2444:	cf 91       	pop	r28
    2446:	df 91       	pop	r29
    2448:	08 95       	ret

0000244a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    244a:	df 93       	push	r29
    244c:	cf 93       	push	r28
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
}
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8_t u8_row,uint8_t u8_col)
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	00 d0       	rcall	.+0      	; 0x2464 <LCD_goToRowColumn+0x6>
    2464:	00 d0       	rcall	.+0      	; 0x2466 <LCD_goToRowColumn+0x8>
    2466:	0f 92       	push	r0
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
    246c:	8a 83       	std	Y+2, r24	; 0x02
    246e:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Address;

		/* first of all calculate the required address */
		switch(u8_row)
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	3d 83       	std	Y+5, r19	; 0x05
    2478:	2c 83       	std	Y+4, r18	; 0x04
    247a:	8c 81       	ldd	r24, Y+4	; 0x04
    247c:	9d 81       	ldd	r25, Y+5	; 0x05
    247e:	81 30       	cpi	r24, 0x01	; 1
    2480:	91 05       	cpc	r25, r1
    2482:	c1 f0       	breq	.+48     	; 0x24b4 <LCD_goToRowColumn+0x56>
    2484:	2c 81       	ldd	r18, Y+4	; 0x04
    2486:	3d 81       	ldd	r19, Y+5	; 0x05
    2488:	22 30       	cpi	r18, 0x02	; 2
    248a:	31 05       	cpc	r19, r1
    248c:	2c f4       	brge	.+10     	; 0x2498 <LCD_goToRowColumn+0x3a>
    248e:	8c 81       	ldd	r24, Y+4	; 0x04
    2490:	9d 81       	ldd	r25, Y+5	; 0x05
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	61 f0       	breq	.+24     	; 0x24ae <LCD_goToRowColumn+0x50>
    2496:	19 c0       	rjmp	.+50     	; 0x24ca <LCD_goToRowColumn+0x6c>
    2498:	2c 81       	ldd	r18, Y+4	; 0x04
    249a:	3d 81       	ldd	r19, Y+5	; 0x05
    249c:	22 30       	cpi	r18, 0x02	; 2
    249e:	31 05       	cpc	r19, r1
    24a0:	69 f0       	breq	.+26     	; 0x24bc <LCD_goToRowColumn+0x5e>
    24a2:	8c 81       	ldd	r24, Y+4	; 0x04
    24a4:	9d 81       	ldd	r25, Y+5	; 0x05
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	91 05       	cpc	r25, r1
    24aa:	61 f0       	breq	.+24     	; 0x24c4 <LCD_goToRowColumn+0x66>
    24ac:	0e c0       	rjmp	.+28     	; 0x24ca <LCD_goToRowColumn+0x6c>
		{
			case 0:
					Address=u8_col;
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	89 83       	std	Y+1, r24	; 0x01
    24b2:	0b c0       	rjmp	.+22     	; 0x24ca <LCD_goToRowColumn+0x6c>
					break;
			case 1:
					Address=u8_col+0x40;
    24b4:	8b 81       	ldd	r24, Y+3	; 0x03
    24b6:	80 5c       	subi	r24, 0xC0	; 192
    24b8:	89 83       	std	Y+1, r24	; 0x01
    24ba:	07 c0       	rjmp	.+14     	; 0x24ca <LCD_goToRowColumn+0x6c>
					break;
			case 2:
					Address=u8_col+0x10;
    24bc:	8b 81       	ldd	r24, Y+3	; 0x03
    24be:	80 5f       	subi	r24, 0xF0	; 240
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	03 c0       	rjmp	.+6      	; 0x24ca <LCD_goToRowColumn+0x6c>
					break;
			case 3:
					Address=u8_col+0x50;
    24c4:	8b 81       	ldd	r24, Y+3	; 0x03
    24c6:	80 5b       	subi	r24, 0xB0	; 176
    24c8:	89 83       	std	Y+1, r24	; 0x01
					break;
		}
		/* to write to a specific address in the LCD
		 * we need to apply the corresponding command 0b10000000+Address */
		LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	80 68       	ori	r24, 0x80	; 128
    24ce:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LCD_sendCommand>
}
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <LCD_displayStringRowColumn>:
void LCD_displayStringRowColumn(uint8_t row,uint8_t col,const uint8_t *Str,uint8_t * u8_flag)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <LCD_displayStringRowColumn+0x6>
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <LCD_displayStringRowColumn+0x8>
    24ea:	00 d0       	rcall	.+0      	; 0x24ec <LCD_displayStringRowColumn+0xa>
    24ec:	cd b7       	in	r28, 0x3d	; 61
    24ee:	de b7       	in	r29, 0x3e	; 62
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	6a 83       	std	Y+2, r22	; 0x02
    24f4:	5c 83       	std	Y+4, r21	; 0x04
    24f6:	4b 83       	std	Y+3, r20	; 0x03
    24f8:	3e 83       	std	Y+6, r19	; 0x06
    24fa:	2d 83       	std	Y+5, r18	; 0x05
	if(*u8_flag==NULL)
    24fc:	ed 81       	ldd	r30, Y+5	; 0x05
    24fe:	fe 81       	ldd	r31, Y+6	; 0x06
    2500:	80 81       	ld	r24, Z
    2502:	88 23       	and	r24, r24
    2504:	01 f5       	brne	.+64     	; 0x2546 <LCD_displayStringRowColumn+0x64>
	{
		gu8_display_row_col++;
    2506:	80 91 1d 03 	lds	r24, 0x031D
    250a:	8f 5f       	subi	r24, 0xFF	; 255
    250c:	80 93 1d 03 	sts	0x031D, r24
		if(gu8_display_row_col<=8)
    2510:	80 91 1d 03 	lds	r24, 0x031D
    2514:	89 30       	cpi	r24, 0x09	; 9
    2516:	28 f4       	brcc	.+10     	; 0x2522 <LCD_displayStringRowColumn+0x40>
		{
			LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	6a 81       	ldd	r22, Y+2	; 0x02
    251c:	0e 94 2f 12 	call	0x245e	; 0x245e <LCD_goToRowColumn>
    2520:	12 c0       	rjmp	.+36     	; 0x2546 <LCD_displayStringRowColumn+0x64>
		}
		else if(gu8_display_row_col>=8)
    2522:	80 91 1d 03 	lds	r24, 0x031D
    2526:	88 30       	cpi	r24, 0x08	; 8
    2528:	70 f0       	brcs	.+28     	; 0x2546 <LCD_displayStringRowColumn+0x64>
		{
			LCD_displayString(Str, u8_flag);
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	9c 81       	ldd	r25, Y+4	; 0x04
    252e:	2d 81       	ldd	r18, Y+5	; 0x05
    2530:	3e 81       	ldd	r19, Y+6	; 0x06
    2532:	b9 01       	movw	r22, r18
    2534:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
			if(*u8_flag==1)
    2538:	ed 81       	ldd	r30, Y+5	; 0x05
    253a:	fe 81       	ldd	r31, Y+6	; 0x06
    253c:	80 81       	ld	r24, Z
    253e:	81 30       	cpi	r24, 0x01	; 1
    2540:	11 f4       	brne	.+4      	; 0x2546 <LCD_displayStringRowColumn+0x64>
			{
				gu8_display_row_col=0;
    2542:	10 92 1d 03 	sts	0x031D, r1
			}
		}
	}
}
    2546:	26 96       	adiw	r28, 0x06	; 6
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <LCD_intgerToString>:

void LCD_intgerToString(uint8_t u8_data, uint8_t *u8_flag)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <LCD_intgerToString+0x6>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <LCD_intgerToString+0x8>
    2560:	0f 92       	push	r0
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	8b 83       	std	Y+3, r24	; 0x03
    2568:	7d 83       	std	Y+5, r23	; 0x05
    256a:	6c 83       	std	Y+4, r22	; 0x04
	if(gu8_int_flag==NULL)
    256c:	80 91 1e 03 	lds	r24, 0x031E
    2570:	88 23       	and	r24, r24
    2572:	51 f4       	brne	.+20     	; 0x2588 <LCD_intgerToString+0x30>
	{
		itoa(u8_data,u8_buff,10); /* 10 for decimal */
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	88 2f       	mov	r24, r24
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	2f e1       	ldi	r18, 0x1F	; 31
    257c:	33 e0       	ldi	r19, 0x03	; 3
    257e:	b9 01       	movw	r22, r18
    2580:	4a e0       	ldi	r20, 0x0A	; 10
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	0e 94 f5 12 	call	0x25ea	; 0x25ea <itoa>
	}
	if(gu8_int_flag<=8)
    2588:	80 91 1e 03 	lds	r24, 0x031E
    258c:	89 30       	cpi	r24, 0x09	; 9
    258e:	28 f5       	brcc	.+74     	; 0x25da <LCD_intgerToString+0x82>
	{
		 LCD_displayString(&u8_buff, u8_flag);
    2590:	8f e1       	ldi	r24, 0x1F	; 31
    2592:	93 e0       	ldi	r25, 0x03	; 3
    2594:	2c 81       	ldd	r18, Y+4	; 0x04
    2596:	3d 81       	ldd	r19, Y+5	; 0x05
    2598:	b9 01       	movw	r22, r18
    259a:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <LCD_displayString>
		 gu8_int_flag++;
    259e:	80 91 1e 03 	lds	r24, 0x031E
    25a2:	8f 5f       	subi	r24, 0xFF	; 255
    25a4:	80 93 1e 03 	sts	0x031E, r24
		 if(gu8_int_flag==9)
    25a8:	80 91 1e 03 	lds	r24, 0x031E
    25ac:	89 30       	cpi	r24, 0x09	; 9
    25ae:	a9 f4       	brne	.+42     	; 0x25da <LCD_intgerToString+0x82>
		 {
			 gu8_int_flag=NULL;
    25b0:	10 92 1e 03 	sts	0x031E, r1
			 for(int i=0; i<16;i++)
    25b4:	1a 82       	std	Y+2, r1	; 0x02
    25b6:	19 82       	std	Y+1, r1	; 0x01
    25b8:	0b c0       	rjmp	.+22     	; 0x25d0 <LCD_intgerToString+0x78>
			 {
				 u8_buff[i]=0;
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	9a 81       	ldd	r25, Y+2	; 0x02
    25be:	fc 01       	movw	r30, r24
    25c0:	e1 5e       	subi	r30, 0xE1	; 225
    25c2:	fc 4f       	sbci	r31, 0xFC	; 252
    25c4:	10 82       	st	Z, r1
		 LCD_displayString(&u8_buff, u8_flag);
		 gu8_int_flag++;
		 if(gu8_int_flag==9)
		 {
			 gu8_int_flag=NULL;
			 for(int i=0; i<16;i++)
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	01 96       	adiw	r24, 0x01	; 1
    25cc:	9a 83       	std	Y+2, r25	; 0x02
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	89 81       	ldd	r24, Y+1	; 0x01
    25d2:	9a 81       	ldd	r25, Y+2	; 0x02
    25d4:	80 31       	cpi	r24, 0x10	; 16
    25d6:	91 05       	cpc	r25, r1
    25d8:	84 f3       	brlt	.-32     	; 0x25ba <LCD_intgerToString+0x62>
			 {
				 u8_buff[i]=0;
			 }
		 }
	}
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <itoa>:
    25ea:	fb 01       	movw	r30, r22
    25ec:	9f 01       	movw	r18, r30
    25ee:	e8 94       	clt
    25f0:	42 30       	cpi	r20, 0x02	; 2
    25f2:	c4 f0       	brlt	.+48     	; 0x2624 <itoa+0x3a>
    25f4:	45 32       	cpi	r20, 0x25	; 37
    25f6:	b4 f4       	brge	.+44     	; 0x2624 <itoa+0x3a>
    25f8:	4a 30       	cpi	r20, 0x0A	; 10
    25fa:	29 f4       	brne	.+10     	; 0x2606 <itoa+0x1c>
    25fc:	97 fb       	bst	r25, 7
    25fe:	1e f4       	brtc	.+6      	; 0x2606 <itoa+0x1c>
    2600:	90 95       	com	r25
    2602:	81 95       	neg	r24
    2604:	9f 4f       	sbci	r25, 0xFF	; 255
    2606:	64 2f       	mov	r22, r20
    2608:	77 27       	eor	r23, r23
    260a:	0e 94 26 13 	call	0x264c	; 0x264c <__udivmodhi4>
    260e:	80 5d       	subi	r24, 0xD0	; 208
    2610:	8a 33       	cpi	r24, 0x3A	; 58
    2612:	0c f0       	brlt	.+2      	; 0x2616 <itoa+0x2c>
    2614:	89 5d       	subi	r24, 0xD9	; 217
    2616:	81 93       	st	Z+, r24
    2618:	cb 01       	movw	r24, r22
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	a1 f7       	brne	.-24     	; 0x2606 <itoa+0x1c>
    261e:	16 f4       	brtc	.+4      	; 0x2624 <itoa+0x3a>
    2620:	5d e2       	ldi	r21, 0x2D	; 45
    2622:	51 93       	st	Z+, r21
    2624:	10 82       	st	Z, r1
    2626:	c9 01       	movw	r24, r18
    2628:	0c 94 16 13 	jmp	0x262c	; 0x262c <strrev>

0000262c <strrev>:
    262c:	dc 01       	movw	r26, r24
    262e:	fc 01       	movw	r30, r24
    2630:	67 2f       	mov	r22, r23
    2632:	71 91       	ld	r23, Z+
    2634:	77 23       	and	r23, r23
    2636:	e1 f7       	brne	.-8      	; 0x2630 <strrev+0x4>
    2638:	32 97       	sbiw	r30, 0x02	; 2
    263a:	04 c0       	rjmp	.+8      	; 0x2644 <strrev+0x18>
    263c:	7c 91       	ld	r23, X
    263e:	6d 93       	st	X+, r22
    2640:	70 83       	st	Z, r23
    2642:	62 91       	ld	r22, -Z
    2644:	ae 17       	cp	r26, r30
    2646:	bf 07       	cpc	r27, r31
    2648:	c8 f3       	brcs	.-14     	; 0x263c <strrev+0x10>
    264a:	08 95       	ret

0000264c <__udivmodhi4>:
    264c:	aa 1b       	sub	r26, r26
    264e:	bb 1b       	sub	r27, r27
    2650:	51 e1       	ldi	r21, 0x11	; 17
    2652:	07 c0       	rjmp	.+14     	; 0x2662 <__udivmodhi4_ep>

00002654 <__udivmodhi4_loop>:
    2654:	aa 1f       	adc	r26, r26
    2656:	bb 1f       	adc	r27, r27
    2658:	a6 17       	cp	r26, r22
    265a:	b7 07       	cpc	r27, r23
    265c:	10 f0       	brcs	.+4      	; 0x2662 <__udivmodhi4_ep>
    265e:	a6 1b       	sub	r26, r22
    2660:	b7 0b       	sbc	r27, r23

00002662 <__udivmodhi4_ep>:
    2662:	88 1f       	adc	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	5a 95       	dec	r21
    2668:	a9 f7       	brne	.-22     	; 0x2654 <__udivmodhi4_loop>
    266a:	80 95       	com	r24
    266c:	90 95       	com	r25
    266e:	bc 01       	movw	r22, r24
    2670:	cd 01       	movw	r24, r26
    2672:	08 95       	ret

00002674 <_exit>:
    2674:	f8 94       	cli

00002676 <__stop_program>:
    2676:	ff cf       	rjmp	.-2      	; 0x2676 <__stop_program>
